{
  "author": "RedKubes",
  "bugs": {
    "url": "https://github.com/linode/apl-core/issues"
  },
  "config": {
    "commitizen": {
      "path": "cz-conventional-changelog"
    }
  },
  "dependencies": {
    "@apidevtools/json-schema-ref-parser": "14.2.1",
    "@kubernetes/client-node": "1.3.0",
    "@types/deep-diff": "1.0.5",
    "@types/semver": "7.7.1",
    "ajv": "8.17.1",
    "async-retry": "1.3.3",
    "clean-deep": "3.4.0",
    "cli-select": "1.1.2",
    "debug": "4.4.3",
    "deep-diff": "1.0.2",
    "dotenv": "17.2.2",
    "envalid": "8.1.0",
    "express": "5.1.0",
    "fs-extra": "11.3.2",
    "generate-password": "^1.7.1",
    "glob": "^11.0.3",
    "ignore-walk": "8.0.0",
    "jsonpath": "^1.1.1",
    "lodash": "4.17.21",
    "minimatch": "^10.0.1",
    "node-forge": "1.3.1",
    "semver": "7.7.2",
    "simple-git": "^3.28.0",
    "tar": "7.5.1",
    "uuid": "^11.1.0",
    "validator": "13.15.15",
    "yaml": "2.8.1",
    "yargs": "^17.7.2",
    "zx": "8.8.4"
  },
  "description": "Otomi Core is an opinionated stack of Kubernetes apps and configurations. Part of Otomi Container Platform.",
  "devDependencies": {
    "@babel/core": "^7.28.4",
    "@babel/preset-env": "^7.28.3",
    "@babel/preset-typescript": "^7.27.1",
    "@commitlint/cli": "19.8.1",
    "@commitlint/config-conventional": "19.8.1",
    "@eslint/compat": "^1.4.0",
    "@hkdobrev/run-if-changed": "0.6.3",
    "@jest/types": "29.6.3",
    "@semantic-release/changelog": "^6.0.3",
    "@semantic-release/git": "^10.0.1",
    "@types/async-retry": "1.4.9",
    "@types/debug": "4.1.12",
    "@types/express": "5.0.3",
    "@types/fs-extra": "^11.0.4",
    "@types/ignore-walk": "4.0.3",
    "@types/jest": "^30.0.0",
    "@types/js-yaml": "4.0.9",
    "@types/jsonpath": "0.2.4",
    "@types/lodash": "4.17.20",
    "@types/node": "22.15.29",
    "@types/node-forge": "1.3.14",
    "@types/retry": "0.12.5",
    "@types/supertest": "6.0.3",
    "@types/tar": "6.1.13",
    "@types/validator": "13.15.3",
    "@types/yargs": "^17.0.33",
    "@typescript-eslint/eslint-plugin": "^8.44.1",
    "@typescript-eslint/parser": "^8.33.1",
    "@vercel/ncc": "0.38.4",
    "adr-log": "2.2.0",
    "commitizen": "4.3.1",
    "cspell": "9.2.1",
    "cz-conventional-changelog": "3.3.0",
    "eslint": "^9.36.0",
    "eslint-config-prettier": "10.1.8",
    "eslint-import-resolver-typescript": "^4.4.4",
    "eslint-plugin-import": "2.32.0",
    "eslint-plugin-prettier": "^5.5.4",
    "eslint-plugin-unused-imports": "^4.2.0",
    "git-cz": "4.9.0",
    "github-release-from-changelog": "2.1.1",
    "globals": "^16.4.0",
    "husky": "9.1.7",
    "jest": "^30.2.0",
    "json-schema-to-typescript": "15.0.4",
    "json2ts": "0.0.7",
    "lint-staged": "16.2.3",
    "npm-run-all": "4.1.5",
    "prettier": "3.6.2",
    "semantic-release": "^24.2.9",
    "standard-version": "9.5.0",
    "ts-node": "^10.9.2",
    "tsc-alias": "^1.8.16",
    "tsconfig-paths": "4.2.0",
    "tsx": "^4.20.6",
    "typescript": "5.9.2"
  },
  "engines": {
    "node": ">=22 <23"
  },
  "homepage": "https://github.com/linode/apl-core#readme",
  "license": "Apache-2.0",
  "lint-staged": {
    "*.{json,yml,yaml}": [
      "prettier --write"
    ],
    "*.ts": [
      "eslint --fix"
    ]
  },
  "main": "src/otomi.ts",
  "name": "apl-core",
  "private": true,
  "repository": {
    "type": "git",
    "url": "git+https://github.com/linode/apl-core.git"
  },
  "run-if-changed": {
    "package-lock.json": "npm install --prefer-offline --no-audit",
    "values-schema.yaml": "npm run gen:chart-schema"
  },
  "scripts": {
    "apl-operator": "tsx src/operator/main.ts",
    "apl-operator:dev": "tsx watch --inspect=4320 src/operator/main.ts",
    "install-deps": "bin/install-deps.sh",
    "app-versions:csv": "echo 'name,appVersion,chartVersion'; for f in $(find charts -name Chart.yaml -type f -maxdepth 2| sort); do yq eval -o=json $f | jq -rc '. | [.name, .appVersion, .version] | @csv' | tr -d '\"'; done",
    "charts-update": "cd chart/chart-index && helm dep update",
    "charts-gen-deps": "for f in $(find charts -name Chart.yaml -type f -maxdepth 2| sort); do yq eval $f -o=json | jq '{name, version, repository}';done |   jq -s '.' | yq eval -P",
    "adr": "adr-log -d adr -i",
    "check-policies": "ENV_DIR=$PWD/tests/fixtures NODE_ENV=test binzx/otomi check-policies",
    "clean": "rm -rf dist >/dev/null",
    "compile": "npm run clean && tsc -p tsconfig.build.json && tsc-alias -p tsconfig.build.json -v --dir dist && chmod +x ./dist/src/otomi.js",
    "compile:watch": "npm run compile && tsc -w",
    "cz": "git-cz",
    "cz:retry": "git-cz -- --retry",
    "dev:bootstrapCoreApp": "tsx src/dev/bootstrapCoreApp.ts",
    "eslint": "eslint --ext ts .",
    "eslint:fix": "eslint --fix --ext ts .",
    "format": "prettier --check \"**/*.{json,md,yml,yaml}\"",
    "format:fix": "prettier --write \"**/*.{json,md,yml,yaml}\"",
    "gen:chart-schema": "js-yaml values-schema.yaml > chart/apl/values.schema.json",
    "lint": "run-p spellcheck lint:hf lint:ts lint:types",
    "lint-staged": "lint-staged",
    "lint:fix": "prettier --write tests/**/*.yaml --write '.values/env/**/*.yaml' && npm run lint:ts:fix",
    "lint:hf": "ENV_DIR=$PWD/tests/fixtures NODE_ENV=test binzx/otomi lint",
    "lint:ts": "eslint --ext ts src",
    "lint:ts:fix": "eslint --fix --ext ts src",
    "lint:types": "tsc --noEmit",
    "migrate-values": "ENV_DIR=/tmp/otomi-bootstrap-dev binzx/otomi migrate -ni",
    "prepare": "husky",
    "release": "standard-version",
    "release:github": "github-release-from-changelog",
    "release:bump:minor": "standard-version --skip.changelog true --release-as minor",
    "run-if-changed": "run-if-changed",
    "score-templates": "binzx/otomi score-templates",
    "server": "binzx/otomi server",
    "spellcheck": "cspell 'docs/**/*.md' 'values-schema.yaml' '*.md' '.values/README.md'",
    "tasks:copy-certs": "binzx/otomi task -n copyCerts",
    "test": "run-s test:ts lint validate-values validate-templates bootstrap-dev",
    "test:ci": "run-s test:ts:ci lint validate-values validate-templates bootstrap-dev",
    "test:opa": "NODE_ENV=test binzx/otomi x opa test policies -v",
    "test:ts": "ENV_DIR=$PWD/tests/fixtures NODE_ENV=test jest",
    "test:ts:ci": "ENV_DIR=$PWD/tests/fixtures NODE_ENV=test jest --forceExit --maxWorkers=2 --ci",
    "test:ts-cov": "jest --coverage",
    "validate-templates": "ENV_DIR=$PWD/tests/fixtures NODE_ENV=test binzx/otomi validate-templates",
    "validate-templates:all": "set -e; i=30; while [ $i -le 33 ]; do NODE_ENV=test binzx/otomi validate-templates -k 1.$i; i=$(($i+1)); done",
    "validate-values": "ENV_DIR=$PWD/tests/fixtures NODE_ENV=test binzx/otomi validate-values",
    "bootstrap-dev": "rm -rf /tmp/otomi-bootstrap-dev; CI=1 VALUES_INPUT=$PWD/tests/bootstrap/input-local-dev.yaml ENV_DIR=/tmp/otomi-bootstrap-dev binzx/otomi bootstrap",
    "bootstrap-dev-with-repo": "CI=1 ENV_DIR=/tmp/otomi-bootstrap-dev binzx/otomi bootstrap",
    "bootstrap-tests-fixtures": "CI=1 ENV_DIR=$PWD/tests/fixtures binzx/otomi bootstrap"
  },
  "standard-version": {
    "skip": {
      "tag": true
    }
  },
  "type": "commonjs",
  "version": "4.11.0"
}
