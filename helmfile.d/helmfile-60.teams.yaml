bases:
  - snippets/defaults.yaml
---
bases:
  - snippets/defaults.gotmpl
---
bases:
  - snippets/env.gotmpl
---
bases:
  - snippets/derived.gotmpl
---
{{- $v := .Values }}
{{- $a := $v.apps }}
{{- $tc := $v.teamConfig }}
{{- $slackTpl := tpl (readFile "../helmfile.d/snippets/alertmanager/slack.gotmpl") $v | toString }}
{{- $opsgenieTpl := tpl (readFile "../helmfile.d/snippets/alertmanager/opsgenie.gotmpl") $v | toString }}
releases:
{{- range $teamId, $team := omit $tc "admin" }} 
  {{- $teamServices := ($team | get "services" list) }}
  {{- $domain := ($v.cluster | get "domainSuffix" nil) }}
  {{- $alertmanagerDomain := printf "alertmanager.%s" $domain }}
  {{- $prometheusDomain := printf "prometheus-%s.%s" $teamId $domain }}
  {{- $grafanaDomain := printf "grafana-%s.%s" $teamId $domain }}
  {{- $azure := $team | get "azure" dict }}
  {{- $teamApps := index $tc $teamId "apps" | default dict }}
  - name: tekton-dashboard-{{ $teamId }}
    installed: true
    namespace: team-{{ $teamId }}
    chart: ../charts/tekton-dashboard
    labels:
      tag: teams
      team: {{ $teamId }}
      pipeline: otomi-task-teams
    values:
      - ../values/tekton-dashboard/tekton-dashboard-teams.gotmpl
      - resources:
          {{- $teamApps.tekton.resources.dashboard | toYaml | nindent 10 }}
  - name: prometheus-{{ $teamId }}
    installed: {{ or ($team | get "managedMonitoring.grafana" false) ($team | get "managedMonitoring.alertmanager" false) }}
    namespace: team-{{ $teamId }}
    chart: ../charts/kube-prometheus-stack
    labels:
      tag: teams
      team: {{ $teamId }}
      pipeline: otomi-task-teams
    values:
      - ../values/prometheus-operator/prometheus-operator.gotmpl
      - ../values/prometheus-operator/prometheus-operator-team.gotmpl
      - nameOverride: {{ $teamId }}-po
        fullnameOverride: {{ $teamId }}-po
        alertmanager:
          enabled: {{ $team | get "managedMonitoring.alertmanager" false }}
          namespaceOverride: null
          alertmanagerSpec:
            externalUrl: "https://alertmanager-{{ $teamId }}.{{ $domain }}"
            podMetadata:
              annotations:
                sidecar.istio.io/inject: "true"
              labels:
                prometheus: system
            resources:
              {{- $teamApps.alertmanager.resources | toYaml | nindent 14 }}
          # to do: load slackTpl and opsgenieTpl only if alerts.receicers = true
          config: {{- tpl (readFile "../helmfile.d/snippets/alertmanager-teams.gotmpl") (dict "instance" $team "root" $v "slackTpl" $slackTpl "opsgenieTpl" $opsgenieTpl) | nindent 12 }}
        defaultRules:
          rules:
            general: false
        commonLabels:
          prometheus: team-{{ $teamId }}
        prometheus:
          enabled: false
          prometheusSpec: {}
        grafana:
          enabled: {{ $team | get "managedMonitoring.grafana" false }}
          resources:
            {{- $teamApps.grafana.resources.grafana | toYaml | nindent 12 }}
          namespaceOverride: null # team-{{ $teamId }}
          nameOverride: {{ $teamId }}-po-grafana
          fullnameOverride: {{ $teamId }}-po-grafana
          grafana.ini:
            "auth.generic_oauth":
              role_attribute_path: >-
                contains(groups[*], 'admin') && 'Admin' ||
                contains(groups[*], 'platform-admin') && 'Admin' ||
                contains(groups[*], 'team-{{ $teamId }}') && 'Editor'
            server:
              root_url: https://grafana-{{ $teamId }}.{{ $domain }}
            analytics:
              check_for_updates: false
              reporting_enabled: false
              check_for_plugin_updates: false
          sidecar:
            datasources:
              defaultDatasourceEnabled: false
            dashboards:
              enabled: true
              label: release
              labelValue: grafana-dashboards-{{ $teamId }}
            resources:
              {{- $teamApps.grafana.resources.sidecar | toYaml | nindent 14 }}
          additionalDataSources:
            - name: Prometheus-platform
              editable: false
              uid: prometheus-platform
              {{- if $v.apps.thanos.enabled }}
              isDefault: false
              {{- else }}
              isDefault: true
              {{- end }}
              type: prometheus
              access: proxy
              url: http://po-prometheus.monitoring:9090
              jsonData:
                httpMethod: GET
            {{- if $v.apps.thanos.enabled }}
            - name: Thanos Query
              access: proxy
              isDefault: true
              basicAuth: false
              editable: false
              orgId: 1
              type: prometheus
              url: http://thanos-query.thanos:9090
              jsonData:
                prometheusType: Thanos
                timeInterval: "60s"
            {{- end }}
            - name: Loki
              editable: false
              uid: loki
              type: loki
              access: proxy
              url: http://loki-query-frontend-headless.monitoring:3101
              basicAuth: true
              basicAuthUser: {{ $teamId }}
              secureJsonData: 
                basicAuthPassword: {{ $team.password | quote }}
              jsonData:
                derivedFields:
                  - datasourceName: Tempo
                    matcherRegex: "traceID=00-([^\\-]+)-"
                    name: traceID
                    url: "$${__value.raw}"
                    datasourceUid: tempo
            - name: Tempo
              type: tempo
              uid: tempo
              editable: false
              access: proxy
              url: http://tempo-query-frontend.tempo:3100
              jsonData:
                tracesToLogsV2:
                  datasourceUid: 'loki'
                  spanStartTimeShift: '1h'
                  spanEndTimeShift: '-1h'
                  tags: [{ key: 'k8s.namespace.name', value: 'namespace' }]
                  filterByTraceID: false
                  filterBySpanID: false
                  customQuery: true
                  query: '{namespace="team-{{ $teamId }}"} |= "$${__span.traceId}"'
                nodeGraph:
                  enabled: true
                search:
                  hide: true
                traceQuery:
                  timeShiftEnabled: true
                  spanStartTimeShift: '1h'
                  spanEndTimeShift: '-1h'
                tracesToMetrics:
                    datasourceUid: 'prometheus-platform'
                    spanStartTimeShift: '1h'
                    spanEndTimeShift: '-1h'
                    tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
                    queries:
                      - name: 'Span duration (example)'
                        query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'
                httpMethod: GET
                spanBar:
                  type: 'Tag'
                  tag: 'http.path'
                lokiSearch:
                  datasourceUid: 'loki'
    {{- if has "msteams" ($team | get "alerts.receivers" list) }}
  - name: prometheus-msteams-{{ $teamId }}
    installed: {{ $team | get "managedMonitoring.alertmanager" false }}
    namespace: team-{{ $teamId }}
    chart: ../charts/prometheus-msteams
    labels:
      tag: teams
      team: {{ $teamId }}
      pipeline: otomi-task-teams
    values:
      - ../values/prometheus-msteams/prometheus-msteams.gotmpl
      - commonLabels:
          team: {{ $teamId }}
        metrics:
          serviceMonitor:
            additionalLabels:
              release: prometheus-{{ $teamId }}
        connectors:
          - high_priority_channel: {{ $team | get "msteams.highPrio" }}
          - low_priority_channel: {{ $team | get "msteams.lowPrio" }}
    {{- end }}
  - name: grafana-dashboards-{{ $teamId }}
    installed: {{ $team | get "managedMonitoring.grafana" false }}
    namespace: team-{{ $teamId }}
    chart: ../charts/grafana-dashboards
    labels:
      tag: teams
      team: {{ $teamId }}
      pipeline: otomi-task-teams
    values:
      - cluster: {{- $v.cluster | toYaml | nindent 10 }}
        team: {{ $teamId }}
        folders:
          - k8s-teams
          {{- if $v.apps.falco.enabled }}
          - falco-teams
          {{- end }}
          {{- if and (eq $v.cluster.provider "azure") ($team | get "azureMonitor" ($v | get "azure.monitor" nil)) }}
          - azure
          {{- end }}
          {{- if $v.apps.trivy.enabled }}
          - trivy-teams
          {{- end }}
  - name: team-ns-{{ $teamId }}
    installed: true
    namespace: team-{{ $teamId }}
    chart: ../charts/team-ns
    labels:
      tag: teams
      ingress: 'true'
      team: {{ $teamId }}
      pipeline: otomi-task-teams
    values:
      - ../values/team-ns/team-ns.gotmpl
{{- end }}
