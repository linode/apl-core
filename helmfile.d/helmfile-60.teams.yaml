bases:
  - snippets/defaults.yaml
---
bases:
  - snippets/env.gotmpl
---
bases:
  - snippets/derived.gotmpl
---
{{- $v := .Values }}
{{- $a := $v.apps }}
{{- $tc := $v.teamConfig }}
{{- $coreTeamServices := list }}
{{- range $s := $v.teamApps }}
  {{- if and ($a | get $s.name | get "enabled" true) (hasKey $s "ingress") $v.otomi.isMultitenant }}
    {{- range $ing := $s.ingress }}
      {{- $svc := merge $ing (dict "isCore" true "name" $s.name "ownHost" ($s | get "ownHost" false)) }}
      {{- $coreTeamServices = append $coreTeamServices $svc }}
    {{- end }}
  {{- end }}
{{- end }}
{{- $slackTpl := tpl (readFile "../helmfile.d/snippets/alertmanager/slack.gotmpl") $v | toString }}
{{- $opsgenieTpl := tpl (readFile "../helmfile.d/snippets/alertmanager/opsgenie.gotmpl") $v | toString }}
releases:
{{- range $teamId, $team := omit $tc "admin" }} 
  {{- $teamServices := ($team | get "services" list) }}
  {{- $domain := ($v.cluster | get "domainSuffix" nil) }}
  {{- $alertmanagerDomain := printf "alertmanager.%s" $domain }}
  {{- $prometheusDomain := printf "prometheus-%s.%s" $teamId $domain }}
  {{- $grafanaDomain := printf "grafana-%s.%s" $teamId $domain }}
  {{- $azure := $team | get "azure" dict }}
  - name: tekton-dashboard-{{ $teamId }}
    installed: true
    namespace: team-{{ $teamId }}
    chart: ../charts/tekton-dashboard
    labels:
      tag: teams
      team: {{ $teamId }}
      pipeline: otomi-task-teams
    values:
      - ../values/tekton-dashboard/tekton-dashboard-teams.gotmpl
  - name: prometheus-{{ $teamId }}
    installed: {{ or ($team | get "managedMonitoring.grafana" false) ($team | get "managedMonitoring.prometheus" false) ($team | get "managedMonitoring.alertmanager" false) }}
    namespace: team-{{ $teamId }}
    chart: ../charts/kube-prometheus-stack
    labels:
      tag: teams
      team: {{ $teamId }}
      pipeline: otomi-task-teams
    values:
      - ../values/prometheus-operator/prometheus-operator.gotmpl
      - ../values/prometheus-operator/prometheus-operator-team.gotmpl
      - nameOverride: {{ $teamId }}-po
        fullnameOverride: {{ $teamId }}-po
        alertmanager:
          enabled: {{ $team | get "managedMonitoring.alertmanager" false }}
          namespaceOverride: null
          alertmanagerSpec:
            externalUrl: "https://alertmanager-{{ $teamId }}.{{ $domain }}"
            podMetadata:
              annotations:
                sidecar.istio.io/inject: "true"
              labels:
                prometheus: team-{{ $teamId }}
          # to do: load slackTpl and opsgenieTpl only if alerts.receicers = true
          config: {{- tpl (readFile "../helmfile.d/snippets/alertmanager.gotmpl") (dict "instance" $team "root" $v "slackTpl" $slackTpl "opsgenieTpl" $opsgenieTpl) | nindent 12 }}
        defaultRules:
          appNamespacesTarget: team-{{ $teamId }}
          rules:
            general: {{ $team | get "managedMonitoring.prometheus" false }}
        commonLabels:
          prometheus: team-{{ $teamId }}
        prometheus:
          enabled: {{ $team | get "managedMonitoring.prometheus" false }}
          namespaceOverride: null # team-{{ $teamId }}
          prometheusSpec:
            podMetadata:
              annotations:
                traffic.sidecar.istio.io/excludeOutboundPorts: "9093"
              labels:
                otomi.io/app: prometheus-team-{{ $teamId }}
            externalLabels:
              cluster: "prometheus-{{ $teamId }}.{{ $domain }}"
            externalUrl: "https://prometheus-{{ $teamId }}.{{ $domain }}"
            {{- range $selType := list "podMonitor" "probe" "rule" "serviceMonitor" }}
            {{ $selType }}NamespaceSelector:
              matchExpressions:
                - key: name
                  operator: In
                  values:
                    - team-{{ $teamId }}
            {{ $selType }}Selector:
              matchLabels:
                prometheus: team-{{ $teamId }}
            {{- end }}
    {{- if gt (len .services) 0 }}
            additionalScrapeConfigs:
          {{- tpl (readFile "../helmfile.d/snippets/blackbox-targets.gotmpl") (dict "teamId" $teamId "namespace" (printf "team-%s" $teamId) "services" $teamServices "domain" $domain) | nindent 12 }}
    {{- end }}
        {{- if $team | get "managedMonitoring.prometheus" false }}
        additionalPrometheusRules:
          - name: blackbox
            {{- readFile "../values/prometheus-operator/rules/blackbox.yaml" | nindent 12 }}
        {{- end }}    
        grafana:
          enabled: {{ $team | get "managedMonitoring.grafana" false }}
          namespaceOverride: null # team-{{ $teamId }}
          nameOverride: {{ $teamId }}-po-grafana
          fullnameOverride: {{ $teamId }}-po-grafana
          grafana.ini:
            "auth.generic_oauth":
              role_attribute_path: contains(groups[*], 'admin') && 'Admin' || contains(groups[*], 'team-admin') && 'Admin' || contains(groups[*], 'team-{{ $teamId }}') && 'Editor'{{ if not ($team | get "managedMonitoring.private" false) }} || 'Viewer'{{- end }}
            server:
              root_url: https://grafana-{{ $teamId }}.{{ $domain }}
          sidecar:
            datasources:
              defaultDatasourceEnabled: {{ $team | get "managedMonitoring.prometheus" false }}
              uid: Prometheus-team
            dashboards:
              enabled: true
              label: release
              labelValue: grafana-dashboards-{{ $teamId }}
          additionalDataSources:
            - name: Prometheus-platform
              editable: false
              uid: prometheus-platform
              type: prometheus
              access: proxy
              url: http://po-prometheus.monitoring:9090
              jsonData:
                httpMethod: GET
            - name: Loki
              editable: false
              uid: loki
              type: loki
              access: proxy
              url: http://loki-query-frontend-headless.monitoring:3101
              basicAuth: true
              basicAuthUser: {{ $teamId }}
              secureJsonData: 
                basicAuthPassword: {{ $team.password }}
              jsonData:
                derivedFields:
                  - datasourceName: Tempo
                    matcherRegex: "traceID=00-([^\\-]+)-"
                    name: traceID
                    url: "$${__value.raw}"
                    datasourceUid: tempo
            - name: Tempo
              type: tempo
              uid: tempo
              editable: false
              access: proxy
              url: http://tempo-query-frontend.tempo:3100
              jsonData:
                tracesToLogsV2:
                  datasourceUid: 'loki'
                  spanStartTimeShift: '1h'
                  spanEndTimeShift: '-1h'
                  tags: [{ key: 'k8s.namespace.name', value: 'namespace' }]
                  filterByTraceID: false
                  filterBySpanID: false
                  customQuery: true
                  query: '{namespace="team-{{ $teamId }}"} |= "$${__span.traceId}"'
                nodeGraph:
                  enabled: true
                search:
                  hide: true
                traceQuery:
                  timeShiftEnabled: true
                  spanStartTimeShift: '1h'
                  spanEndTimeShift: '-1h'
                tracesToMetrics:
                    datasourceUid: 'prometheus-platform'
                    spanStartTimeShift: '1h'
                    spanEndTimeShift: '-1h'
                    tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
                    queries:
                      - name: 'Span duration (example)'
                        query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'
                httpMethod: GET
                spanBar:
                  type: 'Tag'
                  tag: 'http.path'
                lokiSearch:
                  datasourceUid: 'loki'
    {{- if has "msteams" ($team | get "alerts.receivers" list) }}
  - name: prometheus-msteams-{{ $teamId }}
    installed: {{ $team | get "managedMonitoring.prometheus" false }}
    namespace: team-{{ $teamId }}
    chart: ../charts/prometheus-msteams
    labels:
      tag: teams
      team: {{ $teamId }}
      pipeline: otomi-task-teams
    values:
      - ../values/prometheus-msteams/prometheus-msteams.gotmpl
      - commonLabels:
          team: {{ $teamId }}
        metrics:
          serviceMonitor:
            additionalLabels:
              release: prometheus-{{ $teamId }}
        connectors:
          - high_priority_channel: {{ $team | get "msteams.highPrio" }}
          - low_priority_channel: {{ $team | get "msteams.lowPrio" }}
    {{- end }}
  - name: grafana-dashboards-{{ $teamId }}
    installed: {{ $team | get "managedMonitoring.grafana" false }}
    namespace: team-{{ $teamId }}
    chart: ../charts/grafana-dashboards
    labels:
      tag: teams
      team: {{ $teamId }}
      pipeline: otomi-task-teams
    values:
      - cluster: {{- $v.cluster | toYaml | nindent 10 }}
        team: {{ $teamId }}
        folders:
          - k8s-teams
          {{- if $v.apps.gatekeeper.enabled }}
          - gatekeeper-teams
          {{- end }}
          {{- if $v.apps.falco.enabled }}
          - falco-teams
          {{- end }}
          {{- if and (eq $v.cluster.provider "azure") ($team | get "azureMonitor" ($v | get "azure.monitor" nil)) }}
          - azure
          {{- end }}
          {{- if $v.apps.trivy.enabled }}
          - trivy-teams
          {{- end }}

  - name: team-ns-{{ $teamId }}
    installed: true
    namespace: team-{{ $teamId }}
    chart: ../charts/team-ns
    labels:
      tag: teams
      ingress: 'true'
      team: {{ $teamId }}
      pipeline: otomi-task-teams
    values:
      - cluster: {{- $v.cluster | toYaml | nindent 10 }}
        apps: {{- $a | toYaml | nindent 10 }}
        otomi: {{- $v.otomi | toYaml | nindent 10 }}
        oidc: {{- $v | get "oidc" dict | toYaml | nindent 10 }}
        domain: {{ $domain }}
        ingress: {{- $v.ingress | toYaml | nindent 10 }}
      - {{- omit $team "apps" | toYaml | nindent 8 }}
        teamId: {{ $teamId }}
        teamIds: {{- toYaml (keys $v.teamConfig) | nindent 10 }}
      - services: {{- concat $coreTeamServices $teamServices | toYaml | nindent 10 }}
  {{- if and ($team | get "managedMonitoring.prometheus" false) (gt (len $teamServices) 0) }}
      - name: blackbox
        svc: prometheus-blackbox-exporter
        port: 9115
  {{- end }}
  {{- range $job := $team | get "jobs" list }}
  - name: job-{{ $teamId }}-{{ $job.name }}
    installed: {{ $job.enabled }}
    namespace: team-{{ $teamId }}
    chart: ../charts/jobs
    labels:
      group: jobs
      tag: teams
      team: {{ $teamId }}
      pipeline: otomi-task-teams
    hooks:
      - events: [presync]
        showlogs: true
        command: ../bin/job-presync.sh
        args:
          - job-{{ $teamId }}-{{ $job.name }}
          {{- if hasKey $job "runPolicy" }}
          - "{{ $job.runPolicy }}"    
          {{- end }}
    values:
      - teamSecrets: {{- $team | get "secrets" nil | toYaml | nindent 10 }}
        teamId: {{ $teamId }}
      - {{- $job | toYaml | nindent 8 }}
  {{- end }}
{{- end }}