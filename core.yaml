# NOTE: This file is merged with other values in ./helmfile.d/snippets/env.gotmpl
k8s:
  namespaces:
    - name: argocd
      app: argocd
    - name: cert-manager
      disableIstioInjection: true
    - name: default
      disableIstioInjection: true
      disablePolicyChecks: true
    - name: drone
    - name: drone-pipelines
      disableIstioInjection: true
      disablePolicyChecks: true
    - name: external-dns
      disableIstioInjection: true
    - name: harbor
      app: harbor
    - name: gatekeeper-system
      app: gatekeeper
      disableIstioInjection: true
    - name: gitea
    - name: grafana
      app: grafana
    - name: istio-system
      disableIstioInjection: true
    - name: httpbin
      app: httpbin
    - name: ingress
      # disabling istio sidecar as it does not preserve client ip (yet)
      # TODO: enable once it does
      disableIstioInjection: true
    - name: jaeger
      app: jaeger
    - name: jaeger-operator
      app: jaeger
      disableIstioInjection: true
    - name: keycloak
    - name: kiali
      app: kiali
    - name: kiali-operator
      app: kiali
      disableIstioInjection: true
    - name: knative-serving
      app: knative
      disablePolicyChecks: true
      disableIstioInjection: true
    - name: kubeapps
      app: kubeapps
      disableIstioInjection: true
      disablePolicyChecks: true
    - name: kubeclarity
      app: kubeclarity
    - name: maintenance
      disableIstioInjection: true
    - name: monitoring
      disableIstioInjection: true
    - name: olm
      disableIstioInjection: true
      disablePolicyChecks: true
    - name: operators
      disableIstioInjection: true
      disablePolicyChecks: true
    - name: otomi
    - name: cluster-overprovisioner
      app: cluster-overprovisioner
      disableIstioInjection: true
    - name: redis
      app: prometheus
      disableIstioInjection: true
    - name: team-admin
    - name: tigera-operator
      disableIstioInjection: true
      disablePolicyChecks: true
    - name: vault
      app: vault

adminApps:
  - name: alertmanager
    tags: [alerting, observability]
    deps: [prometheus]
    ingress:
      - svc: po-alertmanager
        namespace: monitoring
        # namespace: alertmanager
        port: 9093
        type: public
        auth: true
    info:
      appVersion: 0.24.0
      repo: https://github.com/prometheus/alertmanager
      maintainers: Prometheus Community
      relatedLinks:
        - https://otomi.io/docs/apps/alertmanager
        - https://prometheus.io/docs/alerting/latest/alertmanager]
      license: Apache 2.0
      about: Alertmanager handles alerts sent by client applications such as the Prometheus server. It takes care of de-duplicating, grouping, and routing them to the correct receiver integration such as email, PagerDuty, or OpsGenie. Alertmanager also takes care of silencing and inhibition of alerts.
      integration: Alertmanager can be activated to send alerts to configured receivers. It is configured by Otomi to use the global values found under settings/alerts. A team can override global settings to send alerts to their own endpoints.
  - name: argocd
    tags: [cicd, gitops]
    isShared: true
    ownHost: true
    ingress:
      - svc: argocd-server
        namespace: argocd
        type: public
        auth: true
        # removeRequestHeaders:
        #   - authorization
    info:
      appVersion: 1.4.25
      repo: https://github.com/argoproj/argo-helm
      maintainers: Argo Project
      relatedLinks:
        - https://otomi.io/docs/apps/argocd
        - https://argo-cd.readthedocs.io
      license: Apache 2.0
      about: Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. 
      integration: Argo CD is configured by Otomi to use the SSO provided by keycloak, and maps otomi groups to Argo CD roles. The otomi-admin role is made super admin within Argo CD. The team-admin role has access to Argo CD and is admin of all team projects. Members of team roles are only allowed to administer their own projects. All Teams will automatically get access to a Git repo, and Argo CD is configured to listen to this repo. All a team has to do is to fill their repo with intended state, commit, and automation takes care of the rest.
  - name: cert-manager
    tags: [ingress, security, tls]
    info:
      appVersion: 1.8.0
      repo: https://github.com/cert-manager/cert-manager
      maintainers: The Linux Foundation
      relatedLinks:
        - https://otomi.io/docs/apps/certmanager
        - https://cert-manager.io/
      license: Apache 2.0
      about: Cert-manager adds certificates and certificate issuers as resource types in Kubernetes clusters, and simplifies the process of obtaining, renewing and using those certificates. It can issue certificates from a variety of supported sources, including Let's Encrypt, HashiCorp Vault, and Venafi as well as private PKI, and it ensures certificates remain valid and up to date, attempting to renew certificates at an appropriate time before expiry.
      integration: Cert-manager is used by Otomi to automatically create and rotate TLS certificates for service endpoints. You may bring your own CA, or let Otomi create one for you (default). It is recommended to use Let's Encrypt for production certificates. Setting cert-manager to use Let's Encrypt requires DNS availability of the requesting domains, and forces Otomi to install external-dns. Because a lot of DNS settings are used by other Otomi contexts, most DNS configuration is found under settings/dns.
  - name: drone
    tags: [cicd, deployment, pipeline]
    isShared: true
    ownHost: true
    ingress:
      - svc: drone
        namespace: drone
        type: public
        auth: true
        removeRequestHeaders:
          - authorization
      - svc: drone
        namespace: drone
        type: public
        paths: [/hook, /api/user, /api/repo]
        forwardPath: true
        removeRequestHeaders:
          - authorization
    info:
      appVersion: 2.7.3
      repo: https://github.com/harness/drone
      maintainers: Harness
      relatedLinks:
        - https://otomi.io/docs/apps/drone
        - https://www.drone.io/
      license: Apache 2.0
      about: Drone is a continuous delivery system built on container technology. Drone uses a simple YAML build file, to define and execute build pipelines inside Docker containers.
      integration: Otomi uses Drone to deploy changes to the configuration (values) repository. Drone is installed and configured by default. When no external source control is configured (default), Otomi will use Gitea as Drone's git hosting dependency. Teams can use Drone for other purposes if desired, with the limitation that it can't be configured for multiple git services.
  - name: external-dns
    tags: [ingress, security, tls]
    info:
      appVersion: 0.10.2
      repo: https://github.com/kubernetes-sigs/external-dns
      maintainers: Kubernetes SIGs
      relatedLinks:
        - https://otomi.io/docs/apps/external-dns
        - https://kubernetes-sigs.github.io/external-dns/v0.12.2/
      license: Apache 2.0
      about: ExternalDNS synchronizes exposed Kubernetes Services and Ingresses with DNS providers. 
      integration: ExternalDNS is used by Otomi to make public service domains accessible by registering them with Otomi's load balancer CNAME or IP address. When ExternalDNS is not enabled (default), then Otomi will rely on nip.io to create host names for all services.
  - name: gatekeeper
    tags: [security, policies, observability]
    info:
      appVersion: 3.8.1
      repo: https://github.com/open-policy-agent/gatekeeper
      maintainers: Open Policy Agent
      relatedLinks:
        - https://otomi.io/docs/apps/gatekeeper
        - https://open-policy-agent.github.io/gatekeeper/website/docs/
      license: Apache 2.0
      about: Kubernetes allows decoupling policy decisions from the inner workings of the API Server by means of admission controller webhooks, which are executed whenever a resource is created, updated or deleted. Gatekeeper is a validating (mutating TBA) webhook that enforces CRD-based policies executed by Open Policy Agent.
      integration: OPA/Gatekeeper can be enabled for policy enforcement. The Otomi configuration repository holds a policies.yaml file with sane default policy presets. A selection of usable policies for Otomi are used by Conftest as well for static analysis of manifests generated by Otomi. YAML Resources are verified against defined .rego policy rules, using the defined preset parameters as their constraint value. When enabled, policies can be turned on/off in the Otomi web UI.
  - name: gitea
    tags: [git]
    isShared: true
    ownHost: true
    ingress:
      - namespace: gitea
        svc: gitea-http
        port: 3000
        type: public
    info:
      appVersion: 1.15.8
      repo: https://github.com/go-gitea/gitea
      maintainers: Gitea
      relatedLinks:
        - https://otomi.io/docs/apps/gitea
        - https://docs.gitea.io/en-us/
      license:  MIT
      about: Gitea is a painless self-hosted Git service. It is similar to GitHub, Bitbucket, and GitLab. Gitea is a fork of Gogs. See the Gitea Announcement blog post to read about the justification for a fork.
      integration: Otomi uses Gitea as its default repository for otomi configuration (values). Gitea can also be used by Teams to provide application code repositories. Access to Gitea is provided by the OIDC integration in Otomi. Members of the otomi-admin and team-admin group can seamlessly sign in to Gitea. When Argo CD is enabled, Otomi will automatically create a Gitops repository for each Team in Gitea.
  - name: grafana
    tags: [tracing, telemetry, observability]
    deps: [prometheus]
    ownHost: true
    ingress:
      - svc: po-grafana
        namespace: grafana
        removeRequestHeaders:
          - authorization
        type: public
        auth: true
    shortcuts:
      - title: NGINX
        description: NGINX ingress controller metrics
        path: /d/nginx/nginx-ingress-controller?orgId=1&refresh=5s
    info:
      appVersion: 9.0.1
      repo: https://github.com/grafana/grafana
      maintainers: Grafana Labs
      relatedLinks:
        - https://otomi.io/docs/apps/grafana
        - https://grafana.com/docs/grafana/latest/
      license: AGPL-3.0
      about: Grafana allows you to query, visualize, alert on and understand your metrics no matter where they are stored. Create, explore, and share dashboards with your team and foster a data-driven culture.
      integration: Otomi uses Grafana to visualize Prometheus metrics and Loki logs. Team members are automatically given the Editor role, while admins are also given the Admin role. It is possible to make configuration changes directly in Grafana, but only to non-conflicting settings. Data sources are preconfigured and must not be edited as changes will be gone when Grafana is redeployed.
  - name: harbor
    tags: [security]
    isShared: true
    ownHost: true
    ingress:
      - svc: harbor-portal
        namespace: harbor
        type: public
        auth: true
      - svc: harbor-core
        namespace: harbor
        paths: [/api/, /c/]
        forwardPath: true
        type: public
        auth: true
      - svc: harbor-core
        namespace: harbor
        paths: [/chartrepo/, /service/, /v1/, /v2/]
        forwardPath: true
        type: public
    info:
      appVersion: 2.3.0
      repo: https://github.com/goharbor/harbor
      maintainers: Project Harbor
      relatedLinks:
        - https://otomi.io/docs/apps/harbor
        - https://goharbor.io/docs/2.5.0/
      license: Apache 2.0
      about: Harbor is an open source trusted cloud native registry project that stores, signs, and scans content. Harbor extends the open source Docker Distribution by adding the functionalities usually required by users such as security, identity and management. Having a registry closer to the build and run environment can improve the image transfer efficiency. Harbor supports replication of images between registries, and also offers advanced security features such as user management, access control and activity auditing.
      integration: Harbor can be enabled to provide each team with a private registry. Harbor has been made user and tenant aware. Otomi runs automated tasks that take care of creating a project in Harbor for each team, creating a bot-account for each team, and creating a Kubernetes pull secret in the team namespace to enable pulling of images out of the local registry.
  - name: hello
    hide: true
    tags: [demo]
  - name: httpbin
    tags: [dev, testing, debugging]
    isShared: true
    ownHost: true
    ingress:
      - namespace: httpbin
        svc: httpbin
        type: public
        auth: true
    info:
      appVersion: 0.1.0
      repo: https://github.com/postmanlabs/httpbin
      maintainers: Postman Inc. 
      relatedLinks:
        - https://httpbin.org/
      license: ISC
      about: HTTP Request & Response Service
      integration: Httpbin is by default available for developers to use.
  - name: ingress-nginx
    tags: [ingress, auth]
    info:
      appVersion: 1.1.2
      repo: https://github.com/kubernetes/ingress-nginx 
      maintainers: NGINX
      relatedLinks: [https://otomi.io/docs/apps/ingress-nginx, https://docs.nginx.com/nginx-ingress-controller/]
      license: Apache 2.0
      about: ingress-nginx is an Ingress controller for Kubernetes using NGINX as a reverse proxy and load balancer.
      integration: Otomi integrated ingress-nginx into an advanced ingress architecture.
  - name: istio
    tags: [ingress, egress, routing, security, tls, observability, policies]
    info:
      appVersion: 1.10.1
      repo: https://github.com/istio/istio
      maintainers: Istio
      relatedLinks:
        - https://istio.io/
      license: Apache 2.0
      about: Istio is an open platform for providing a uniform way to integrate microservices, manage traffic flow across microservices, enforce policies and aggregate telemetry data. Istio's control plane provides an abstraction layer over the underlying cluster management platform.
      integration: Otomi has security best practices built in, and is designed for intrusion. Istio is used by Otomi as a service mesh to deliver mTLS enforcement for all traffic that is deemed compromisable, egress control to force teams to choose explicit egress endpoints, and advanced routing capabilities such as weight based load balancing (A/B or blue/green testing). Istio is part of the core of Otomi and can not be disabled.
  - name: jaeger
    tags: [ingress, telemetry, observability]
    deps: [istio]
    ingress:
      - svc: jaeger-operator-jaeger-query
        port: 16686
        forwardPath: true
        namespace: jaeger
        type: public
        auth: true
    info:
      appVersion: 1.25.0
      repo: https://github.com/jaegertracing/jaeger
      maintainers: CNCF
      relatedLinks:
        - https://www.jaegertracing.io/docs/1.37/
      license: Apache 2.0
      about: Jaeger is a distributed tracing platform. It can be used for monitoring microservices-based distributed systems. As on-the-ground microservice practitioners are quickly realizing, the majority of operational problems that arise when moving to a distributed architecture are ultimately grounded in networking and observability. It is simply an orders of magnitude larger problem to network and debug a set of intertwined distributed services versus a single monolithic application.
      integration: Jaeger can be activated to gain tracing insights on its network traffic. It runs in anonymous mode and each authenticated user is given the same authorization, allowing them to see everything.
  - name: keycloak
    tags: [auth, sso]
    isShared: true
    ownHost: true
    ingress:
      - namespace: keycloak
        svc: keycloak-http
        type: public
    shortcuts:
      - title: Account
        description: Edit your account settings.
        path: /realms/otomi/account/
    info:
      appVersion: 15.0.2
      repo: https://github.com/keycloak/keycloak 
      maintainers: Keycloak
      relatedLinks:
        - https://otomi.io/docs/apps/keycloak
        - https://www.keycloak.org/documentation.html
      license: Apache 2.0
      about: Keycloak is an Open Source Identity and Access Management solution for modern Applications and Services.
      integration: The SSO login page for Otomi is served by Keycloak. Keycloak is used as an identity broker or provider for all Otomi integrated applications. By default Keycloak is configured as an Identity Broker. Keycloak is part of the core of Otomi and is always enabled.
  - name: kiali
    tags: [tracing, telemetry, observability]
    deps: [istio]
    path: /api/auth/openid_redirect
    ingress:
      - svc: kiali
        forwardPath: true
        removeRequestHeaders:
          - authorization
        port: 20001
        namespace: kiali
        type: public
        auth: true
    info:
      appVersion: 1.47.0
      repo: https://github.com/kiali/kiali
      maintainers: Kiali
      relatedLinks:
        - https://kiali.io/
      license: Apache 2.0
      about: Kiali is a management console for Istio to manage, visualize, validate and troubleshoot the service mesh.
      integration: Kiali can be activated to gain observability insights on its network traffic. Kiali runs in anonymous mode and each authenticated user is given the same authorization, allowing them to see everything.
  - name: knative
    tags: [serverless, functions]
    deps: [istio]
    info:
      appVersion: dependent on k8s version
      repo: https://github.com/knative/serving
      maintainers: Knative
      relatedLinks:
        - https://otomi.io/docs/apps/knative
        - https://knative.dev/docs/serving/
      license: Apache 2.0
      about: Knative Serving builds on Kubernetes to support deploying and serving of applications and functions as serverless containers. Serving is easy to get started with and scales to support advanced scenarios.
      integration: Knative serving can be activated to deliver Container-as-a-Service (CaaS) functionality with a scale-to-zero option. It can be compared to Functions-as-a-service (FaaS) but is container oriented, and takes only one manifest to configure an auto scaling service based on a container image of choice. Otomi offers an on-the-fly Knative service deployment, making it very easy to deploy containerized services without the hassle of providing all the supporting resources involved with Helm charts. Istio Virtual Services are used to route traffic coming in for a public domain to its backing Knative Service, allowing it to set a custom domain.
  - name: kubeapps
    tags: [dev, apps]
    deps: [operator-lifecycle-manager]
    isShared: true
    ownHost: true
    ingress:
      - svc: kubeapps
        namespace: kubeapps
        type: public
        # auth: true
    info:
      appVersion: 2.4.3
      repo: https://github.com/vmware-tanzu/kubeapps
      maintainers: VMware Tanzu
      relatedLinks:
        - https://otomi.io/docs/apps/kubeapps
        - https://kubeapps.dev/docs/latest/
      license: Apache 2.0
      about: Kubeapps is an in-cluster web-based application that enables users with a one-time installation to deploy, manage, and upgrade applications on a Kubernetes cluster.
      integration: Kubeapps can be activated to deploy applications from multiple registries. Teams can login to Kubeapps using the generated token that is provided when downloading the KUBECFG.
  - name: kubeclarity
    tags: [security]
    ownHost: true
    isShared: true
    ingress:
      - svc: kubeclarity
        namespace: kubeclarity
        port: 8080
        type: public
        auth: true
    info:
      appVersion: 2.3.0
      repo: https://github.com/openclarity/kubeclarity
      maintainers: OpenClarity
      relatedLinks:
        - https://otomi.io/docs/apps/kubeclarity
      license: Apache 2.0
      about: KubeClarity is a tool for detection and management of Software Bill Of Materials (SBOM) and vulnerabilities of container images and filesystems. It scans both runtime K8s clusters and CI/CD pipelines for enhanced software supply chain security.
      integration: KubeClarity can be activated to scan running containers and filesystems for vulnerabilities.
  - name: loki
    tags: [logging, telemetry, observability]
    deps: [grafana, prometheus]
    useHost: grafana
    path: /explore?orgId=1&left=%5B"now-1h","now","Loki",%7B%7D,%7B"mode":"Logs"%7D,%7B"ui":%5Btrue,true,true,"none"%5D%7D%5D
    shortcuts:
      - title: Ingress logs
        description: All logs generated in the "ingress" namespace
        path: /explore?orgId=1&left=%5B"now-1h","now","Loki",%7B"expr":"%7Bnamespace%3D%5C"ingress%5C"%7D","refId":"A"%7D%5D
      - title: OWASP violations
        description: All OWASP rule violations
        path: /explore?orgId=1&left=%5B"now-1h","now","Loki",%7B"expr":"%7Bnamespace%3D%5C"ingress%5C"%7D%20%7C%3D%5C"ModSecurity:%20%5C""%7D%5D
      - title: Gatekeeper violations
        description: Kube API violations logged by OPA gatekepeer
        path: /explore?orgId=1&left=%5B"now-1h","now","Loki",%7B"expr":"%7Bnamespace%3D%5C"gatekeeper-system%5C"%7D%20%7C%3D%5C"Policy:%20%5C""%7D%5D
  # - name: notary
  #   isShared: true
  #   ownHost: true
  #   hide: true
  #   ingress:
  #     - svc: harbor-notary-server
  #       port: 4443
  #       namespace: harbor
  #       type: public
  #       auth: true
    info:
      appVersion: 2.4.1
      repo: https://github.com/grafana/loki
      maintainers: Grafana Labs
      relatedLinks:
        - https://otomi.io/docs/apps/loki
        - https://grafana.com/docs/loki/latest/
      license: AGPL-3.0
      about: Loki is a horizontally-scalable, highly-available, multi-tenant log aggregation system inspired by Prometheus. It is designed to be very cost effective and easy to operate. It does not index the contents of the logs, but rather a set of labels for each log stream.
      integration: Loki can be activated to aggregate all the container logs on the platform and store them in a storage endpoint of choice (defaults to PVC). When Otomi is configured in multi-tenancy mode, logs will be split-up between team namespaces and made available for team members only. Otomi shortcuts can be used to provide selections of logs based on interest.
  - name: otomi
    hide: true
    isShared: true
    ownHost: true
    ingress:
      - svc: otomi-api
        namespace: otomi
        paths: [/api/]
        type: public
        auth: true
      - svc: otomi-console
        namespace: otomi
        type: public
        auth: true
  - name: prometheus
    tags: [metrics, observability]
    ingress:
      - svc: po-prometheus
        port: 9090
        namespace: monitoring
        # namespace: prometheus
        type: public
        auth: true
    info:
      appVersion: 0.57.0
      repo: https://github.com/prometheus/prometheus
      maintainers: Prometheus
      relatedLinks:
        - https://otomi.io/docs/apps/prometheus
        - https://prometheus.io/
      license: Apache 2.0
      about: Prometheus is a systems and service monitoring system. It collects metrics from configured targets at given intervals, evaluates rule expressions, displays the results, and can trigger alerts when specified conditions are observed.
      integration: Prometheus can be activated to aggregate all platform metrics and store them in a storage endpoint of choice (defaults to PVC). When Otomi is configured in multi-tenancy mode, each team will be provided with a dedicated Prometheus instance. This instance can be used to aggregate custom team metrics.
  - name: vault
    tags: [secrets, security, observability]
    deps: [external-secrets]
    isShared: true
    ownHost: true
    path: /ui/vault/auth?redirect_to=%2Fvault%2Fsecrets%2Fsecret%2Flist%2Fteams%2F#NS#%2F&with=oidc
    ingress:
      - namespace: vault
        svc: vault
        port: 8200
        type: public
        auth: true
    info:
      appVersion: 1.14.3
      repo: https://github.com/hashicorp/vault
      maintainers: HashiCorp
      relatedLinks:
        - https://otomi.io/docs/apps/vault
        - https://www.vaultproject.io/
        - https://www.vaultproject.io/docs/configuration/storage
      license: MPL-2.0
      about: Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.
      integration: Vault has been made team aware. When enabled, a space will automatically be created for each team, and only team members are allowed access. Vault is automatically configured to use Otomi's Keycloak OIDC settings for SSO. Vault runs natively on Kubernetes. To prevent data from Vault being lost during a rolling cluster upgrade, data persistence can be configured in combination with external (blob) storage.

teamApps:
  - name: alertmanager
    ingress:
      - svc: po-alertmanager
        hasPrefix: true
        port: 9093
        type: public
        auth: true
  - name: grafana
    ownHost: true
    ingress:
      - svc: po-grafana
        hasPrefix: true
        forwardPath: true
        removeRequestHeaders:
          - authorization
        type: public
        auth: true
  - name: loki
    useHost: grafana
    path: /explore?orgId=1&left=%5B%22now-1h%22,%22now%22,%22Loki%22,%7B%22expr%22:%22%7Bnamespace%3D%5C%22#NS#%5C%22%7D%22%7D,%7B%22mode%22:%22Logs%22%7D,%7B%22ui%22:%5Btrue,true,true,%22none%22%5D%7D%5D
  - name: prometheus
    ingress:
      - svc: po-prometheus
        hasPrefix: true
        port: 9090
        type: public
        auth: true
