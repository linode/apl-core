kind: AplApp
metadata:
    name: falco
    labels: {}
spec:
    driver: ebpf
    enabled: true
    _rawValues:
        customRules:
            otomi-rules.yaml: |-
                - macro: protected_shell_spawner
                  condition: (
                      container.image.repository in (
                        ghcr.io/cloudnative-pg
                      )
                    )
                - macro: k8s_containers
                  condition: (
                      container.image.repository in (
                        docker.io/velero/velero,
                        docker.io/weaveworks/kured,
                        ghcr.io/aquasecurity/trivy-operator,
                        quay.io/argoproj/argocd,
                        docker.io/bitnami/keycloak,
                        k8s.gcr.io/kube-state-metrics/kube-state-metrics,
                        quay.io/jetstack/cert-manager-cainjector,
                        quay.io/jetstack/cert-manager-controller,
                        quay.io/jetstack/cert-manager-webhook,
                        quay.io/prometheus-operator/prometheus-operator,
                        quay.io/prometheus/prometheus,
                        quay.io/kiwigrid/k8s-sidecar,
                        docker.io/linode/apl-core,
                        docker.io/linode/apl-tasks,
                        docker.io/linode/apl-api,
                        docker.io/drone/drone-runner-kube,
                        docker.io/grafana/promtail,
                        gcr.io/tekton-releases/github.com/tektoncd/dashboard/cmd/dashboard,
                        quay.io/argoprojlabs/argocd-image-updater,
                        gcr.io/tekton-releases/github.com/tektoncd/triggers/cmd/eventlistenersink,
                        docker.io/bitnami/sealed-secrets-controller,
                        ghcr.io/cloudnative-pg/postgresql,
                        jaegertracing/jaeger-operator
                      ) or (k8s.ns.name = "kube-system")
                        or (k8s.ns.name = "ingress")
                        or (k8s.ns.name = "kyverno")
                        or (k8s.ns.name = "cnpg-system")
                        or (k8s.ns.name = "tekton-pipelines")
                        or (k8s.ns.name = "falco")
                    )
                - macro: user_known_write_below_etc_activities
                  condition: (
                      (container.image.repository = docker.io/goharbor/harbor-core and proc.name = cp) or
                      (container.image.repository = docker.io/goharbor/harbor-registryctl and proc.name = cp) or
                      (container.image.repository = docker.io/goharbor/registry-photon and proc.name = cp) or
                      (container.image.repository = docker.io/goharbor/trivy-adapter-photon and proc.name = cp)
                    )
                - macro: user_sensitive_mount_containers
                  condition: (
                      container.image.repository in (
                        quay.io/prometheus/node-exporter
                      )
                    )
                - macro: user_trusted_containers
                  condition: (
                      container.image.repository in (
                        docker.io/drone/drone-runner-kube,
                        docker.io/linode/apl-api,
                        docker.io/linode/apl-tasks
                      )
                    )
                - macro: user_known_package_manager_in_container
                  condition: (
                      container.image.repository in (
                        docker.io/linode/apl-tasks
                      )
                    )
                - macro: user_known_k8s_client_container
                  condition: (
                      container.image.repository in (
                        docker.io/linode/apl-tasks,
                        docker.io/linode/apl-core
                      ) or (k8s.ns.name = "drone-pipelines")
                    )
                - macro: user_known_non_sudo_setuid_conditions
                  condition: (
                      container.image.repository in (
                        docker.io/linode/apl-tasks,
                        docker.io/linode/apl-api,
                        docker.io/linode/apl-console,
                        docker.io/gitea/gitea,
                        docker.io/grafana/grafana
                      ) or (k8s.ns.name = "ingress")
                        or (k8s.ns.name = "keycloak")
                    )
                - macro: excessively_capable_container
                  condition: (
                      container.image.repository in (
                        docker.io/linode/apl-console,
                        docker.io/linode/apl-api
                      ) or (k8s.ns.name = "keycloak")
                    )
                - macro: user_known_write_below_root_activities
                  condition: (
                      k8s.ns.name = "drone-pipelines"
                    )
                - macro: user_known_network_tool_activities
                  condition: (
                      container.image.repository in (
                        docker.io/gitea/gitea
                      ) or (k8s.ns.name = "keycloak")
                    )
                - macro: user_known_create_files_below_dev_activities
                  condition: (
                      container.image.repository in (
                        quay.io/operatorhubio/catalog
                      )
                    )
    resources:
        falco:
            limits:
                cpu: '1'
                memory: 1Gi
            requests:
                cpu: 100m
                memory: 512Mi
        falcoCtlFollow:
            limits:
                cpu: 500m
                memory: 256Mi
            requests:
                cpu: 50m
                memory: 128Mi
        falcoCtlInstall:
            limits:
                cpu: 200m
                memory: 256Mi
            requests:
                cpu: 50m
                memory: 128Mi
        falcoDriverLoader:
            limits:
                cpu: 200m
                memory: 256Mi
            requests:
                cpu: 50m
                memory: 128Mi
        falcoExporter:
            limits:
                cpu: 500m
                memory: 512Mi
            requests:
                cpu: 50m
                memory: 128Mi
