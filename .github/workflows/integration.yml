name: Deploy Otomi
on:
  workflow_call:
    inputs:
      kubernetes_versions:
        description: "Kubernetes versions (JSON formatted list e.g.: ['1.24'])"
        type: string
      install_profile:
        description: Otomi installation profile
        default: full
        type: string
      server_providers:
        description: Server where Otomi will be installed
        type: string
        default: scaleway
      cluster_region:
        description: Scaleway cluster region
        default: ams1
        type: string
      cluster_persistence:
        type: string
        description: Should a cluster be destroyed on pipeline finish
        default: destroy
      dns:
        type: string
        description: Select DNS provider
        default: nip_io
      kms:
        type: string
        description: Should Otomi encrypt secrets in values repo (DNS or KMS is used)
        default: az_kms
      generate_password:
        type: string
        description: Should a unique password be generated?
        default: 'no'
      oidc:
        type: string
        description: Should Otomi use external OIDC?
        default: keycloak
      certificate:
        type: string
        description: Select certificate issuer
        default: gen_custom_ca
  workflow_dispatch:
    inputs:
      kubernetes_versions:
        description: 'Kubernetes version'
        type: choice
        options:
          - "['1.24.14']"
        default: "['1.24.14']"
      install_profile:
        description: Otomi installation profile
        default: minimal
        type: choice
        options:
          - minimal
          - minimal-with-team
          - full
      server_providers:
        description: Server where Otomi will be installed
        type: choice
        options:
          - scaleway
          - digital ocean
      cluster_region:
        description: Scaleway cluster region
        default: ams1
        type: string
      cluster_persistence:
        type: choice
        description: Should a cluster be destroyed on pipeline finish?
        options:
          - preserve
          - destroy
        default: preserve
      dns:
        type: choice
        description: Select DNS provider
        options:
          - nip_io
          - az_dns
        default: nip_io
      kms:
        type: choice
        description: Should Otomi encrypt secrets in values repo (DNS or KMS is turned on)?
        options:
          - no_kms
          - az_kms
        default: az_kms
      generate_password:
        type: choice
        description: Should a unique password be generated?
        options:
          - 'yes'
          - 'no'
        default: 'no'
      oidc:
        type: choice
        description: Should Otomi use external OIDC?
        options:
          - keycloak
          - az_oidc
        default: keycloak
      certificate:
        type: choice
        description: Select certificate issuer
        options:
          - gen_custom_ca
          - letsencrypt_staging
        default: gen_custom_ca
env:
  CACHE_REGISTRY: ghcr.io
  CACHE_REPO: redkubes/otomi-core
  REPO: otomi/core
  GIT_USER: redkubesbot
  SCALEWAY_NODE_SIZE: s-8vcpu-16gb
  SCALEWAY_NODE_POOL_MIN_SIZE: 3
  CHECK_CONTEXT: continuous-integration/integration-test
  COMMIT_ID: '${{ github.event.pull_request.head.sha || github.sha }}'

jobs:
  preprocess-input:
    name: Preprocess input variables
    runs-on: ubuntu-latest
    steps:
      - name: Print user input
        run: |
          echo 'ref: ${{ github.event.pull_request.head.ref || github.ref }}'
          echo 'install_profile: ${{ inputs.install_profile }}'
          echo 'kubernetes_versions: ${{ inputs.kubernetes_versions }}'
          echo 'cluster_region: ${{ inputs.cluster_region }}'
          echo 'cluster_persistence: ${{ inputs.cluster_persistence }}'
          echo 'dns: ${{ inputs.dns }}'
          echo 'kms: ${{ inputs.kms }}'
          echo 'generate_password: ${{ inputs.generate_password }}'
          echo 'oidc: ${{ inputs.oidc }}'
          echo 'certificate: ${{ inputs.certificate }}'
  preprocess-scaleway-input:
    needs: preprocess-input
    if: ${{ inputs.server_providers == 'scaleway' }}
    name: Preprocess input variables for scaleway
    runs-on: ubuntu-latest
    outputs:
      kubernetes_versions: ${{ steps.k8s-versions.outputs.versions }}
    steps:
      - name: Install scw-cli
        uses: scaleway/action-scw@v0
        with:
          token: ${{ secrets.SCW_ACCESS_KEY }}
      - id: k8s-versions
        name: Process k8s version input
        run: |
          if [ -z '${{ inputs.kubernetes_versions }}' ]; then
            echo "Kubernetes versions not specified, determine DO supported versions"
            versions=`scw k8s versions -o json | jq -ce '.[] | .name'`
          else
            versions='${{ inputs.kubernetes_versions }}'
          fi
          echo $versions
          echo "versions=$versions" >> $GITHUB_OUTPUT
  preprocess-digitalocean-input:
    needs: preprocess-input
    if: ${{ inputs.server_providers == 'digital ocean' }}
    name: Preprocess input variables for digital ocean
    runs-on: ubuntu-latest
    outputs:
      kubernetes_versions: ${{ steps.k8s-versions.outputs.versions }}
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - id: k8s-versions
        name: Process k8s version input
        run: |
          if [ -z '${{ inputs.kubernetes_versions }}' ]; then
            echo "Kubernetes versions not specified, determine DO supported versions"
            versions=`doctl kubernetes options versions -o json | jq -ce 'map(.kubernetes_version)'`
          else
            versions='${{ inputs.kubernetes_versions }}'
          fi
          echo $versions
          echo "versions=$versions" >> $GITHUB_OUTPUT

  run-integration-test-scaleway:
    if: ${{ inputs.server_providers == 'scaleway' }}
    name: Run integration test on scaleway cluster
    needs: preprocess-scaleway-input
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     kubernetes_version: ${{ fromJSON(needs.preprocess-input.outputs.kubernetes_versions) }}
    #   max-parallel: 5
    steps:
      - name: Use Scaleway CLI
        uses: scaleway/action-scw@v0
        with:
          save-config: true
          export-config: true
          version: v2.13.0
          access-key: ${{ secrets.SCW_ACCESS_KEY }}
          secret-key: ${{ secrets.SCW_SECRET_KEY }}
          default-project-id: ${{ secrets.SCW_DEFAULT_PROJECT_ID }}
          default-organization-id: ${{ secrets.SCW_DEFAULT_ORGANIZATION_ID }}
      - name: Set k8s cluster name
        run: |
          echo SCALEWAY_CLUSTER_NAME=i-${{ github.run_id }}-${{ strategy.job-index }} >> $GITHUB_ENV
          # Cluster name must be no longer than 63 characters
      - name: Create k8s cluster at Scaleway ${{env.SCALEWAY_CLUSTER_NAME}}
        run: |
          out=$(scw k8s cluster create name=${{env.SCALEWAY_CLUSTER_NAME}} \
              auto-upgrade.enable=false \
              cni=calico \
              pools.0.node-type=PRO2-S \
              pools.0.min-size=1 \
              pools.0.size=2 \
              pools.0.max-size=10 \
              pools.0.autohealing=true \
              pools.0.autoscaling=true \
              pools.0.name=default \
              version='1.24.14' \
              region=nl-ams \
              --wait \
              -o=json)

          clusterId=$(scw k8s cluster list -o json | jq -r '.[] | select(.name == ${{ env.SCALEWAY_CLUSTER_NAME }}) | .id')
          echo CLUSTER_ID=$clusterId >> $GITHUB_OUTPUT

      - name: Delete  k8s cluster at Scaleway
        if: ${{ always() && inputs.cluster_persistence != 'preserve' }}
        run: |
          scw k8s cluster delete ${{ env.CLUSTER_ID }} with-additional-resources=true
      # - name: Slack Notification
      #   if: always()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_CHANNEL: github-ci
      #     SLACK_COLOR: ${{ job.status }}
      #     SLACK_ICON: https://github.com/redkubes.png?size=48
      #     SLACK_TITLE: Scheduled integration tests
      #     SLACK_USERNAME: RedKubesBot
