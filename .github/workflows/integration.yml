name: Deploy APL
on:
  workflow_call:
    inputs:
      linode_types:
        description: 'Linode instance types'
        type: string
        default: g6-dedicated-8
      kubernetes_versions:
        description: 'Kubernetes version'
        type: string
        default: "['1.31']"
      install_profile:
        description: 'APL installation profile'
        type: string
        default: minimal-with-team
      domain_zone:
        description: 'Select Domain Zone'
        type: string
        default: DNS-Integration
      kms:
        description: 'Should APL encrypt secrets in values repo (DNS or KMS is turned on)?'
        type: string
        default: age
      certificate:
        description: 'Select certificate issuer'
        type: string
        default: letsencrypt_production
      is_pre_installed:
        description: Fake if Otomi is pre-installed by Installer
        type: string
        default: 'false'
  workflow_dispatch:
    inputs:
      deploy_to_dev:
        description: 'Deploy to dev'
        type: boolean
        default: false

env:
  CACHE_REGISTRY: ghcr.io
  CACHE_REPO: linode/apl-core
  REPO: linode/apl-core
  GIT_USER: svcAPLBot
  CHECK_CONTEXT: continuous-integration/integration-test
  COMMIT_ID: '${{ github.event.pull_request.head.sha || github.sha }}'
  BOT_EMAIL: ${{ vars.BOT_EMAIL }}
  BOT_USERNAME: ${{ vars.BOT_USERNAME }}
  DEV_DOMAINS: ${{ secrets.DEV_DOMAINS }}
  DEV_KUBECONFIG_64: ${{ secrets.DEV_KUBECONFIG }}
  DEV_GITEA_CREDS_64: ${{ secrets.DEV_GITEA_CREDS }}

jobs:
  deploy-to-dev:
    runs-on: ubuntu-22.04
    steps:
      - name: Deploy to dev

        if: ${{ inputs.deploy_to_dev }}
        run: |
          echo "Decode and set the Kubernetes configuration for the dev environment"
          echo ${{ env.DEV_KUBECONFIG_64 }} | base64 -d > .kubeconfig
          export KUBECONFIG=$(pwd)/.kubeconfig

          echo "Restart deployments for apl-api and apl-console"
          kubectl -n otomi rollout restart deployment/otomi-api
          kubectl -n otomi rollout restart deployment/otomi-console

          echo "Decode Gitea credentials and extract username, password, and git URL"
          export USERNAME=$(echo "${{ env.DEV_GITEA_CREDS_64 }}" | base64 -d | jq -r '.username')
          export PASSWORD=$(echo "${{ env.DEV_GITEA_CREDS_64 }}" | base64 -d | jq -r '.password')
          export URL=$(echo "${{ env.DEV_GITEA_CREDS_64 }}" | base64 -d | jq -r '.git_url')
          # Remove the protocol (https://) from the URL
          URL=${URL#https://}

          echo "Configure Git user details for committing changes"
          git config --global user.name "${{ env.GIT_USER }}"
          git config --global user.email "${{ env.BOT_EMAIL }}"

          echo "Clone the values repository using the decoded credentials"
          git clone --depth 2 https://$USERNAME:$PASSWORD@$URL 2>/dev/null
          cd values

          echo "Create an empty commit to trigger the pipeline and push it to the main branch"
          git commit --allow-empty -m "Triggering pipeline for ${{ github.sha }}" -m "${{ github.event.head_commit.message }}"
          git push origin main
