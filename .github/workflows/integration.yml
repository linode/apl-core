name: Integration test on demand
on:
  workflow_call:
    inputs:
      kubernetes_versions:
        description: "Kubernetes versions (JSON formatted list e.g.: ['1.22'])"
        type: string
      install_profile:
        description: Otomi installation profile
        required: true
        default: full
        type: string
      cluster_region:
        description: DigitalOcean cluster region
        required: true
        default: ams3
        type: string
      cluster_persistence:
        type: string
        description: Should a cluster be destroyed on pipeline finish
        required: false
        default: destroy

  workflow_dispatch:
    inputs:
      kubernetes_versions:
        description: 'Kubernetes version'
        type: choice
        options:
          - "['1.22']"
          - "['1.23']"
          - "['1.24']"
        default: "['1.23']"
      install_profile:
        description: Otomi installation profile
        required: true
        default: minimal
        type: choice
        options:
          - minimal
          - full
      cluster_region:
        description: DigitalOcean cluster region
        required: true
        default: ams3
        type: string
      cluster_persistence:
        type: choice
        description: Should a cluster be destroyed on pipeline finish
        required: true
        options:
          - preserve
          - destroy
        default: destroy

env:
  CACHE_REGISTRY: ghcr.io
  CACHE_REPO: redkubes/otomi-core
  REPO: otomi/core
  GIT_USER: redkubesbot
  DIGITALOCEAN_NODE_SIZE: s-8vcpu-16gb
  DIGITALOCEAN_NODE_POOL_MIN_SIZE: 3
  CHECK_CONTEXT: continuous-integration/integration-test
  COMMIT_ID: '${{ github.event.pull_request.head.sha || github.sha }}'

jobs:
  preprocess-input:
    name: Preprocess input variables
    runs-on: ubuntu-latest
    outputs:
      kubernetes_versions: ${{ steps.k8s-versions.outputs.versions }}
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - id: k8s-versions
        name: Process k8s version input
        run: |
          if [ -z '${{ inputs.kubernetes_versions }}' ]; then
            echo "Kubernetes versions not specified, determine DO supported versions"
            versions=`doctl kubernetes options versions -o json | jq -ce 'map(.kubernetes_version)'`
          else
            versions='${{ inputs.kubernetes_versions }}'
          fi
          echo $versions
          echo "::set-output name=versions::$versions"

  run-integration-test:
    name: Run integration test on cluster
    needs: preprocess-input
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        kubernetes_version: ${{ fromJSON(needs.preprocess-input.outputs.kubernetes_versions) }}
      max-parallel: 5
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Set k8s cluster name
        run: |
          # Cluster name must be no longer than 63 characters
          echo DIGITALOCEAN_CLUSTER_NAME=i-${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}-${{ strategy.job-index }}-${{ github.event.pull_request.head.sha || github.sha }} >> $GITHUB_ENV
      - name: Determine exact k8s version
        run: |
          echo DIGITALOCEAN_K8S_VERSION=`doctl kubernetes options versions -o json | jq -re 'map(select(.kubernetes_version | startswith("${{ matrix.kubernetes_version }}"))) | .[0] | .slug'` >> $GITHUB_ENV
      - name: Get default VPC for region
        run: |
          echo DIGITALOCEAN_VPC_UUID=`doctl vpcs list -o json | jq -re 'map(select((.region == "${{ inputs.cluster_region }}") and .default)) | .[0] | .id'` >> $GITHUB_ENV
      - name: Create k8s cluster for testing
        run: |
          doctl kubernetes cluster create ${{ env.DIGITALOCEAN_CLUSTER_NAME }} \
            --tag integration-test \
            --ha \
            --maintenance-window any=03:00 \
            --region ${{ inputs.cluster_region }} \
            --vpc-uuid ${{ env.DIGITALOCEAN_VPC_UUID }} \
            --node-pool "name=int-test-${{ strategy.job-index }}-${{ env.COMMIT_ID }};size=${{ env.DIGITALOCEAN_NODE_SIZE }};tag=integration-test;auto-scale=true;min-nodes=${{ env.DIGITALOCEAN_NODE_POOL_MIN_SIZE }};max-nodes=5;count=${{ env.DIGITALOCEAN_NODE_POOL_MIN_SIZE }};" \
            --version ${{ env.DIGITALOCEAN_K8S_VERSION }} \
            --wait
      - name: Retrieve cluster id
        run: echo DIGITALOCEAN_CLUSTER_ID=`doctl kubernetes cluster get ${{ env.DIGITALOCEAN_CLUSTER_NAME }} --format ID --no-header` >> $GITHUB_ENV
      - name: Assign the cluster to the project
        run: doctl projects resources assign ${{ secrets.DIGITALOCEAN_PROJECT }} --resource=do:kubernetes:${{ env.DIGITALOCEAN_CLUSTER_ID }}
      - name: Save kubectl config with auth token
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 3600 ${{ env.DIGITALOCEAN_CLUSTER_NAME }}
      - name: Get kubectl environment
        run: echo DIGITALOCEAN_CLUSTER_CONTEXT=`kubectl config current-context` >> $GITHUB_ENV
      - name: Create image pull secret on test cluster
        run: |
          kubectl create secret docker-registry reg-otomi-github \
            --docker-server=${{ env.CACHE_REGISTRY }} \
            --docker-username=${{ env.GIT_USER }} \
            --docker-password='${{ secrets.NPM_TOKEN }}'
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare Otomi chart
        run: |
          ref=${{ github.event.pull_request.head.ref || github.ref }}
          tag=${ref##*/}
          k8sVersion=${{ env.DIGITALOCEAN_K8S_VERSION }}
          sed --in-place "s/APP_VERSION_PLACEHOLDER/$tag/g" chart/otomi/Chart.yaml
          sed --in-place "s/0-chart-patch-placeholder/0/g" chart/otomi/Chart.yaml
          sed --in-place "s/CONTEXT_PLACEHOLDER/${{ env.DIGITALOCEAN_CLUSTER_CONTEXT }}/g" tests/integration/${{ inputs.install_profile }}.yaml
          sed --in-place "s/K8S_VERSION_PLACEHOLDER/${k8sVersion:0:4}/g" tests/integration/${{ inputs.install_profile }}.yaml
          sed --in-place "s/OTOMI_VERSION_PLACEHOLDER/${GITHUB_REF##*/}/g" tests/integration/${{ inputs.install_profile }}.yaml
          cat << EOF > values-temp.yaml
          imageName: "${{ env.CACHE_REGISTRY }}/${{ env.CACHE_REPO }}"
          imagePullSecretNames:
            - reg-otomi-github
          EOF
      - name: Otomi install
        run: helm install --wait --wait-for-jobs --timeout 40m0s otomi chart/otomi --values tests/integration/${{ inputs.install_profile }}.yaml --values values-temp.yaml
      - name: Gather k8s events on failure
        if: failure()
        run: |
          kubectl get events --sort-by='.lastTimestamp' -A
      - name: Gather k8s pods on failure
        if: failure()
        run: |
          kubectl get pods -A -o wide
      - name: Gather otomi logs on failure
        if: failure()
        run: |
          kubectl logs jobs/otomi --tail 150
      - name: Remove the test cluster
        if: always()
        run: |
          [[ "${{ inputs.cluster_persistence }}" == "preserve" ]] && echo "The cluster ${{ env.DIGITALOCEAN_CLUSTER_NAME }} will NOT be destroyed!!" && exit 0
          doctl kubernetes cluster delete ${{ env.DIGITALOCEAN_CLUSTER_NAME }} -f --dangerous
      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: github-ci
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/redkubes.png?size=48
          SLACK_TITLE: Scheduled integration tests
          SLACK_USERNAME: RedKubesBot
