name: Build and publish Docker
on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*'
env:
  CACHE_REGISTRY: ghcr.io
  CACHE_REPO: redkubes/otomi-core
  REPO: otomi/core
  GIT_USER: redkubesbot

jobs:
  build-test-cache:
    if: (!contains(github.event.head_commit.message, 'ci skip') && !startsWith(github.ref, 'refs/tags/') && !github.event.act)
    runs-on: ubuntu-latest
    env:
      COMMIT_MSG: ${{ github.event.head_commit.message }}
    steps:
      - name: Set env
        run: |
          tag=${GITHUB_REF##*/}
          echo "Creating tag: $tag"
          echo "TAG=$tag" >> $GITHUB_ENV
          git config --global user.email $GIT_USER@users.noreply.github.com
          git config --global user.name $GIT_USER
      - name: Checkout
        uses: actions/checkout@v2
      # - name: CI tests, image build and push tag for main or branch
      #   uses: whoan/docker-build-with-cache-action@v5
      #   with:
      #     username: ${{ env.GIT_USER }}
      #     password: '${{ secrets.NPM_TOKEN }}'
      #     registry: ${{ env.CACHE_REGISTRY }}
      #     image_name: ${{ env.CACHE_REPO }}
      #     image_tag: ${{ env.TAG }}
      #     pull_image_and_stages: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ${{ env.CACHE_REGISTRY }}
          username: ${{ env.GIT_USER }}
          password: '${{ secrets.NPM_TOKEN }}'
      - name: CI tests, image build and push tag for main or branch
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ env.CACHE_REGISTRY }}/${{ env.CACHE_REPO }}:${{ env.TAG }}

  push-to-docker:
    needs: build-test-cache
    if: always() && ((contains(needs.build-test-cache.result, 'success') && !contains(needs.integration.outputs.started, 'true')) || (contains(needs.integration.result, 'success'))) && !github.event.act
    runs-on: ubuntu-latest
    steps:
      - name: Push to docker hub
        run: |
          TAG=${GITHUB_REF##*/}
          docker login -u $GIT_USER -p '${{ secrets.NPM_TOKEN }}' ghcr.io
          image="$CACHE_REGISTRY/$CACHE_REPO:$TAG"
          docker pull $image
          docker tag $image $REPO:$TAG
          docker login -u otomi -p ${{ secrets.DOCKERHUB_OTOMI_TOKEN }}
          docker push $REPO:$TAG
      - name: Show me the logic
        run: |
          echo github.ref == ${{ github.ref }}

  release:
    needs: push-to-docker
    if: always() && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'chore(release)') && !github.event.act
    runs-on: ubuntu-latest
    env:
      COMMIT_MSG: ${{ github.event.head_commit.message }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set env
        run: |
          git config --global user.email $GIT_USER@users.noreply.github.com
          git config --global user.name $GIT_USER
      - name: Create and push git tag
        id: git_tag
        run: |
          TAG=${GITHUB_REF##*/}
          docker login -u otomi -p ${{ secrets.DOCKERHUB_OTOMI_TOKEN }}
          docker pull $REPO:$TAG
          docker tag $REPO:$TAG $REPO:latest
          docker push $REPO:latest
          release_tag=v${COMMIT_MSG#* }
          echo ::set-output name=tag::$release_tag
          echo "Releasing $REPO:$release_tag"
          docker tag $REPO:$TAG $REPO:$release_tag
          docker push $REPO:$release_tag
          echo "machine github.com login $GIT_USER password ${{ secrets.GIT_PASSWORD }}" > ~/.netrc
          git tag -am "$COMMIT_MSG" $release_tag && git push --follow-tags origin main
          changelog=$(cat CHANGELOG.md | awk -v n=2 '/### \[[0-9]*/&&!--n{exit}{print}')
          # now do some escaping because github does not help us here:
          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A'}"
          changelog="${changelog//$'\r'/'%0D'}"
          echo ::set-output name=changes::$changelog
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.git_tag.outputs.tag }}
          release_name: Release ${{ steps.git_tag.outputs.tag }}
          body: ${{ steps.git_tag.outputs.changes }}

  chart-release:
    needs: release
    if: always() && contains(needs.release.result, 'success') && !github.event.act
    runs-on: ubuntu-latest
    container:
      image: otomi/tools:v1.4.20
      options: --user 0
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare chart
        run: |
          # Release new chart only if its version changes
          helm repo add otomi https://otomi.io/otomi-core
          helm repo update
          chart_version=$(helm search repo otomi -o json | jq -r 'sort_by(.version) | .[-1].version')
          chart_patch_version=${chart_version##*.}
          new_patch_version=$(($chart_patch_version+1))
          # check if major or minor part of version changed (patch number is automated so left out of equation)
          this_version=$(cat chart/otomi/Chart.yaml | yq r - 'version' | sed "s/CHART_PATCH_PLACEHOLDER/$chart_patch_version/g")
          # if any of those changed then reset the patch version
          [ "$this_version" != "$chart_version" ] && new_patch_version=1
          release_tag=v$(cat package.json | jq -r '.version')
          sed --in-place "s/APP_VERSION_PLACEHOLDER/$release_tag/g" chart/otomi/Chart.yaml
          sed --in-place "s/CHART_PATCH_PLACEHOLDER/$new_patch_version/g" chart/otomi/Chart.yaml
          sed --in-place "s/APP_VERSION_PLACEHOLDER/$release_tag/g" chart/otomi/values.yaml
          # copy readme from repo into the charts and add tpl/chart-values.md
          cp README.md chart/otomi/
          printf "\n\n" >>chart/otomi/README.md
          cat tpl/chart-values.md >>chart/otomi/README.md
          # generate schema
          npx js-yaml values-schema.yaml > chart/otomi/values.schema.json
          # and set the global id for git as it seems needed by the next step when a custom image is used
          git config --global user.email $GIT_USER@users.noreply.github.com
          git config --global user.name $GIT_USER
      - name: Create and publish otomi chart release
        id: chart_release
        uses: helm/chart-releaser-action@v1.4.0
        with:
          charts_dir: chart
          charts_repo_url: https://otomi.io/charts/
        env:
          CR_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

  notification:
    # needs: [build-test-cache, integration, push-to-docker, release, chart-release]
    needs: [build-test-cache, push-to-docker, release, chart-release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: github-ci
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/redkubes.png?size=48
          SLACK_TITLE: CI run
          SLACK_USERNAME: RedKubesBot
