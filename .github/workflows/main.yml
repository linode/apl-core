name: Build and publish Docker
on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '*'
env:
  COMMIT_MSG: ${{ github.event.head_commit.message }}
  CACHE_REGISTRY: ghcr.io
  CACHE_REPO: redkubes/otomi-core
  REPO: otomi/core
  GIT_USER: redkubesbot
  GIT_PASSWORD: ${{ secrets.GIT_PASSWORD }}
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_OTOMI_TOKEN }}

jobs:
  build-test-push-release:
    if: "((contains(github.event.head_commit.message, 'chore(release)') && github.ref == 'refs/heads/master') || !contains(github.event.head_commit.message, 'chore(release)')) && !contains(github.event.head_commit.message, 'ci skip') && !startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    steps:
      - name: Set env
        run: |
          tag=$(echo $(basename $GITHUB_REF))
          echo "Creating tag: $tag"
          echo "TAG=$tag" >> $GITHUB_ENV
          git config --global user.email $GIT_USER@users.noreply.github.com
          git config --global user.name $GIT_USER
      - name: Checkout
        uses: actions/checkout@v2
        with:
          token: ${{ env.GIT_PASSWORD }}
          fetch-depth: 2
      - name: CI tests, image build and push tag for master or branch
        uses: whoan/docker-build-with-cache-action@v5
        with:
          username: redkubesbot
          password: '${{ secrets.NPM_TOKEN }}'
          registry: ${{ env.CACHE_REGISTRY }}
          image_name: ${{ env.CACHE_REPO }}
          image_tag: ${{ env.TAG }}
          pull_image_and_stages: false
      - name: Retag from cache and push
        run: |
          docker login -u otomi -p $DOCKER_PASSWORD
          docker tag $CACHE_REGISTRY/$CACHE_REPO:$TAG $REPO:$TAG
          docker push $REPO:$TAG
      - if: "contains(github.event.head_commit.message, 'chore(release)')"
        name: Create and push git tag
        id: git_tag
        run: |
          docker login -u otomi -p $DOCKER_PASSWORD
          docker tag $REPO:$TAG $REPO:latest
          docker push $REPO:latest
          release_tag=v${COMMIT_MSG#* }
          echo ::set-output name=tag::$release_tag
          echo "Releasing $REPO:$release_tag"
          docker tag $REPO:$TAG $REPO:$release_tag
          docker push $REPO:$release_tag
          echo "machine github.com login $GIT_USER password $GIT_PASSWORD" > ~/.netrc
          git tag -am "$COMMIT_MSG" $release_tag && git push --follow-tags origin master
          changelog=$(cat CHANGELOG.md | awk -v n=2 '/### \[[0-9]*/&&!--n{exit}{print}')
          # now do some escaping because github does not help us here:
          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A'}"
          changelog="${changelog//$'\r'/'%0D'}"
          echo ::set-output name=changes::$changelog
      - if: "contains(github.event.head_commit.message, 'chore(release)')"
        name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.git_tag.outputs.tag }}
          release_name: Release ${{ steps.git_tag.outputs.tag }}
          body: ${{ steps.git_tag.outputs.changes }}
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: github-ci
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/redkubes.png?size=48
          SLACK_TITLE: CI run ${{ job.status }}
          SLACK_USERNAME: RedKubesBot
        if: always() # failure

  chart-release:
    if: "contains(github.event.head_commit.message, 'chore(release)')"
    needs: build-test-push-release
    runs-on: ubuntu-latest
    container:
      image: otomi/tools:v1.4.19
      options: --user 0
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check for changes
        id: prereq
        run: |
          # Release new chart only if its version changes
          helm repo add otomi https://otomi.io/otomi-core
          helm repo update
          this_version=v$(cat chart/otomi/Chart.yaml | yq r - 'version')
          chart_version=$(helm search repo otomi | -o json | jq -r 'sort_by(.version) | .[-1].version')
          [ "$this_version" = "$chart_version" ] && echo "The current version ($this_version) is the same as the last released version ($chart_version). Skipping chart release." && exit
          echo ::set-output name=has_changes::true
          release_tag=v$(cat package.json | jq -r '.version')
          sed --in-place "s/APP_VERSION_PLACEHOLDER/$release_tag/g" chart/otomi/Chart.yaml
          sed --in-place "s/APP_VERSION_PLACEHOLDER/$release_tag/g" chart/otomi/values.yaml
          npx js-yaml values-schema.yaml > chart/otomi/values.schema.json
          # and set the global id for git as it seems needed by the next step when a custom image is used
          git config --global user.email $GIT_USER@users.noreply.github.com
          git config --global user.name $GIT_USER
      - if: '${{ steps.prereq.outputs.has_changes }}'
        name: Create and publish otomi chart release
        id: chart_release
        uses: helm/chart-releaser-action@v1.2.1
        with:
          charts_dir: chart
          charts_repo_url: https://otomi.io/charts/
        env:
          CR_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - if: 'failure() || ${{ steps.prereq.outputs.has_changes }}'
        name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: github-ci
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/redkubes.png?size=48
          SLACK_TITLE: CI run ${{ job.status }}
          SLACK_USERNAME: RedKubesBot
