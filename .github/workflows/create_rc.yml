name: Create Release Candidate.
run-name: Create Release Candidate from ${{ github.event.inputs.rc_commit_sha || 'main' }}

on:
  workflow_dispatch:
    inputs:
      rc_commit_sha:
        description: 'Commit from which to create the release candidate. If not provided, the latest commit on main will be used'
        required: false
        type: string
      dry_run:
        description: 'Dry Run: If true, the pipeline will not publish the helm chart.'
        required: true
        default: 'true'
        type: choice
        options:
          - true
          - false

env:
  CACHE_REGISTRY: ghcr.io
  CACHE_REPO: linode/apl-core
  REPO: linode/apl-core
  DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_LINODEBOT_TOKEN }}
  DOCKER_USERNAME: ${{ vars.DOCKERHUB_LINODEBOT_USERNAME }}
  DEV_KUBECONFIG_64: ${{ secrets.DEV_KUBECONFIG }}
  BOT_EMAIL: ${{ vars.BOT_EMAIL }}
  BOT_USERNAME: ${{ vars.BOT_USERNAME }}

jobs:
  create_patch_release:
    runs-on: ubuntu-22.04
    outputs:
      rc_branch: ${{ steps.create_release.outputs.rc_branch }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # Checkout inputs.rc_commit_sha or main if not provided
          ref: ${{ github.event.inputs.rc_commit_sha || 'main' }}

      - uses: actions/setup-node@v6
        with:
          node-version: '20'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: |
          npm install standard-version

      - name: Create release candidate tag & branch
        id: create_release
        env:
          DRY_RUN: ${{ github.event.inputs.dry_run }}
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
          COMMIT_SHA: ${{ github.event.inputs.rc_commit_sha || 'main' }}
        run: |
          ci/scripts/create_rc.sh

      - name: Set environment variables
        run: |
          TAG=v$( jq -r '.version' package.json)
          echo "Creating TAG: $TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV
          git config --global user.email $BOT_EMAIL
          git config --global user.name $BOT_USERNAME

      - name: Login to Github Packages
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CACHE_REGISTRY }}
          username: ${{ env.BOT_USERNAME }}
          password: '${{ secrets.BOT_TOKEN }}'

      - name: CI tests, image build and push tag rc branch
        if: ${{ github.event.inputs.dry_run == 'false' }}
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          tags: |
            ${{ env.CACHE_REGISTRY }}/${{ env.CACHE_REPO }}:${{ env.TAG }}

      - name: Push to docker hub
        if: ${{ github.event.inputs.dry_run == 'false' }}
        id: push-to-docker
        run: |
          set -u
          docker login ghcr.io -u $BOT_USERNAME -p ${{ secrets.BOT_TOKEN }}
          image="$CACHE_REGISTRY/$CACHE_REPO:${{ env.TAG }}"
          docker pull $image
          docker tag $image $REPO:${{ env.TAG }}
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push $REPO:${{ env.TAG }}

      # - name: Deploy to staging // TODO: support staging env
      #   run: ci/scripts/trigger_dev.sh

      - name: Prepare chart
        id: prepare_chart
        run: |
          ci/scripts/prepare_chart_for_release.sh

      - name: Dry Run Outputs
        if: ${{ github.event.inputs.dry_run == 'true'}}
        run: |
          echo "This Pipeline was executed in dry run mode so it will not publish the helm chart."
          echo "Below are some useful data to check:"
          echo "Release candidate branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "-*-*--*-*--*-*--*-*--*-*--*-*--*-*--*-*-*--*-*--*-*--*-*--*-*--*-*--*-*--*-*--*-*"
          echo "Contents of: chart/apl/Chart.yaml"
          cat chart/apl/Chart.yaml
          echo "-*-*--*-*--*-*--*-*--*-*--*-*--*-*--*-*-*--*-*--*-*--*-*--*-*--*-*--*-*--*-*--*-*"
          echo "Contents of: package.json"
          cat package.json
          echo "-*-*--*-*--*-*--*-*--*-*--*-*--*-*--*-*-*--*-*--*-*--*-*--*-*--*-*--*-*--*-*--*-*"
          echo "Latest 5 commits on the release candidate branch"
          git log -n 5 --pretty=format:"%h %s" --abbrev-commit
          echo "-*-*--*-*--*-*--*-*--*-*--*-*--*-*--*-*-*--*-*--*-*--*-*--*-*--*-*--*-*--*-*--*-*"
          echo "Commits behind main branch VS Commits ahead of main branch"
          git rev-list --left-right --count origin/main...HEAD

      - name: Create and publish otomi chart release
        if: ${{ github.event.inputs.dry_run == 'false' }}
        id: chart_release
        uses: helm/chart-releaser-action@v1.7.0
        with:
          charts_dir: chart
          skip_existing: true
          mark_as_latest: false
        env:
          CR_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
