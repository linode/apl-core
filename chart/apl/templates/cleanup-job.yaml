{{- if .Values.cleanup.enabled }}
{{- $version := .Values.otomi.version | default .Chart.AppVersion }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "apl.fullname" . }}-cleanup
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "10"
    helm.sh/hook-delete-policy: hook-succeeded
  labels: {{- include "apl.labels" . | nindent 4 }}
spec:
  backoffLimit: {{ .Values.cleanup.backoffLimit | default 3 }}
  ttlSecondsAfterFinished: {{ .Values.cleanup.ttlSecondsAfterFinished | default 300 }}
  activeDeadlineSeconds: {{ .Values.cleanup.activeDeadlineSeconds | default 180 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations: {{- toYaml . | nindent 8 }}
      {{- end }}
      labels: {{- include "apl.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: OnFailure
      serviceAccountName: {{ include "apl.fullname" . }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 3000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: cleanup
          image: {{ .Values.cleanup.image.repository | default "bitnami/kubectl" }}:{{ .Values.cleanup.image.tag | default "latest" }}
          imagePullPolicy: {{ .Values.cleanup.image.pullPolicy | default "IfNotPresent" }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            readOnlyRootFilesystem: true
          resources:
            limits:
              memory: {{ .Values.cleanup.resources.limits.memory | default "128Mi" }}
              cpu: {{ .Values.cleanup.resources.limits.cpu | default "100m" }}
            requests:
              memory: {{ .Values.cleanup.resources.requests.memory | default "64Mi" }}
              cpu: {{ .Values.cleanup.resources.requests.cpu | default "50m" }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              set -e
              echo "Starting cleanup of cluster-admin ClusterRoleBinding..."
              
              # Check if the ClusterRoleBinding exists
              if kubectl get clusterrolebinding {{ include "apl.fullname" . }} --ignore-not-found; then
                echo "Deleting ClusterRoleBinding: {{ include "apl.fullname" . }}"
                kubectl delete clusterrolebinding {{ include "apl.fullname" . }} --ignore-not-found
                echo "ClusterRoleBinding deleted successfully"
                echo "Note: This pod will continue to run with cached permissions until completion"
              else
                echo "ClusterRoleBinding {{ include "apl.fullname" . }} not found, nothing to clean up"
              fi
              
              echo "Cleanup completed successfully"
      {{- if hasKey .Values "imagePullSecretNames" }}
      imagePullSecrets:
        {{- range .Values.imagePullSecretNames }}
        - name: {{ . }}
        {{- end }}
      {{- end }}
{{- end }}
