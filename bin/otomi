#!/usr/bin/env bash
#####################################################################################
##
## NOTE:
## This is a command line tool to operate on otomi-core.
## All commands are executed in docker container.
## Keep this file as simple as possible:
## - do not depend on any external files.
## - do not use any non standard tooling.
## - only Docker is needed to run otomi-core image
## If you need to use any extra binaries then most probably you want to add them to the otomi/tools image.
##
#####################################################################################
[ "${BASH_VERSINFO:-0}" -lt 4 ] && echo "You are using $BASH_VERSINFO, while we only support Bash -ge than version 4. Please upgrade." && exit 1

command=$1
original_params="$@"

env_unset='false'
[ "$ENV_DIR" = "" ] && env_unset='true'
ENV_DIR=${ENV_DIR:-$PWD}
[ "$ENV_DIR" = "/home/app/stack" ] && ENV_DIR=$ENV_DIR/env
[ -n "$VERBOSE" ] && echo "ENV_DIR: $ENV_DIR"

. bin/common.sh
[ $has_docker = 'false' ] && [ -z "$IN_DOCKER" ] && [ -z "$CI" ] && err "Otomi CLI expects a running docker daemon!" && exit 1

stack_dir='/home/app/stack'
readonly image_tag=$(otomi_image_tag)
readonly cmd_image="otomi/core:$image_tag"
[ -n "$VERBOSE" ] && echo "cmd_image: $cmd_image"

docker_terminal_params='-it'
readme_url='https://github.com/redkubes/otomi-core'
kubeconfig="-v ${KUBECONFIG:-$HOME/.kube/config}:/home/app/.kube/config"

# check if we are in core or values repo (could be improved as it is based on name!)
readonly cwd=$(basename "$PWD")
if [ "$cwd" = "otomi-core" ]; then
  [ -n "$VERBOSE" ] && echo "Mounting otomi-core dir"
  stack_dir=$PWD
  [ -n "$VERBOSE" ] && echo "stack_dir: $stack_dir"
  mount_stack_dir=1
fi
# now we can retrieve customer name from settings
customer=$(echo customer_name || $CUSTOMER || "unknown")

# set helm config
helm_config="$HOME/.config/helm"
uname -a | grep -i darwin >/dev/null && helm_config="$HOME/Library/Preferences/helm"
[ -n "$VERBOSE" ] && echo "helm_config: $helm_config"

function show_usage() {
  echo "otomi usage:
    apply *              apply k8s resources
    bash                 run interactive bash shell in otomi-core container
    bats                 run BATS on bin/tests (see docs/BATS.md)
    bootstrap            bootstrap values repo with artifacts corresponding to the cluster's stack version
    check-policies *     check if generated manifests adhere to defined OPA policies
    commit               execute wrapper for encrypt -> generate pipelines -> git commit changed files
    console              start Otomi Console (add any arg to quit) on http://127.0.0.1:3000 (licensed, so pull secret required for api)
    decrypt              decrypts file(s) given as arguments (relative to env folder), or all env/*.secrets.yaml to env/*.secrets.yaml.dec files
    deploy               execute otomi-core deploy script
    destroy *            destroy all or some charts
    diff *               diff k8s resources
    encrypt              encrypt file(s) given as arguments (relative to env folder), or all env/*.secrets.yaml files
    help                 print this help
    pull                 wrapper for git pull && bootstrap
    sync *               sync k8s resources
    switch               switch context to the target cluster and bootstraps
    template *           export k8s resources
    test                 run tests against the target cluster
    values               show helmfile values for target cluster
    validate-templates * validate generated manifests against supported k8s versions/CRDs and best practices
    validate-values *    validate values for each cluster against JSON schema (takes target options)
    x                    execute command in container

  Common options:
    -d | --debug        Run otomi CLI in debug mode. Runs bash with -x.
    -t | --trace        Trace otomi CLI calls. Sets bash prompt with time.
    -v | --verbose      Show more output.
    -s | --skip-cleanup Keep temporary files for inspections.

  (*) Takes helmfile options:
    -l|--label          Select charts by label (format: <label>=<value>), e.g. '-l name=prometheus-operator' or '--label group=jobs'
    -f|--file           Select helmfiles by filename, e.g. '-f helmfile.d/helmfile-15.ingress-core.yaml'
  (For a full list of options please read the helmfile documentation.)   
  "
}
function check_env_dir() {
  [ "$cwd" = "otomi-core" ] && [ "$env_unset" = 'true' ] && err "The ENV_DIR environment variable is not set" && exit 1
  return 0
}

function validate_k8s_context() {
  [ -n "$VERBOSE" ] && echo "Validating kube context"
  check_env_dir
  local env_path="$ENV_DIR/env/.env"
  [ ! -f $env_path ] && err "The file '$env_path' does not exist" && exit 1
  . $env_path
  [ -z "$K8S_CONTEXT" ] && err "K8S_CONTEXT is not defined in $env_path" && exit 1
  [ -n "$VERBOSE" ] && echo "Using kube context: $K8S_CONTEXT"
  local context=$(kubectl config current-context)
  if [ -z "$CI" ] && [ "$K8S_CONTEXT" != "$context" ]; then
    read -p "Warning: Your current kubernetes context does not match cluster context: $K8S_CONTEXT. Would you like to switch kube context to cluster first? [Yn]" ok
    if [ "${ok:-y}" = "y" ]; then
      kubectl config use $K8S_CONTEXT
      $is_repo && drun bin/bootstrap.sh
    else
      exit
    fi
  fi
  return 0
}

function check_sops_file() {
  [ ! -f "$ENV_DIR/.sops.yaml" ] && (
    err "$ENV_DIR/.sops.yaml does not exist"
    exit 1
  )
  return 0
}

function evaluate_secrets() {
  [ ! -f "$ENV_DIR/.sops.yaml" ] && [ -n "$VERBOSE" ] && echo "Info: The 'secrets.*.yaml files' are not decrypted, because $ENV_DIR/.sops.yaml file is not present"
  if [ -z "$CI" ]; then
    local secrets_path="$ENV_DIR/.secrets"
    [ ! -r "$secrets_path" ] && err "Unable to find the '$secrets_path' file.\nPlease follow to documentation: $readme_url" && exit 1
    . $secrets_path
  fi
  prepare_crypt
  return 0
}

function is_repo() {
  [ "$(basename "$PWD")" = "otomi-core" ] && err "Error: Should not be ran from otomi-core" && exit 1
  return 0
}

function run_console() {
  [ -n "$1" ] && docker-compose down --remove-orphans && exit
  # this will create /tmp/otomi-env:
  drun bin/check-console.sh
  # now source the fresh env we created for docker-compose
  . /tmp/otomi-env
  # try to login with the pull secret
  set -o pipefail
  pass=$(echo "$PULL_SECRET" | base64 --decode | jq '.auths["eu.gcr.io"].password|fromjson')
  docker login -u _json_key -p "$pass" "eu.gcr.io"
  echo "Starting Otomi Console at http://127.0.0.1:3000"
  sh -c "sleep 7 && open http://127.0.0.1:3000" &
  docker-compose up
  rm /tmp/otomi-env
}

function drun() {
  local command=$@
  local stack_volume=''
  local socket_volume=''

  [ "$VERBOSE" != '' ] && echo "Running in CI: $CI"
  [ -n "$CI" ] && check_kube_context=0

  # execute any kubectl command to refresh access token
  if [ -n "$check_kube_context" ]; then
    validate_k8s_context
    kubectl version >/dev/null
  fi

  [ -n "$mount_stack_dir" ] && stack_volume="-v ${stack_dir}:${stack_dir}"

  # use docker run if not in docker
  if [ -z "$IN_DOCKER" ]; then
    [ -n "$VERBOSE" ] && echo "Running dockerized version of command: $command"
    [ "$image_tag" = 'latest' ] || [ "$image_tag" = 'master' ] && [ -z "$NOPULL" ] && docker pull "otomi/core:$image_tag" >/dev/null
    docker run $docker_terminal_params --rm \
      $stack_volume $socket_volume $kubeconfig -v /tmp:/tmp \
      -v $GOOGLE_APPLICATION_CREDENTIALS:$GOOGLE_APPLICATION_CREDENTIALS \
      -v ${HOME}/.ssh:/home/app/.ssh \
      -v ${helm_config}:/home/app/.config/helm \
      -v ${HOME}/.config/gcloud:/home/app/.config/gcloud \
      -v ${HOME}/.aws:/home/app/.aws \
      -v ${HOME}/.azure:/home/app/.azure \
      -v ${ENV_DIR}:${stack_dir}/env \
      -e AZURE_TENANT_ID=$AZURE_TENANT_ID \
      -e AZURE_CLIENT_ID=$AZURE_CLIENT_ID \
      -e AZURE_CLIENT_SECRET=$AZURE_CLIENT_SECRET \
      -e GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS \
      -e AWS_REGION=$AWS_REGION \
      -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
      -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
      -e VAULT_TOKEN=$VAULT_TOKEN \
      -e CUSTOMER="$customer" \
      -e VERBOSE="${VERBOSE}" \
      -e IN_DOCKER='1' \
      -e GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY" \
      -e K8S_CONTEXT="$K8S_CONTEXT" \
      -e DEBUG="$DEBUG" \
      -e KEEP_DEBUGGING="$KEEP_DEBUGGING" \
      -e TRACE="$TRACE" \
      -e CI="$CI" \
      -w $stack_dir \
      $cmd_image \
      bash -c "$command"
  else
    [ -n "$VERBOSE" ] && echo "Already in docker, will run native version of command: $command"
    $command
  fi
}

function execute() {
  shift
  shift
  case $command in
    apply)
      evaluate_secrets
      check_kube_context=1
      set -o pipefail
      drun ". bin/common.sh $original_params && hf apply --skip-deps $SKIP_CLEANUP" | grep -Ev $helmfile_output_hide
      ;;
    argstest)
      echo "$@"
      ;;
    bash)
      docker_terminal_params='-ti'
      drun 'bash'
      ;;
    bats)
      drun "bats -T bin/tests"
      ;;
    bootstrap)
      drun "bin/bootstrap.sh $original_params"
      ;;
    check-policies)
      check_env_dir
      evaluate_secrets
      drun "bin/check-policies.sh $original_params"
      ;;
    commit)
      is_repo
      evaluate_secrets
      git -C $ENV_DIR pull
      drun 'bin/validate-values.sh'
      drun 'bin/pre-commit.sh'
      git add . && git commit -m 'Manual commit' --no-verify
      ;;
    console)
      evaluate_secrets
      run_console "$@"
      ;;
    decrypt)
      check_sops_file
      evaluate_secrets
      if [ "$*" != '' ]; then
        for f in "$@"; do
          echo "Decrypting $f"
          drun "helm secrets dec ./env/$f" >/dev/null
        done
        exit
      else
        drun "bin/crypt.sh decrypt"
      fi
      ;;
    deploy)
      evaluate_secrets
      check_kube_context=1
      drun "bin/deploy.sh" | grep -Ev $helmfile_output_hide
      ;;
    diff)
      evaluate_secrets
      check_kube_context=1
      set -o pipefail
      drun ". bin/common.sh $original_params && hf diff --skip-deps $SKIP_CLEANUP" | grep -Ev $helmfile_output_hide
      ;;
    destroy)
      evaluate_secrets
      check_kube_context=1
      set -o pipefail
      drun ". bin/common.sh $original_params && hf destroy" | grep -Ev $helmfile_output_hide
      ;;
    encrypt)
      check_sops_file
      evaluate_secrets
      if [ "$*" != '' ]; then
        for f in "$@"; do
          echo "Encrypting $f"
          drun "helm secrets enc ./env/$f" >/dev/null
        done
        exit
      else
        drun 'bin/crypt.sh encrypt'
      fi
      ;;
    gen-drone)
      evaluate_secrets
      drun 'bin/gen-drone.sh'
      ;;
    hf)
      evaluate_secrets
      check_kube_context=1
      set -o pipefail
      drun ". bin/common.sh $original_params && hf $*" | grep -Ev $helmfile_output_hide
      ;;
    lint)
      evaluate_secrets
      check_kube_context=1
      set -o pipefail
      drun ". bin/common.sh $original_params && hf lint --skip-deps"
      ;;
    pull)
      is_repo
      evaluate_secrets
      git -C $ENV_DIR pull
      drun 'bin/bootstrap.sh'
      ;;
    regcred)
      drun "bin/regcred.sh $original_params"
      ;;
    rotate-keys)
      check_sops_file
      evaluate_secrets
      drun "bin/crypt.sh rotate"
      ;;
    sync)
      evaluate_secrets
      check_kube_context=1
      set -o pipefail
      drun ". bin/common.sh $original_params && hf sync --skip-deps $SKIP_CLEANUP" | grep -Ev $helmfile_output_hide
      ;;
    template)
      evaluate_secrets
      check_env_dir
      drun ". bin/common.sh $original_params && hf_template"
      ;;
    test)
      evaluate_secrets
      drun bin/test.sh
      ;;
    validate-templates)
      evaluate_secrets
      check_env_dir
      drun "bin/validate-templates.sh $original_params"
      ;;
    validate-values)
      evaluate_secrets
      check_env_dir
      drun "bin/validate-values.sh $original_params"
      ;;
    values)
      evaluate_secrets
      check_env_dir
      set -o pipefail
      drun ". bin/common.sh && hf -f helmfile.tpl/helmfile-dump.yaml build" | grep -Ev $helmfile_output_hide | sed -e $replace_paths_pattern
      ;;
    x)
      drun "$@"
      ;;
    *)
      show_usage
      [ -z "$1" ] && err "Unknown command: $command" && exit 1
      ;;
  esac
  exit
}
[ -z "$command" ] && err "Missing command argument" && show_usage && exit 1

execute $command "$@"
