# alias oldtomi="bin/otomi"
# alias otomi="binzx/otomi"
alias d="docker"
alias h="helm"
alias ok="otomi x kubectl"
alias k="kubectl"
alias ksk="k -n kube-system"
alias ki="k -n ingress"
alias kh="k -n harbor"
alias kis="k -n istio-system"
alias kk="k -n keycloak"
alias ks="k -n system"
alias ksh="k -n shared"
alias ko="k -n otomi"
alias km="k -n monitoring"
alias kta="k -n team-admin"
alias ka="k --all-namespaces=true"
alias kaa="ka get po,rs,job,deploy,ds,statefulset,svc"
alias kap="ka get po"
alias kcv="k config view"
alias kce="$EDITOR ~/.kube/config"
alias kcg="k config current-context"
alias kcu="k config use-context"
alias kp="k proxy &"

function kpo() {
  labels=$1
  shift
  pod=$(k get po -l "$labels" $@ -ojsonpath='{.items[0].metadata.name}')
  k delete po "$pod" $@
}
function kpk() { ps aux | grep "$@" | awk '{print $2}' | xargs kill; }
function kad() { k delete "$@" --all; }
function kdnp() {
  for ns in default kube-system system monitoring ingress shared; do
    kad networkpolicy -n $ns
  done
}
# force erase all namespaces
function kkns() {
  k proxy &
  k get ns | grep Terminating | awk '{print $1}' | xargs -n1 -- bash -c 'kubectl get ns "$0" -o json | jq "del(.spec.finalizers[0])" > "$0.json"; curl -k -H "Content-Type: application/json" -X PUT --data-binary @"$0.json" "http://127.0.0.1:8001/api/v1/namespaces/$0/finalize"; rm  "$0.json"'
  kk
}
