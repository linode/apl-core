{{- $v := .Environment.Values }}
{{ $promHost := printf "prometheus.%s" $v.domain }}
{{ $alertsHost := printf "alertmanager.%s" $v.domain }}
{{ $grafanaHost := printf "grafana.%s" $v.domain }}
coreDns:
  enabled: false
kubeDns:
  enabled: true
kubeEtcd:
  enabled: false    
prometheusOperator:
  configReloaderCpu: 200m
  createCustomResource: false

prometheus:
  prometheusSpec:
    storageSpec:
      volumeClaimTemplate:
        metadata:
          name: promdata
        spec:
          storageClassName: "fast"
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
    enableAdminAPI: true
    externalUrl: https://{{ $promHost }}
    additionalScrapeConfigs:
      {{- readFile "./istio-scraping.yaml" | nindent 6 }}
    #   - job_name: 'probe-sites'
    #     metrics_path: /probe
    #     params:
    #       module: [http_2xx]  # Look for a HTTP 200 response.
    #     static_configs:
    #       - targets:
    #         {{ range $site := $v.sites }}
    #         - https://{{ $site }}
    #         {{- end }}
    #     relabel_configs:
    #       - source_labels: [__address__]
    #         target_label: __param_target
    #       - source_labels: [__param_target]
    #         target_label: instance
    #       - target_label: __address__
    #         replacement: prom-blackbox-exporter:9115
  additionalServiceMonitors:
    {{- readFile "service-monitors.yaml" | nindent 4 }}
  ingress:
    # enabled: true
    annotations:
      {{- readFile "../_snippets/ingress-annotations.yaml" | nindent 6 }}
      {{- readFile "../_snippets/auth-annotations.yaml" | replace "#DOMAIN#" $v.domain | replace "#RED" $promHost | nindent 6 }}
    paths:
      - /
    hosts:
      - {{ $promHost }}
    tls:
      - secretName: prom-tls
        hosts:
          - {{ $promHost }}
      
additionalPrometheusRules:
  # - name: blackbox
  #   {{- readFile "rules/blackbox.yaml" | nindent 4 }}
  - name: cluster-autoscaler
    {{- readFile "rules/cluster-autoscaler.yaml" | nindent 4 }}
alertmanager:
  alertmanagerSpec:
    externalUrl: https://{{ $alertsHost }}
    logFormat: logfmt # @todo: remove if in master: https://github.com/helm/charts/pull/15330
  config:
    global:
      slack_api_url: https://hooks.slack.com/services/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
    route:
      receiver: default
      group_by: [alertname] #alertname
      group_interval: {{ $v.alertmanager.groupInterval }}
      repeat_interval: {{ $v.alertmanager.repeatInterval }}
      routes:
        - match:
            alertname: Watchdog
          receiver: "null"
        - match:
            severity: critical
          receiver: critical
    receivers:
      - name: "null"
      - name: default
        slack_configs:
          - channel: "#mon-k8s"
            {{- readFile "slack-configs.yaml" | nindent 12 }}
      - name: critical
        slack_configs:
          - channel: "#mon-k8s-crit"
            {{- readFile "slack-configs.yaml" | nindent 12 }}
  ingress:
    # enabled: true
    annotations:
      {{- readFile "../_snippets/ingress-annotations.yaml" | nindent 6 }}
      {{- readFile "../_snippets/auth-annotations.yaml" | replace "#DOMAIN#" $v.domain | replace "#RED" $alertsHost | nindent 6 }}
    paths:
      - /
    hosts:
      - {{ $alertsHost }}
    tls:
      - secretName: alerts-tls
        hosts:
          - {{ $alertsHost }}
grafana:
  additionalDataSources:
    - name: Graphite
      editable: false
      type: graphite
      access: proxy
      url: http://graphite:80
    - name: Loki
      editable: false
      type: loki
      access: proxy
      url: http://loki:3100
  customerLabels: {{ toYaml $v.customerLabels | nindent 4 }}
  adminPassword: bladibla
  rbac:
    pspUseAppArmor: false
  ingress:
    # enabled: true
    annotations:
      {{- readFile "../_snippets/ingress-annotations.yaml" | nindent 6 }}
      {{- readFile "../_snippets/auth-annotations.yaml" | replace "#DOMAIN#" $v.domain | replace "#RED" $grafanaHost | nindent 6 }}
    path: /
    hosts:
      - {{ $grafanaHost }}
    tls:
      - secretName: grafana-tls
        hosts:
          - {{ $grafanaHost }}
  additionalDataSources:
    - name: Graphite
      editable: false
      type: graphite
      access: proxy
      url: http://graphite:80
    - name: Loki
      editable: false
      type: loki
      access: proxy
      url: http://loki:3100
  grafana.ini:
    log:
      level: debug
    server:
      root_url: https://{{ $grafanaHost }}
    users:
      allow_sign_up: false
      auto_assign_org: true
      auto_assign_org_role: Admin
    "auth.proxy":
      enabled: false
      header_name: X-Forwarded-Email
      header_property: email
      # headers: Name:X-Forwarded-User Email:X-Forwarded-Email Groups:X-Forwarded-Groups
    "auth.github":
      enabled: true
      allow_sign_up: true
      client_id: {{ $v | getOrNil "prometheus-operator.grafana.ini.github.clientID" }}
      client_secret: {{ $v | getOrNil "prometheus-operator.grafana.ini.github.clientSecret" }}
      scopes: user:email,read:org
      auth_url: https://github.com/login/oauth/authorize
      token_url: https://github.com/login/oauth/access_token
      api_url: https://api.github.com/user
      # team_ids: admins
      allowed_organizations: redkubes
  #   "auth.generic_oauth":
  #     enabled: true
  #     name: OAuth
  #     allow_sign_up: true
  #     client_id: {{ $v.oidc.grafana.clientId }}
  #     client_secret: {{ $v.oidc.grafana.clientSecret }}
  #     auth_url: https://auth.{{ $v.domain }}/oauth2/authorize
  #     token_url: https://auth.{{ $v.domain }}/oauth2/token
  #     scopes: openid email groups

commonLabels: {{ toYaml $v.customerLabels | nindent 2 }}
kube-state-metrics:
  customerLabels: {{ toYaml $v.customerLabels | nindent 4 }}
prometheus-node-exporter:
  customerLabels: {{ toYaml $v.customerLabels | nindent 4 }}

kubeControllerManager:
  service:
    selector:
      component: null
      k8s-app: kube-controller-manager
kubeScheduler:
  service:
    selector:
      component: null
      k8s-app: kube-scheduler