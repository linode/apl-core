{{- $v := .Values }}
{{- $cm := $v.apps | get "cert-manager" }}
{{- $dockerConfigTpl := readFile "../../helmfile.d/snippets/dockercfg.gotmpl" }}
resources:
  {{- if  ( (hasKey $v "bootstrap"))}}
  - {{- $v.bootstrap | toYaml | nindent 4 }}
  {{- end }}
  {{- range $ns := $v.k8s.namespaces }}
    {{- if or (not (hasKey $ns "app")) ($v.apps | get ($ns | get "app" "-dummy-") dict | get "enabled" false) }}
  - apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ $ns.name }}
      labels:
        name: {{ $ns.name }}
        {{ if not ($ns | get "disableIstioInjection" false) }}istio-injection: enabled{{ end }}
        {{- with $ns | get "labels" nil }}{{ toYaml . | nindent 8 }}{{ end }}
      {{- with $v.otomi | get "globalPullSecret" nil }}
  - apiVersion: v1
    kind: Secret
    type: kubernetes.io/dockerconfigjson
    metadata:
      name: otomi-pullsecret-global
      namespace: {{ $ns.name }}
    data:
      .dockerconfigjson: {{ tpl $dockerConfigTpl . | b64enc }}
      {{- end }}
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: default
      namespace: {{ $ns.name }}
      {{- if or ($v.otomi | get "globalPullSecret" nil) }}
    imagePullSecrets:
      - name: otomi-pullsecret-global
      {{- end }}
    {{- end }}
  {{- end }}
  {{- range $id, $team := omit $v.teamConfig "admin"}}
    {{- $ns := printf "team-%s" $id }}
  - apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ $ns }}
      labels:
        name: {{ $ns }}
        type: team
        istio-injection: enabled
  {{- with $v.otomi | get "globalPullSecret" nil }}
  - apiVersion: v1
    kind: Secret
    type: kubernetes.io/dockerconfigjson
    metadata:
      name: otomi-pullsecret-global
      namespace: {{ $ns }}
    data:
      .dockerconfigjson: {{ tpl $dockerConfigTpl . | b64enc }}
  {{- end }}
  # patching service account here as helm does not recognize it as it's own
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: default
      namespace: {{ $ns }}
    {{- if or ($v.otomi | get "globalPullSecret" nil) $v.apps.harbor.enabled }}
    imagePullSecrets:
    {{- if $v.otomi | get "globalPullSecret" nil }}
      - name: otomi-pullsecret-global
    {{- end }}
    {{- if $v.apps.harbor.enabled }}
      - name: harbor-pullsecret
    {{- end }}
    {{- end }}
  {{- end }}
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: admin-maintenance
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-admin
    subjects:
    - kind: ServiceAccount
      name: default
      namespace: maintenance
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: otomi-deploy
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-admin
    subjects:
    - kind: ServiceAccount
      name: default
      namespace: drone-pipelines
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: team-admin
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-admin
    subjects:
    - kind: ServiceAccount
      name: default
      namespace: team-admin
  - apiVersion: scheduling.k8s.io/v1
    kind: PriorityClass
    metadata:
      name: otomi-critical
    value: 1000000
    globalDefault: false
    description: "This priority class should be used for Otomi High priority service pods only."

  - apiVersion: v1
    kind: Secret
    metadata:
      name: custom-ca
      namespace: cert-manager
    data:
      tls.crt: {{ $cm.customRootCA | b64enc }}
      tls.key: {{ $cm.customRootCAKey | b64enc}}

  {{- if eq $v.cluster.provider "azure" }}
  {{- /* see https://docs.microsoft.com/en-us/azure/aks/custom-certificate-authority#create-a-kubernetes-secret-with-your-ca-information */}}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: custom-ca-trust-secret
      namespace: kube-system
    data:
      tls.crt: {{ $cm.customRootCA | b64enc }}
  {{- end }}
