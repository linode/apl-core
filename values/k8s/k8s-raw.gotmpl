{{- $v := .Values }}
{{- $t := $v.teamConfig }}
{{- $dockerConfigTpl := readFile "../../helmfile.d/snippets/dockercfg.gotmpl" }}
resources:
  {{- range $ns := $v.k8s.namespaces }}
  - apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ $ns.name }}
      labels:
        name: {{ $ns.name }}
        {{ if not ($ns | get "disableIstioInjection" false) }}istio-injection: enabled{{ end }}
        {{- with $ns | get "labels" nil }}{{ toYaml . | nindent 8 }}{{ end }}
  {{- with $v.otomi | get "globalPullSecret" nil }}
  - apiVersion: v1
    kind: Secret
    type: kubernetes.io/dockerconfigjson
    metadata:
      name: otomi-pullsecret-global
      namespace: {{ $ns.name }}
    data:
      .dockerconfigjson: {{ tpl $dockerConfigTpl . | b64enc }}
  {{- end }}
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: default
      namespace: {{ $ns.name }}
    {{- if or ($v.otomi | get "globalPullSecret" nil) (has $ns (list "drone-pipelines" "otomi" "maintenance")) }}
    imagePullSecrets:
      {{- if $v.otomi | get "globalPullSecret" nil }}
      - name: otomi-pullsecret-global
      {{- end }}
      {{- if has $ns (list "drone-pipelines" "otomi" "maintenance") }}
      - name: gcr-json-key
      {{- end }}
    {{- end }}
  {{- end }}
  {{- range $id, $team := $t.teams }}
    {{- $ns := printf "team-%s" $id }}
  - apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ $ns }}
      labels:
        name: {{ $ns }}
        istio-injection: enabled
  # patching service account here as helm does not recognize it as it's own
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: default
      namespace: {{ $ns }}
    {{- if $v.otomi | get "globalPullSecret" nil }}
    imagePullSecrets:
      - name: otomi-pullsecret-global
    {{- end }}
  {{- end }}
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: admin-maintenance
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-admin
    subjects:
    - kind: ServiceAccount
      name: default
      namespace: maintenance
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: otomi-deploy
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-admin
    subjects:
    - kind: ServiceAccount
      name: default
      namespace: drone-pipelines
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: team-admin
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-admin
    subjects:
    - kind: ServiceAccount
      name: default
      namespace: team-admin
  {{- if $v | get "otomi.pullSecret" nil }}
  {{- range $ns := list "drone-pipelines" "otomi" "maintenance" }}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: gcr-json-key
      namespace: {{ $ns }}
    type: kubernetes.io/dockerconfigjson
    data:
      .dockerconfigjson: {{ $v.otomi.pullSecret }}
  {{- end }}
  {{- end }}
  - apiVersion: scheduling.k8s.io/v1
    kind: PriorityClass
    metadata:
      name: otomi-critical
    value: 1000000
    globalDefault: false
    description: "This priority class should be used for Otomi High priority service pods only."
