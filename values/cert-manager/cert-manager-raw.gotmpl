{{- $v := .Environment.Values }}
{{- $cm := index $v.charts "cert-manager" }}
{{- $dnsProvider := $v.cluster | get "dnsProvider" $v.cluster.provider }}
{{- $certTpl := readFile "../../helmfile.d/snippets/certificate.gotmpl" }}
{{- $vars := tpl (readFile "../../helmfile.d/snippets/domains.gotmpl") $v | fromYaml }}
resources:
{{- if eq $dnsProvider "azure" }}
  {{- $ap := $cm.provider.azure.azuredns }}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: {{ $ap.clientSecretSecretRef.name }}
    data:
      {{ $ap.clientSecretSecretRef.key }}: "{{ $cm.azureClientSecret | b64enc }}"
{{- end }}
{{- if eq $dnsProvider "google" }}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: cloud-dns-key
    data:
      key.json: "{{ $v | getOrNil "clouds.google.cloudDnsKey" | b64enc }}"
{{- end }}
{{- range $stage := (list "staging" "production") }}
  - apiVersion: cert-manager.io/v1alpha2
    kind: ClusterIssuer
    metadata:
      name: letsencrypt-{{ $stage }}
    spec:
      acme:
        server: https://acme{{ (eq $stage "staging") | ternary "-staging" "" }}-v02.api.letsencrypt.org/directory
        email: {{ $cm.email }}
        privateKeySecretRef:
          name: letsencrypt-{{ $stage }}
        solvers:
          - selector: {}
            dns01:
              {{- index $cm.provider $dnsProvider | toYaml | nindent 14 }}
{{- end }}
# generate all da certs
{{- range $domInfo := $vars.domains }}
  {{- if not $domInfo.hasCert }}
    {{- $certName := ($domInfo.domain | replace "." "-") }}
  - {{ tpl $certTpl (merge (dict "domain" $domInfo.domain "name" $certName "stage" $cm.stage) $v) | nindent 4 }}
  {{- end }}
{{- end }}
