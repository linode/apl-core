{{- $v := .Values }}
{{- $cm := index $v.apps "cert-manager" }}
{{- $dns := $v | get "dns" dict }}
{{- $p := $dns | get "provider" dict }}
{{- $issuerName := ternary (printf "%s-%s" $cm.issuer ($cm | get "stage" "")) $cm.issuer (eq $cm.issuer "letsencrypt") }}
resources:

{{- if and $v.otomi.hasExternalDNS (or (not (hasKey $p "aws")) ($p | get "aws.credentials.secretKey" nil)) }}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: "external-dns"
    data:
      {{- if hasKey $p "google" }}
      secret: "{{ $p.google.serviceAccountKey | b64enc }}"
      {{- else if hasKey $p "azure-private-dns" }}
      secret: "{{ $p | get "azure-private-dns.aadClientSecret" | b64enc }}"
      {{- else if hasKey $p "azure" }}
      secret: "{{ $p.azure.aadClientSecret | b64enc }}"
      {{- else if and (hasKey $p "aws") ($p | get "aws.credentials.secretKey" nil) }}
      secret: "{{ $p.aws.credentials.secretKey | b64enc }}"
      {{- else if hasKey $p "digitalocean" }}
      secret: "{{ $p.digitalocean.apiToken | b64enc }}"
      {{- else if hasKey $p "civo" }}
      secret: "{{ $p.civo.apiToken | b64enc }}"
      {{- else if hasKey $p "cloudflare" }}
      secret: "{{ $p.cloudflare.apiToken | b64enc }}"
      {{- else if hasKey $p "linode" }}
      secret: "{{ $p.linode.apiToken | b64enc }}"
      {{- end }}
{{- end }}
  - apiVersion: cert-manager.io/v1
    kind: ClusterIssuer
    metadata:
      name: custom-ca
    spec:
      ca:
        secretName: custom-ca
{{- if eq $cm.issuer "letsencrypt" }}
  - apiVersion: cert-manager.io/v1
    kind: ClusterIssuer
    metadata:
      name: {{ $issuerName }}
    spec:
      acme:
        server: https://acme{{ (eq ($cm | get "stage" "") "staging") | ternary "-staging" "" }}-v02.api.letsencrypt.org/directory
        email: {{ $cm.email }}
        privateKeySecretRef:
          name: {{ $issuerName }}
        solvers:
          - selector: {}
            dns01:
              {{- with $p | get "aws" nil }}
              route53:
                {{- with . | get "credentials.accessKey" nil }}
                accessKeyID: {{ . }}
                {{- end }}
                {{- if . | get "credentials.secretKey" nil }}
                secretAccessKeySecretRef:
                  key: secret
                  name: external-dns
                {{- end }}
                region: {{ .region }}
                {{- with . | get "role" nil }}
                role: {{ . }}
                {{- end }}
              {{- end }}
              {{- with $p | get "azure" nil }}
              azureDNS:
                resourceGroupName: {{ .resourceGroup }}
                subscriptionID: {{ .subscriptionId }}
                {{- if hasKey . "aadClientId" }}
                tenantID: {{ .tenantId }}
                clientID: {{ .aadClientId }}
                {{- end }}
                {{- with . | get "hostedZoneName" nil }}
                hostedZoneName: {{ . }}
                {{- end }}
                clientSecretSecretRef:
                  key: secret
                  name: external-dns
              {{- end }}
              {{- with $p | get "azure-private-dns" nil }}
              azureDNS:
                resourceGroupName: {{ .resourceGroup }}
                subscriptionID: {{ .subscriptionId }}
                {{- if hasKey . "aadClientId" }}
                tenantID: {{ .tenantId }}
                clientID: {{ .aadClientId }}
                {{- end }}
                {{- with . | get "hostedZoneName" nil }}
                hostedZoneName: {{ . }}
                {{- end }}
                clientSecretSecretRef:
                  key: secret
                  name: external-dns
              {{- end }}
              {{- with $p | get "cloudflare" nil }}
              cloudflare:
                {{- with . | get "apiToken" nil }}
                apiTokenSecretRef:
                {{- end }}
                {{- with . | get "apiSecret" nil }}
                apiKeySecretRef:
                {{- end }}
                  key: secret
                  name: external-dns
              {{- end }}
              {{- with $p | get "digitalocean" nil }}
              digitalocean:
                tokenSecretRef:
                  key: secret
                  name: external-dns
              {{- end }}
              {{- with $p | get "civo" nil }}
              webhook:
                solverName: "civo"
                groupName: civo.webhook.okteto.com
                config:
                  secretKey: secret
                  secretName: external-dns
              {{- end }}
              {{- with $p | get "linode" nil }}
              webhook:
                solverName: "linode"
                groupName: acme.slicen.me
                config:
                  secretKey: secret
                  secretName: external-dns
              {{- end }}
              {{- with $p | get "google" nil }}
              cloudDNS:
                project: {{ .project }}
                serviceAccountSecretRef:
                  key: secret
                  name: external-dns
              {{- end }}
              {{- with $p | get "other" nil }}
              {{- toYaml . | get "cert-manager" nindent 14 }}
              {{- end }}
{{- end }}
{{- if eq $cm.issuer "byo-wildcard-cert" }}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: otomi-byo-wildcard-cert
      namespace: istio-system
    type: kubernetes.io/tls
    data:
      tls.crt: {{ $cm.byoWildcardCert | b64enc }}
      tls.key: {{ $cm.byoWildcardCertKey | b64enc }}
{{- end }}
{{- if or (eq $cm.issuer "letsencrypt" ) (eq $cm.issuer "custom-ca" ) }}
  - apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: otomi-wildcard
      namespace: istio-system
    spec:
      secretName: otomi-cert-manager-wildcard-cert
      commonName: '*.{{ $v.cluster.domainSuffix }}'
      dnsNames:
      - '*.{{ $v.cluster.domainSuffix }}'
      issuerRef:
        kind: ClusterIssuer
        name: {{ $issuerName }}
      usages:
        {{- if eq $issuerName "custom-ca" }}
        - server auth
        {{- else }}
        - digital signature
        - key encipherment
        - ocsp signing
        {{- end }}
{{- end }}