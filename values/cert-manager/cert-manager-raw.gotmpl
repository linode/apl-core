{{- $v := .Environment.Values }}
{{- $cm := index $v.charts "cert-manager" }}
{{- $dns := $v.dns }}
{{- $certTpl := readFile "../../helmfile.d/snippets/certificate.gotmpl" }}
{{- $vars := tpl (readFile "../../helmfile.d/snippets/domains.gotmpl") $v | fromYaml }}

resources:
{{- if or (hasKey $dns "azure") (hasKey $dns "google") }}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: "dns-secret"
    data:
      {{- if hasKey $dns "google" }}
      secret: "{{ $dns.google.cloudDnsKey | b64enc }}"
      {{- else if hasKey $dns "azure" }}
      # TODO: is aadClientSecret  same as azureClientSecret ?
      secret: "{{ $dns.azure.aadClientSecret | b64enc }}"
      {{- else if hasKey $dns "aws" }}
      # aws via service account access not yet implemented, expecting role to be on node
      {{- end }}
{{- end }}
{{- range $stage := (list "staging" "production") }}
  - apiVersion: cert-manager.io/v1alpha2
    kind: ClusterIssuer
    metadata:
      name: letsencrypt-{{ $stage }}
    spec:
      acme:
        server: https://acme{{ (eq $stage "staging") | ternary "-staging" "" }}-v02.api.letsencrypt.org/directory
        email: {{ $cm.email }}
        privateKeySecretRef:
          name: letsencrypt-{{ $stage }}
        solvers:
          - selector: {}
            dns01:
              {{- if hasKey $dns "aws" }}
              route53:
                region: {{ $dns.aws.region }}
              {{- else if hasKey $dns "azure" }}
              azuredns:
                clientID: {{ $dns.azure.aadClientId }}
                clientSecretSecretRef:
                  key: secret
                  name: "dns-secret"
                {{- if hasKey $dns.azure "hostedZoneName" }}
                hostedZoneName: {{ $dns.azure.hostedZoneName }}
                {{- end }}
                resourceGroupName: {{ $dns.azure.resourceGroup }}
                subscriptionID: {{ $dns.azure.subscriptionId }}
                tenantID: {{ $dns.azure.tenantId }}
              {{- else if hasKey $dns "google" }}
              clouddns:
                project: {{ $dns.google.projectId }}
                serviceAccountSecretRef:
                  key: secret
                  name: "dns-secret"
              {{- end }}


{{- end }}
# generate all da certs
{{- range $domInfo := $vars.domains }}
  {{- if not $domInfo.hasCert }}
    {{- $certName := ($domInfo.domain | replace "." "-") }}
  - {{ tpl $certTpl (merge (dict "domain" $domInfo.domain "name" $certName "stage" $cm.stage) $v) | nindent 4 }}
  {{- end }}
{{- end }}
