{{- $v := .Environment.Values }}
{{- $h := $v.charts | get "harbor" dict }}
{{- $hp := $v.charts.harbor.persistence }}
{{- $harborDomain := printf "harbor.%s" $v.cluster.domain }}
{{- $notaryDomain := printf "notary.%s" $v.cluster.domain }}
{{- $harborSecretName := ($harborDomain | replace "." "-") }}
{{- $notarySecretName := ($notaryDomain | replace "." "-") }}
{{- $externalUrl := printf "https://%s" $harborDomain }}
 # logLevel - debug, info, warning, error or fatal
logLevel: info
nameOverride: harbor
fullnameOverride: harbor
notary:
  enabled: false
  secretName: {{ $notarySecretName }}
trivy:
  automountServiceAccountToken: true
expose:
  type: clusterIP
  tls:
    enabled: false
internalTLS:
  # we use istio with mTLS enabled for harbor namespace
  enabled: false
nginx:
  podAnnotations:
    sidecar.istio.io/inject: "false"
core:
  xsrfKey: {{ $h | get "core.xsrfKey" "UeaJg4EzsYnryRdcYdyXiFvlIFaDlspshfd" }}
  secret: {{ $h | get "core.secret" "9gfm2350fg3fg3m8" }}
  secretName: {{ $harborSecretName }}
  resources:
    {{- if (hasKey $h "resources.core") }}
      {{- $h.resources.core | toYaml | nindent 4 }}
    {{- else }}
    requests:
      memory: 256Mi
      cpu: 50m
    limits:
      memory: 512Mi
      cpu: 100m
    {{- end }}
jobservice:
  secret: {{ $h | get "jobservice.secret" "mnf9adfgjwr23m4d" }}
  resources:
    {{- if (hasKey $h "resources.jobservice") }}
      {{- $h.resources.jobservice | toYaml | nindent 2 }}
    {{- else }}
    requests:
      memory: 256Mi
      cpu: 50m
    limits:
      memory: 512Mi
      cpu: 100m
    {{- end }}
# If Harbor is deployed behind the proxy, set it as the URL of proxy
externalURL: {{ $externalUrl }}
persistence:
  enabled: true
  # resourcePolicy: 'keep'
  persistentVolumeClaim:
    registry:
      # Use the existing PVC which must be created manually before bound,
      # and specify the 'subPath' if the PVC is shared with other components
      existingClaim: ''
      # Specify the 'storageClass' used to provision the volume. Or the default
      # StorageClass will be used(the default).
      # Set it to '-' to disable dynamic provisioning
      storageClass: ''
      subPath: ''
      accessMode: ReadWriteOnce
      size: 10Gi
    chartmuseum:
      existingClaim: ''
      storageClass: ''
      subPath: ''
      accessMode: ReadWriteOnce
      size: 5Gi
    jobservice:
      existingClaim: ''
      storageClass: ''
      subPath: ''
      accessMode: ReadWriteOnce
      size: 1Gi
    # If external database is used, the following settings for database will
    # be ignored
    database:
      existingClaim: ''
      storageClass: ''
      subPath: ''
      accessMode: ReadWriteOnce
      size: 1Gi
    # If external Redis is used, the following settings for Redis will
    # be ignored
    redis:
      existingClaim: ''
      storageClass: ''
      subPath: ''
      accessMode: ReadWriteOnce
      size: 1Gi
    trivy:
      existingClaim: ''
      storageClass: ''
      subPath: ''
      accessMode: ReadWriteOnce
      size: 5Gi
  # Define which storage backend is used for registry and chartmuseum to store
  # images and charts. Refer to
  # https://github.com/docker/distribution/blob/master/docs/configuration.md#storage
  # for the detail.
  imageChartStorage:
    {{ $imageChartStorageType := $hp.imageChartStorage | get "type" "filesystem" }}
    type: {{ $imageChartStorageType }}
    {{ $imageChartStorageType }}: {{- toYaml ($hp.imageChartStorage | get $imageChartStorageType dict) | nindent 6 }}

# The initial password of Harbor admin. Change it from portal after launching Harbor
harborAdminPassword: '{{ $h | get "adminPassword" "bladibla" }}'
# The secret key used for encryption. Must be a string of 16 chars.
secretKey: '{{ $h.secretKey }}'

# The proxy settings for updating clair vulnerabilities from the Internet and replicating
# artifacts from/to the registries that cannot be reached directly
proxy:
  httpProxy:
  httpsProxy:
  noProxy: 127.0.0.1,localhost,.local,.internal
  components:
    - core
    - jobservice
    - clair

registry:
  secret: q1g9gwm35g8k458b
  registry:
    image:
      repository: goharbor/registry-photon
      tag: v2.0.0
    resources:
      requests:
        memory: 64Mi
        cpu: 50m
      limits:
        memory: 128Mi
        cpu: 100m
  controller:
    image:
      repository: goharbor/harbor-registryctl
      tag: v2.0.0
    resources:
      {{- if (hasKey $h "resources.controller") }}
        {{- $h.resources.controller | toYaml | nindent 6 }}
      {{- else }}
      requests:
        memory: 256Mi
        cpu: 50m
      limits:
        memory: 512Mi
        cpu: 100m
      {{- end }}
  # Secret is used to secure the upload state from client
  # and registry storage backend.
  # See: https://github.com/docker/distribution/blob/master/docs/configuration.md#http
  # If a secret key is not specified, Helm will generate one.
  # Must be a string of 16 chars.
  secret: '4j8sdf75dfd8sdfd'
  # If true, the registry returns relative URLs in Location headers. The client is responsible for resolving the correct URL.
  relativeurls: false
  credentials:
    username: {{ $h | get "registry.credentials.username" "admin" }}
    password: {{ $h | get "registry.credentials.password" "bladibla" }}
    htpasswd: {{ $h | get "registry.credentials.htpasswd" "admin:$2y$10$WfCM9Hs6dxe/HXloj.xOruwKZb.U18hwhCSGymZ40Z0Is5e/KMteS" }}

database:
  type: internal
  internal:
    image:
      repository: goharbor/harbor-db
      tag: v2.0.0
    # password: "sd83jf7s"
    resources:
      {{- if (hasKey $h "resources.database") }}
        {{- $h.resources.database | toYaml | nindent 6 }}
      {{- else }}
      requests:
        memory: 256Mi
        cpu: 50m
      limits:
        memory: 512Mi
        cpu: 500m
      {{- end }}

clair:
  clair:
    resources:
      {{- if (hasKey $h "resources.clair") }}
        {{- $h.resources.clair | toYaml | nindent 6 }}
      {{- else }}
      requests:
        cpu: 100m 
        memory: 1Gi
      limits:
        cpu: 400m
        memory: 2Gi
      {{- end }}
  adapter:
    resources:
      {{- if (hasKey $h "resources.adapter") }}
        {{- $h.resources.adapter | toYaml | nindent 6 }}
      {{- else }}
      requests:
        cpu: 100m 
        memory: 256Mi
      limits:
        cpu: 400m
        memory: 256Mi
      {{- end }}

chartmuseum:
  resources:
    {{- if (hasKey $h "resources.chartmuseum") }}
      {{- $h.resources.chartmuseum | toYaml | nindent 4 }}
    {{- else }}
    requests:
      cpu: 100m 
      memory: 128Mi
    limits:
      cpu: 400m
      memory: 256Mi
    {{- end }}

portal:
  resources:
    {{- if (hasKey $h "resources.portal") }}
      {{- $h.resources.portal | toYaml | nindent 4 }}
    {{- else }}
    requests:
      cpu: 100m 
      memory: 128Mi
    limits:
      cpu: 400m
      memory: 128Mi
    {{- end }}

redis:
  internal:
    resources:
      requests:
        cpu: 100m 
        memory: 128Mi
      limits:
        cpu: 400m
        memory: 128Mi

