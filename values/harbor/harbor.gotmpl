{{- $v := .Values }}
{{- $h := $v.apps.harbor }}
{{- $db := $v.databases.harbor }}
{{- $obj := $v.obj.provider }}
{{- $harborDomain := printf "harbor.%s" $v.cluster.domainSuffix }}
{{- $notaryDomain := printf "notary.%s" $v.cluster.domainSuffix }}
{{- $harborSecretName := ($harborDomain | replace "." "-") }}
{{- $notarySecretName := ($notaryDomain | replace "." "-") }}
{{- $externalUrl := printf "https://%s" $harborDomain }}
{{/*The cloudNativeDb operator is responsible for creating the secret*/}}

externalURL: {{ $externalUrl }}
fullnameOverride: harbor
# logLevel - debug, info, warning, error or fatal
logLevel: warning

harborAdminPassword: {{ $h.adminPassword | quote }}
nameOverride: harbor
secretKey: {{ $h | get "secretKey" nil }}

updateStrategy:
    type: Recreate

core:
  secretName: harbor-token-service-ca
  priorityClassName: otomi-critical
    {{- if $v.otomi.linodeLkeImageRepository }}
  image:
    repository: "{{- $v.otomi.linodeLkeImageRepository }}/docker/goharbor/harbor-core"
    {{- end }}

  resources: {{- $h.resources.core | toYaml | nindent 4 }}
  secret: {{ $h | get "core.secret" nil | quote }}
  # secretName: {{ $harborSecretName }}
  xsrfKey: {{ $h | get "core.xsrfKey" nil }}

database:
  maxOpenConns: 32
  maxIdleConns: 6
  type: external
  external:
    # erase default password value from the Harbor Helm chart
    password: null
    coreDatabase: {{ $db.coreDatabase }}
    username: harbor
    host: harbor-otomi-db-rw.harbor.svc.cluster.local
    existingSecret: harbor-otomi-db-app

exporter:
  priorityClassName: otomi-critical
    {{- if $v.otomi.linodeLkeImageRepository }}
  image:
    repository: "{{- $v.otomi.linodeLkeImageRepository }}/docker/goharbor/harbor-exporter"
    {{- end }}

expose:
  tls:
    enabled: false
  type: clusterIP

jobservice:
  priorityClassName: otomi-critical
    {{- if $v.otomi.linodeLkeImageRepository }}
  image:
    repository: "{{- $v.otomi.linodeLkeImageRepository }}/docker/goharbor/harbor-jobservice"
    {{- end }}

  jobLoggers:
    - stdout
  resources: {{- $h.resources.jobservice | toYaml | nindent 4 }}
  secret: {{ $h | get "jobservice.secret" nil | quote }}

metrics:
  serviceMonitor:
    enabled: true
    additionalLabels:
      prometheus: system

nginx:
  resources: {{- $h.resources.nginx | toYaml | nindent 4 }}
    {{- if $v.otomi.linodeLkeImageRepository }}
  image:
    repository: "{{- $v.otomi.linodeLkeImageRepository }}/docker/goharbor/nginx-photon"
    {{- end }}

persistence:
  enabled: true
  persistentVolumeClaim:
    registry:
      # Use the existing PVC which must be created manually before bound,
      # and specify the 'subPath' if the PVC is shared with other components
      storageClass: {{ $v.cluster.defaultStorageClass }}
      existingClaim: ''
      subPath: ''
      accessMode: ReadWriteOnce
      size: 10Gi
    jobservice:
      storageClass: {{ $v.cluster.defaultStorageClass }}
      existingClaim: ''
      subPath: ''
      accessMode: ReadWriteOnce
      size: 1Gi
    # If external database is used, the following settings for database will
    # be ignored
    database:
      storageClass: {{ $v.cluster.defaultStorageClass }}
      existingClaim: ''
      subPath: ''
      accessMode: ReadWriteOnce
      size: 1Gi
    # If external Redis is used, the following settings for Redis will
    # be ignored
    redis:
      storageClass: {{ $v.cluster.defaultStorageClass }}
      existingClaim: ''
      subPath: ''
      accessMode: ReadWriteOnce
      size: 1Gi
    trivy:
      storageClass: {{ $v.cluster.defaultStorageClass }}
      existingClaim: ''
      subPath: ''
      accessMode: ReadWriteOnce
      size: 5Gi
  imageChartStorage:
    {{- if eq $obj.type "minioLocal" "linode" }}
    disableredirect: true
    type: s3
    s3:
      {{- if eq $obj.type "minioLocal" }}
      bucket: harbor
      region: us-east-1
      regionendpoint: http://minio.minio.svc.cluster.local:9000
      accesskey: otomi-admin
      secretkey: {{ $v.otomi.adminPassword | quote }}
      secure: false
      v4auth: true
      {{- end }}
      {{- if eq $obj.type "linode" }}
      bucket: {{ $obj.linode.buckets.harbor }}
      regionendpoint: https://{{ $obj.linode.region }}.linodeobjects.com
      accesskey: {{ $obj.linode.accessKeyId }}
      secretkey: {{ $obj.linode.secretAccessKey | quote }}
      region: {{ $obj.linode.region }}
      encrypt: false
      secure: true
      v4auth: true
      # By bumping the `multipartcopythresholdsize` option to 5GiB (up from its default
      # of 32Mib), Distribution will only initiate an asynchronous server-side COPY
      # operation once the blob is 5GiB in size. This effectively means there will be no
      # more 403 Forbidden errors from Object Storage unless a layer/blob is > 5GiB in size
      multipartcopythresholdsize: "5368709120"
      {{- end }}
    {{- else }}
    type: filesystem
    {{- end }}

portal:
  priorityClassName: otomi-critical
  {{- if $v.otomi.linodeLkeImageRepository }}
  image:
    repository: "{{- $v.otomi.linodeLkeImageRepository }}/docker/goharbor/harbor-portal"
  {{- end }}
  resources: {{- $h.resources.portal | toYaml | nindent 4 }}

redis:
  internal:
    priorityClassName: otomi-critical
    {{- if $v.otomi.linodeLkeImageRepository }}
    image:
      repository: "{{- $v.otomi.linodeLkeImageRepository }}/docker/goharbor/redis-photon"
    {{- end }}
    resources: {{- $h.resources.redis | toYaml | nindent 6 }}

registry:
  priorityClassName: otomi-critical
  secret: {{ $h | get "registry.secret" nil | quote }}

  registry:
      {{- if $v.otomi.linodeLkeImageRepository }}
    image:
      repository: "{{- $v.otomi.linodeLkeImageRepository }}/docker/goharbor/registry-photon"
      {{- end }}
    resources: {{- $h.resources.registry | toYaml | nindent 6 }}
  controller:
      {{- if $v.otomi.linodeLkeImageRepository }}
    image:
      repository: "{{- $v.otomi.linodeLkeImageRepository }}/docker/goharbor/harbor-registryctl"
      {{- end }}
    resources: {{- $h.resources.registryController | toYaml | nindent 6 }}
  relativeurls: false
  credentials:
    username: {{ $h.registry.credentials.username }}
    password: {{ $h.registry.credentials.password | quote }}
    htpasswdString: {{ $h.registry.credentials.htpasswd }}

trivy:
  priorityClassName: otomi-critical

    {{- if $v.otomi.linodeLkeImageRepository }}
  image:
    repository: "{{- $v.otomi.linodeLkeImageRepository }}/docker/goharbor/trivy-adapter-photon"
    {{- end }}
  resources:
    {{- $h.resources.trivy | toYaml  | nindent 4 }}
  automountServiceAccountToken: true

{{- with .Values.otomi | get "globalPullSecret" nil }}
imagePullSecrets:
  - name: otomi-pullsecret-global
{{- end }}
