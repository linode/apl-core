{{- $v := .Values }}
{{- $h := $v.apps.harbor }}
{{- $cnpg := $v.apps.cnpg }}
{{- $sp := $cnpg.storage }}
{{- $b := $v.platformBackups.database.harbor }}

name: {{ $h.database.name }}
storage:
  size: {{ $h.database.size }}

{{- if $b.enabled }}
backup:
  enabled: {{ $b.enabled }}
  schedule: {{ $b.schedule }}

clusterBackup:
{{- if eq $sp.type "minioLocal" }}
  backup:
    retentionPolicy: {{ $b.retentionPolicy }}
    barmanObjectStore:
      destinationPath: s3://database
      endpointURL: "http://minio.minio.svc.cluster.local:9000"
      s3Credentials:
        accessKeyId:
          name: minio-creds
          key: MINIO_ACCESS_KEY
        secretAccessKey:
          name: minio-creds
          key: MINIO_SECRET_KEY
{{- end }}
{{- if eq $sp.type "azure" }}
  backup:
    retentionPolicy: {{ $b.retentionPolicy }}
    barmanObjectStore:
      destinationPath: "https://{{ $sp.azure.accountName }}.blob.core.windows.net/{{ $sp.azure.containerName }}"
      azureCredentials:
        storageAccount:
          name: azure-creds
          key: AZURE_STORAGE_ACCOUNT
        storageKey:
          name: azure-creds
          key: AZURE_STORAGE_KEY
{{- end }}
{{- if eq $sp.type "s3" }}
  backup:
  retentionPolicy: {{ $b.retentionPolicy }}
    barmanObjectStore:
      destinationPath: s3://{{ $sp.s3.bucket }}
      endpointURL: {{ $sp.s3.s3Url }}
      s3Credentials:
        accessKeyId:
          name: s3-creds
          key: S3_STORAGE_ACCOUNT
        secretAccessKey:
          name: s3-creds
          key: S3_STORAGE_KEY
{{- end }}
{{- if eq $sp.type "gcs" }}
  backup:
    retentionPolicy: {{ $b.retentionPolicy }}
    barmanObjectStore:
      destinationPath: "gs://{{ $sp.gcs.bucket }}"
      googleCredentials:
        applicationCredentials:
          name: gcs-creds
          key: gcsCredentials
{{- end }}
{{- end }}

clusterSpec:  
  bootstrap:
    initdb:
      database: {{ $h.database.coreDatabase }}
      owner: {{ $h.database.user }}
      localeCollate: 'en_US.UTF-8'
      localeCType: 'en_US.UTF-8'