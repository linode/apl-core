{{- $v := .Environment.Values }}
{{- $k := $v | get "charts.keycloak" dict }}
{{- $tc := $v.teamConfig }}
{{- $vault := $v | get "charts.vault" dict }}
{{- $seal := $vault | get "seal"  (dict "type" "default") }}
{{- $kms := $v | get "kms" dict }}
resources:
  - apiVersion: "vault.banzaicloud.com/v1alpha1"
    kind: "Vault"
    metadata:
      name: "vault"
    spec:
      size: 1
      image: vault:1.6.1
      # specify a custom bank-vaults image with bankVaultsImage:
      # bankVaultsImage: ghcr.io/banzaicloud/bank-vaults:latest

      # Common annotations for all created resources
      annotations:
        common/annotation: "true"
      # Vault Pods , Services and TLS Secret annotations
      vaultAnnotations:
        type/instance: "vault"
        # psp-capabilities: IPC_LOCK vault uses it for preventing from flusing memory to swap
        # psp-allowed-users vault needs to run as root because it cuses chwon and IPC_LOCK
        policy.otomi.io/ignore: "banned-image-tags,psp-capabilities,psp-allowed-users"
      resources:
        vault:
          limits:
            cpu: "1"
            memory: 512Mi
          requests:
            cpu: 500m
            memory: 256Mi
      vaultPodSpec:
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
          runAsGroup: 0

      # Marks presence of Istio, which influences things like port namings
      istioEnabled: true
      vaultEnvsConfig:
        - name: VAULT_LOG_LEVEL
          value: {{ $vault | get "logLevel" "info" }}
        - name: VAULT_STORAGE_FILE
          value: "/vault/file"
        {{- if hasKey $kms "azurekeyvault" }}
         # https://docs.microsoft.com/en-us/go/azure/azure-sdk-go-authorization#use-file-based-authentication
        - name: AZURE_TENANT_ID
          value: {{ $kms.azurekeyvault.tenant_id }}
        - name: AZURE_CLIENT_ID
          value: {{ $kms.azurekeyvault.client_id }}
        - name: AZURE_CLIENT_SECRET
          value: {{ $kms.azurekeyvault.client_secret }}
        - name: AZURE_ENVIRONMENT
          value: "AZUREPUBLICCLOUD"
        {{- end }}
        {{- if hasKey $kms "awskms" }}
        - name: AWS_ACCESS_KEY_ID
          value: {{ $kms.awskms.access_key }}
        - name: AWS_SECRET_ACCESS_KEY
          value: {{ $kms.awskms.secret_key }}
        {{- end }}

        # - name: SKIP_CHOWN
        #   value: "true"
        # - name: SKIP_SETCAP
        #   value: "true"

      # Vault Configurer Pods and Services annotations
      vaultConfigurerAnnotations:
        type/instance: "vaultconfigurer"
      # Vault Pods , Services and TLS Secret labels

      vaultConfigurerPodSpec:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534

      vaultLabels: {}

      # Vault Configurer Pods and Services labels
      vaultConfigurerLabels: {}

      # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
      serviceAccount: vault

      # Specify the Service's type where the Vault Service is exposed
      # Please note that some Ingress controllers like https://github.com/kubernetes/ingress-gce
      # forces you to expose your Service on a NodePort
      serviceType: ClusterIP
      # Use local disk to store Vault file data, see config section.
      volumes:
        - name: vault-file
          persistentVolumeClaim:
            claimName: vault-file

      volumeMounts:
        - name: vault-file
          mountPath: /vault/file
      # Support for distributing the generated CA certificate Secret to other namespaces.
      # Define a list of namespaces or use ["*"] for all namespaces.
      caNamespaces: []

      # Describe where you would like to store the Vault unseal keys and root token.
      unsealConfig:
        options:
          # The preFlightChecks flag enables unseal and root token storage tests
          preFlightChecks: true
        kubernetes:
          # WARNING: It is not supported to change the secrets namespace once initialization happened. If you change it in the CR you have to move secrets to new namesoace manually.
          secretNamespace: vault

      # A YAML representation of a final vault config file.
      # See https://www.vaultproject.io/docs/configuration/ for more information.
      config:
        storage:
          file:
            path: "${ .Env.VAULT_STORAGE_FILE }" # An example how Vault config environment interpolation can be used

        # https://www.vaultproject.io/docs/configuration/seal
        {{- if hasKey $seal "kmsKeyId" }}
        seal:
          {{- if hasKey $kms "azurekeyvault" }}
          # https://www.vaultproject.io/docs/configuration/seal/azurekeyvault
          azurekeyvault:
            vault_name: {{ $kms.azurekeyvault.vault_name }}
            key_name: {{ $seal.kmsKeyId }}
          {{- else if hasKey $kms "awskms" }}
          # https://www.vaultproject.io/docs/configuration/seal/awskms
          awskms:
            region: {{ $kms.awskms.region }}
            kms_key_id: {{ $seal.kmsKeyId }}
            endpoint: {{ $kms.awskms.endpoint }}
          {{- else if hasKey $kms "gcpckms" }}
          # https://www.vaultproject.io/docs/configuration/seal/gcpckms
          gcpckms:
            project: {{ $kms.gcpckms.project }}
            region: {{ $kms.gcpckms.region }}
            key_ring:  {{ $kms.gcpckms.key_ring }}
            crypto_key: {{ $seal.kmsKeyId }}
          {{- end }}
        {{- end }}
        listener:
          tcp:
            address: "0.0.0.0:8200"
            tls_disable: true
        telemetry:
          statsd_address: localhost:9125
        ui: true

      # See: https://banzaicloud.com/docs/bank-vaults/cli-tool/#example-external-vault-configuration
      # The repository also contains a lot examples in the deploy/ and operator/deploy directories.
      externalConfig:
        policies:
          - name: allow-read-all-secrets
            rules: path "secret/*" {
                    capabilities = ["read", "list"]
                  }
          - name: allow-list-all-secrets
            rules: path "secret/*" {
                    capabilities = ["list"]
                  }
          - name: allow_sandbox
            rules: path "secret/data/sandbox/*" {
                    capabilities = ["create", "read", "update", "delete", "list"]
                  }
          {{- range $teamId, $team := $tc.teams }}
          - name: allow-team-{{ $teamId }}
            rules: path "secret/data/teams/team-{{ $teamId }}/*" {
                    capabilities = ["create", "update", "read", "delete", "list"]
                  }
          {{- end }}
          - name: allow-all-secrets
            rules: path "secret/*" {
                    capabilities = ["create", "update", "read", "delete", "list"]
                  }
        auth:
          - type: oidc
            config:
              oidc_discovery_url: https://keycloak.{{ $v.dns.domain }}/realms/master
              oidc_client_id: {{ $k.idp.clientID }}
              oidc_client_secret: {{ $k.idp.clientSecret }}
              namespace_in_state: true
              default_role: team
            roles:
            - name: team
              user_claim: email
              groups_claim: groups
              # This policy will be applied to each user that uses this role
              token_policies: [allow-list-all-secrets, allow_sandbox]
              ttl: 1h
              #  http://localhost:8250/oidc/callback - for: vault login -method oidc
              allowed_redirect_uris: "http://localhost:8250/oidc/callback,https://vault.{{ $v.dns.domain }}/ui/vault/auth/oidc/oidc/callback"
          - type: kubernetes
            roles:
              # Allow every pod in the vault namespace to use the secret kv store
              - name: default
                bound_service_account_names: ["kubernetes-external-secrets", "vault", "default"]
                # NOTE: bound_service_account_namespaces - https://github.com/banzaicloud/bank-vaults/issues/1226
                bound_service_account_namespaces: ["shared", "vault"]
                token_policies: ["allow-read-all-secrets"]
                ttl: 1h

        groups:
          {{- range $teamId, $team := $tc.teams }}
          - name: team-{{ $teamId }}
            type: external
            policies: [allow-team-{{ $teamId }}]
            metadata: {}
          {{- end }}
          - name: team-admin
            type: external
            policies: [allow-all-secrets]
            metadata: {}
        group-aliases:
          {{- range $teamId, $team := $tc.teams }}
          - name: team-{{ $teamId }}
            group: team-{{ $teamId }}
            mountpath: oidc/
          {{- end }}
          - name: team-admin
            group: team-admin
            mountpath: oidc/
        secrets:
          - path: secret
            type: kv
            description: General secrets.
            options:
              version: 2

        # Allows writing some secrets to Vault (useful for development purposes).
        # See https://www.vaultproject.io/docs/secrets/kv/index.html for more information.
        startupSecrets:
        {{- range $teamId, $team := $tc.teams }}
          - type: kv
            path: secret/data/teams/team-{{ $teamId }}/otomi-welcome
            data:
              data:
                HELLO: "Welcome {{ $teamId }} team"
        {{- end }}
          - type: kv
            path: secret/data/teams/team-admin/otomi-welcome
            data:
              data:
                HELLO: "Welcome admin team"

      {{- if and (hasKey $seal "kmsKeyId") (hasKey $kms "gcpckms")  }}
      credentialsConfig:
        env: GOOGLE_APPLICATION_CREDENTIALS
        path: /etc/gcp/service-account.json
        secretName: service-account-key
      {{- end }}

  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: vault-file
    spec:
      # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
      # storageClassName: ""
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

{{- if and (hasKey $seal "kmsKeyId") (hasKey $kms "gcpckms")  }}
  - apiVersion: v1
    kind: Secret
    metadata:
      name: service-account-key
    type: Opaque
    data:
      service-account.json: "{{- $kms.gcpckms.kmsAccount | b64enc }}"
{{- end }}

# RBAC
  - kind: ServiceAccount
    apiVersion: v1
    metadata:
      name: vault
  - kind: Role
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: vault
    rules:
      - apiGroups: [""]
        resources: ["secrets"]
        verbs: ["*"]
      - apiGroups: [""]
        resources: ["pods"]
        verbs: ["get", "update", "patch"]
  - kind: RoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: vault
    roleRef:
      kind: Role
      name: vault
      apiGroup: rbac.authorization.k8s.io
    subjects:
      - kind: ServiceAccount
        name: vault
  # This binding allows the deployed Vault instance to authenticate clients
  # through Kubernetes ServiceAccounts (if configured so).
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: vault-auth-delegator
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: system:auth-delegator
    subjects:
      - kind: ServiceAccount
        name: vault
        namespace: vault
