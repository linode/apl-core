{{- $v := .Values }}
{{- $k := $v.apps.knative -}}
{{- $knativeServingVersion := "1.18" -}}
{{- $tag := "v1.18.1" -}}
{{- $netIstioTag := "v1.18.0" -}}
apiVersion: operator.knative.dev/v1beta1
kind: KnativeServing
metadata:
  name: knative-serving
  namespace: knative-serving
spec:
  {{- if $v.otomi.linodeLkeImageRepository }}
  # Use private repository configuration when ORCS is enabled
  # https://knative.dev/docs/install/operator/configuring-serving-cr/#private-repository-and-private-secrets
  registry:
    default: "{{ $v.otomi.linodeLkeImageRepository }}/gcr/knative-releases/knative.dev/serving/cmd/${NAME}:{{ $tag }}"
    override:
      # Overriding paths for images not under "gcr.io/knative-releases/knative.dev/serving/cmd" otherwise the system
      # will try to pull them from "mirrored.registry/knative-releases/knative.dev/serving/cmd" which does not exist.
      migrate: "{{ $v.otomi.linodeLkeImageRepository }}/gcr/knative-releases/knative.dev/pkg/apiextensions/storageversion/cmd/migrate:{{ $tag }}"
      cleanup: "{{ $v.otomi.linodeLkeImageRepository }}/gcr/knative-releases/knative.dev/serving/pkg/cleanup/cmd/cleanup:{{ $tag }}"
      net-istio-controller/controller: "{{ $v.otomi.linodeLkeImageRepository }}/gcr/knative-releases/knative.dev/net-istio/cmd/controller:{{ $netIstioTag }}"
      net-istio-webhook/webhook: "{{ $v.otomi.linodeLkeImageRepository }}/gcr/knative-releases/knative.dev/net-istio/cmd/webhook:{{ $netIstioTag }}"
  {{- end }}
  version: "{{ $knativeServingVersion }}"
  {{- if $v._derived.untrustedCA }}
  controller-custom-certs:
    name: certs
    type: Secret
  {{- end }}
  high-availability:
    replicas: {{ $k.serving.replicas }}
  workloads:
  - name: controller
    resources:
    - container: controller
      {{- $k.resources.controller | toYaml | nindent 6 }}
  - name: activator
    resources:
    - container: activator
      {{- $k.resources.activator | toYaml | nindent 6 }}
  - name: webhook
    resources:
    - container: webhook
      {{- $k.resources.webhook | toYaml | nindent 6 }}
  - name: autoscaler
    resources:
    - container: autoscaler
      {{- $k.resources.autoscaler | toYaml | nindent 6 }}
  - name: autoscaler-hpa
    resources:
    - container: autoscaler-hpa
      {{- $k.resources.autoscalerHpa | toYaml | nindent 6 }}
  config:
    defaults:
      revision-timeout-seconds: "300"
      enable-service-links: "false"
    network:
      domain-template: "{{`{{.Name}}`}}-{{`{{.Namespace}}`}}.{{`{{.Domain}}`}}"
    autoscaler:
      stable-window: 600s
      scale-to-zero-grace-period: 60s
    deployment:
      registriesSkippingTagResolving: "ko.local,dev.local,docker.io,index.docker.io,gcr.io,azurecr.io"
      queue-sidecar-cpu-request: "{{ $k.resources.queueSidecar.requests.cpu }}"
      queue-sidecar-cpu-limit: "{{ $k.resources.queueSidecar.limits.cpu }}"
      queue-sidecar-memory-request: "{{ $k.resources.queueSidecar.requests.memory }}"
      queue-sidecar-memory-limit: "{{ $k.resources.queueSidecar.limits.memory }}"
    domain:
      {{ $v.cluster.domainSuffix }}: ''
    istio:
      gateway.knative-serving.knative-ingress-gateway: {{ $v._derived.ingressPublicGatewayName }}.istio-system.svc.cluster.local
    features:
      podspec-securitycontext: enabled
  ingress:
    istio:
      enabled: true
      knative-ingress-gateway:
        selector:
          istio: {{ $v._derived.defaultIngressGatewayLabel }}
