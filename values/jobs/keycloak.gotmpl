{{- $v := .Values }}
{{- $o := $v | get "oidc" dict }}
{{- $teams := $v.teamConfig.teams }}
{{- $teamNames := list }}
{{- $teamsMapping := dict }}
{{- $teamIds := list }}
{{- range $name, $team := $teams }}
{{- $teamIds = append $teamIds $name }}
{{- $teamNames = print "team-" $name | append $teamNames }}
{{- if ($team | get "oidc.groupMapping" nil) }}
{{- $teamsMapping = set $teamsMapping (printf "team-%s" $name) $team.oidc.groupMapping }}
{{- end }}
{{- end }}
{{- $c := $v.charts }}
{{- $cm := $c | get "cert-manager" }}
{{- $k := $c.keycloak }}
{{- $stage := $c | get "cert-manager.stage" }}
{{- $hasStagingCerts := eq $stage "staging" }}
{{- $tag := "v0.2.14" }}
{{- $pullPolicy := ternary "IfNotPresent" "Always" (regexMatch "^v\\d" $tag) }}
type: Job
runPolicy: Always
description: Configure OIDC as a primary authentication method and populate teams to harbor projects
annotations:
  {{- if $v | get "policies.banned-image-tags.tags" | has $v.otomi.version }}
  policy.otomi.io/ignore: "banned-image-tags"
  {{- end }}
init:
  - image:
      repository: otomi/core
      tag: {{ $v.otomi.version }}
      pullPolicy: {{ $v.derived.otomiPullPolicy }} 
    {{ if $hasStagingCerts }}
    files:
      /tmp/node/certificates.crt: |
        {{- $v.cluster | get "customRootCa" $v.letsencryptRootCA | nindent 8 }}
        {{- $v.cluster | get "customIntermediateCa" $v.letsencryptCA | nindent 8}}
    {{ end }}
    script: |
      echo "Waiting until keycloak is accessible at https://keycloak.{{ $v.cluster.domainSuffix }}"
      {{ if $hasStagingCerts }}NODE_EXTRA_CA_CERTS=/tmp/node/certificates.crt {{ end }}binzx/otomi wait-for https://keycloak.{{ $v.cluster.domainSuffix }}
image:
  repository: otomi/tasks
  tag: {{ $tag }}
  pullPolicy: {{ $pullPolicy }}
name: keycloak
env:
  KEYCLOAK_ADDRESS: https://keycloak.{{ $v.cluster.domainSuffix }}
  KEYCLOAK_THEME_LOGIN: {{ $k | get "theme" "otomi" }}
nativeSecrets:
  DEBUG: '*'
  KEYCLOAK_ADDRESS: https://keycloak.{{ $v.cluster.domainSuffix }}
  KEYCLOAK_ADMIN: {{ $k | get "admin.username" "admin" }}
  KEYCLOAK_ADMIN_PASSWORD: {{ $k | get "adminPassword" $v.otomi.adminPassword }}
  KEYCLOAK_CLIENT_ID: {{ $k.idp.clientID }}
  KEYCLOAK_CLIENT_SECRET: {{ $k.idp.clientSecret }}
  REDIRECT_URIS: '[
      "https://otomi.{{ $v.cluster.domainSuffix }}",
      "https://auth.{{ $v.cluster.domainSuffix }}/*",
      "https://apps.{{ $v.cluster.domainSuffix }}/*",
      "https://otomi.{{ $v.cluster.domainSuffix }}/*",
      "https://gitea.{{ $v.cluster.domainSuffix }}/*",
      {{- range $name, $team := $teams }}
      "https://apps.team-{{ $name }}.{{ $v.cluster.domainSuffix }}/*",
      {{- end }}
      "https://harbor.{{ $v.cluster.domainSuffix }}/*",
      "https://vault.{{ $v.cluster.domainSuffix }}/*"
  ]'
  TEAM_IDS: '{{ $teamIds | toJson }}'
  FEAT_EXTERNAL_IDP: '{{ $v.otomi.hasExternalIDP }}'
  {{- if $v.otomi.hasExternalIDP }}
  IDP_ALIAS: {{ $k | get "idp.alias" "otomi-idp" }}
  IDP_USERNAME_CLAIM_MAPPER: {{ $o | get "usernameClaimMapper" "${CLAIM.email}" }}
  IDP_SUB_CLAIM_MAPPER: {{ $o | get "subClaimMapper" "sub" }}
  IDP_GROUP_MAPPINGS_TEAMS: '{{ $teamsMapping | toJson }}'
  IDP_GROUP_OTOMI_ADMIN: {{ $o | get "adminGroupID" nil }}
  IDP_GROUP_TEAM_ADMIN: {{ $o | get "teamAdminGroupID" nil }}
  IDP_OIDC_URL: {{ $o | get "issuer" nil }}
  IDP_CLIENT_ID: {{ $o | get "clientID" nil }}
  IDP_CLIENT_SECRET: {{ $o | get "clientSecret" nil }}
  {{- end }}
{{ if $hasStagingCerts }}
files:
  /tmp/node/certificates.crt: |
    {{- $v.cluster | get "customRootCa" $v.letsencryptRootCA | nindent 4 }}
    {{- $v.cluster | get "customIntermediateCa" $v.letsencryptCA | nindent 4}}
{{ end }}
script: |
  {{ if $hasStagingCerts }}NODE_EXTRA_CA_CERTS=/tmp/node/certificates.crt {{ end }}npm run tasks:keycloak
runPolicy: OnSpecChange
