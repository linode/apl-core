{{- $v := .Values }}
{{- $c := $v.charts }}
{{- $o := $v.oidc }}
{{- $h := $c | get "harbor" dict }}
{{- $k := $c | get "keycloak" dict }}
{{- $ns := $v.otomi.hasCloudLB | ternary "ingress" "istio-system" }}
{{- $stage := $c | get "cert-manager.stage" "production" }}
{{- $hasStagingCerts := eq $stage "staging" }}
{{- $hasKeycloak := $k | get "enabled" true }}
{{- $realm := $k | get "realm" "master" }}
{{- $keycloakIssuer := printf "https://keycloak.%s/realms/%s" $v.cluster.domainSuffix $realm }}
{{- $harborRepo := printf "harbor.%s" $v.cluster.domainSuffix }}
{{- $teams := keys $v.teamConfig.teams }}

type: Job
runPolicy: Always
description: Configure OIDC as a primary auhentication method and populate teams to harbor projects
name: harbor
image:
  repository: otomi/tasks
  tag: v0.2.10
  # pullPolicy: Always
nativeSecrets:
  HARBOR_PASSWORD:  {{ $h | get "adminPassword" $v.otomi.adminPassword  }}
  HARBOR_USER: admin
  OIDC_CLIENT_ID: {{ $hasKeycloak | ternary $k.idp.clientID $o.clientID }}
  OIDC_CLIENT_SECRET: {{ $hasKeycloak | ternary $k.idp.clientSecret $o.clientSecret }}
env:
  DEBUG: '*'
  HARBOR_BASE_URL: http://harbor-core.harbor
  HARBOR_BASE_REPO_URL: {{ $harborRepo }}
  TEAM_IDS: '{{ $teams | sortAlpha | toJson }}'
  OIDC_ENDPOINT: '{{ $hasKeycloak | ternary $keycloakIssuer $o.issuer }}'
  OIDC_GROUPS_CLAIM: groups
  OIDC_NAME: keycloak
  OIDC_SCOPE: openid
  OIDC_VERIFY_CERT: '{{ not $hasStagingCerts }}'
{{ if $hasStagingCerts }}
files:
  /tmp/node/certificates.crt: |
    {{- $v.cluster | get "customRootCa" $v.letsencryptRootCA | nindent 4 }}
    {{- $v.cluster | get "customIntermediateCa" $v.letsencryptCA | nindent 4}}
{{ end }}
script: |
  {{ if $hasStagingCerts }}NODE_EXTRA_CA_CERTS=/tmp/node/certificates.crt {{ end }}npm run tasks:harbor
runPolicy: OnSpecChange