{{- $v := .Values }}
{{- $cm := $v.apps | get "cert-manager" }}
{{- $i := $v.apps.istio }}
{{- $ig := $i | get "global" dict }}
{{- $excludedNamespaces := list "kube-system" }}{{ range $ns := $v.k8s.namespaces }}{{ if $ns | get "disableIstioInjection" nil }}{{ $excludedNamespaces = append $excludedNamespaces $ns.name }}{{ end }}{{ end }}

resources:
  - apiVersion: install.istio.io/v1alpha1
    kind: IstioOperator
    metadata:
      namespace: istio-system
      name: istiocontrolplane
    spec:
      profile: default
      addonComponents:
        grafana:
          enabled: false
        kiali:
          enabled: false
        prometheus:
          enabled: false
        tracing:
          enabled: false
      components:
        cni:
          enabled: false
        pilot:
          k8s:
            podAnnotations:
              policy.otomi.io/ignore: psp-allowed-users
              sidecar.istio.io/inject: "true"
            priorityClassName: otomi-critical
            hpaSpec:
              minReplicas: {{ $i.autoscaling.pilot.minReplicas }}
              maxReplicas: {{ $i.autoscaling.pilot.maxReplicas }}
            resources:
              {{- with $i | get "resources.pilot" nil }}
                {{- toYaml . | nindent 14 }}
              {{- else }}
              limits:
                cpu: '2'
                memory: 2Gi
              requests:
                cpu: 100m
                memory: 128Mi
              {{- end }}
        ingressGateways:
          - name: istio-ingressgateway
            enabled: false
          - name: istio-ingressgateway-public
            enabled: true
            label:
              istio: ingressgateway-public
              app: ingressgateway
            k8s:
              podAnnotations:
                policy.otomi.io/ignore: psp-allowed-users
              priorityClassName: otomi-critical
              resources:
              {{- with $i | get "resources.ingressgateway" nil }}
                {{- toYaml . | nindent 16 }}
              {{- else }}
                limits:
                  cpu: '1'
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              {{- end }}
              hpaSpec:
                minReplicas: {{ $i | get "autoscaling.ingressgateway.minReplicas" }}
                maxReplicas: {{ $i | get "autoscaling.ingressgateway.maxReplicas" }}
              service:
                type: ClusterIP
                ports:
                  - port: 15021
                    name: status-port
                  - port: 80
                    targetPort: 8080
                    name: http2
                  - port: 443
                    targetPort: 8443
                    name: https
                  - port: 15443
                    name: tls
            {{- if eq $v.cluster.provider "azure" }}
              readinessProbe:
                failureThreshold: 20
            {{- end }}
        {{ if $i.egressGateway.enabled }}
        egressGateways:
          - name: istio-egressgateway
            enabled: true
            k8s:
              podAnnotations:
                policy.otomi.io/ignore: psp-allowed-users
              priorityClassName: otomi-critical
              resources:
              {{- with $i | get "resources.egressgateway" nil }}
                {{- toYaml . | nindent 16 }}
              {{- else }}
                limits:
                  cpu: '1'
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              {{- end }}
              hpaSpec:
                minReplicas: {{ $i | get "autoscaling.egressgateway.minReplicas" }}
                maxReplicas: {{ $i | get "autoscaling.egressgateway.maxReplicas" }}
              service:
                type: ClusterIP
                ports:
                  - port: 15021
                    name: status-port
                  - port: 80
                    targetPort: 8080
                    name: http2
                  - port: 443
                    targetPort: 8443
                    name: https
            {{- if eq $v.cluster.provider "azure" }}
              readinessProbe:
                failureThreshold: 20
            {{- end }}
        {{- end }}  
      values:
        cni:
          excludeNamespaces: {{- $excludedNamespaces | toYaml | nindent 12 }}
        global:
          imagePullPolicy: IfNotPresent
          {{- if $v.otomi | get "globalPullSecret" nil }}
          imagePullSecrets:
            - otomi-pullsecret-global
          {{- end }}
          logging:
            level: {{ $ig | get "logging.level" "default:info" }}
          proxy:
            resources:
            {{- with $i | get "resources.proxy" nil }}
              {{- toYaml . | nindent 14 }}
            {{- else }}
              limits:
                cpu: '1'
                memory: 1Gi
              requests:
                cpu: 20m
                memory: 80Mi
            {{- end }}
            autoInject: enabled
          useMCP: false
        meshConfig:
          defaultConfig:
            holdApplicationUntilProxyStarts: true
            gatewayTopology:
              numTrustedProxies: 1
          accessLogFile: /dev/stdout
          {{- if $i.tracing.enabled }}
          accessLogFormat: |
            [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% %RESPONSE_FLAGS% %RESPONSE_CODE_DETAILS% %CONNECTION_TERMINATION_DETAILS% "%UPSTREAM_TRANSPORT_FAILURE_REASON%" %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% "%REQ(X-FORWARDED-FOR)%" "%REQ(USER-AGENT)%" "%REQ(X-REQUEST-ID)%" "%REQ(:AUTHORITY)%" "%UPSTREAM_HOST%" %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME% traceID=%REQ(TRACEPARENT)%
          {{- end }}
          enableAutoMtls: true
          extensionProviders:
          {{- if $i.tracing.enabled }}
          - opentelemetry:
              port: 4317
              service: otel-collector-collector.otel.svc.cluster.local
            name: otel-tracing
          {{- end }}
          {{- with $i | get "extensionProviders" nil }}
          {{- toYaml .| nindent 10 }}
          {{- end }}
        {{- if $v._derived.untrustedCA }}
        pilot:
          jwksResolverExtraRootCA: |
            {{- $v._derived.caCertRoot | nindent 12 }}
        {{- end }}
        sidecarInjectorWebhook:
          enableNamespacesByDefault: false
          injectedAnnotations: 
            policy.otomi.io/ignore.istio-init: psp-allowed-users,psp-capabilities
