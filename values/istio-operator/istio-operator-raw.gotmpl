{{- $v := .Environment.Values }}
{{- $i := $v.charts.istio }}
{{- $k := $v | get "charts.keycloak" dict }}
{{- $realm := $k | get "realm" "master" }}
{{- $o := $v.oidc }}
{{- $provider := index $o $o.provider }}
{{- $ia := $i | get "addonComponents" dict }}
{{- $ig := $i | get "global" dict }}
{{- $iga := $i | get "gateways" dict }}
{{- $appsDomain := printf "apps.%s" $v.cluster.domain }}
resources:
  - apiVersion: install.istio.io/v1alpha1
    kind: IstioOperator
    metadata:
      namespace: istio-system
      name: istiocontrolplane
    spec:
      profile: default
      components:
        ingressGateways:
          - name: istio-ingressgateway
            enabled: true
            k8s:
              service:
                type: ClusterIP
                ports:
                - port: 15020
                  name: status-port
                - port: 80
                  name: http2
                - port: 443
                  name: https
            {{- if eq $v.cluster.provider "azure" }}
              readinessProbe:
                failureThreshold: 20
            {{- end }}
          - name: istio-ingressgateway-auth
            enabled: true
            label:
              istio: ingressgateway-auth
              app: ingressgateway-auth
            k8s:
              service:
                type: ClusterIP
                ports:
                - port: 15020
                  name: status-port
                - port: 80
                  name: http2
                - port: 443
                  name: https
            {{- if eq $v.cluster.provider "azure" }}
            k8s:
              readinessProbe:
                failureThreshold: 20
            {{- end }}
          - name: cluster-local-gateway
            enabled: true
            label:
              istio: cluster-local-gateway
              app: cluster-local-gateway
            k8s:
              service:
                type: ClusterIP
                ports:
                - port: 15020
                  name: status-port
                - port: 80
                  name: http2
                - port: 443
                  name: https
        egressGateways:
          - name: istio-egressgateway
            enabled: false
        # cni:
        #   enabled: true # not working with SDS yet, see: https://github.com/istio/istio/issues/15701
      addonComponents:
        grafana:
          enabled: {{ $ia | get "grafana.enabled" true }}
        prometheus:
          enabled: {{ $ia | get "prometheus.enabled" true }}
        tracing:
          enabled: {{ $ia | get "tracing.enabled" true }}
        kiali:
          enabled: {{ $ia | get "kiali.enabled" true }}
      values:
        kiali:
          contextPath: '/kiali'
          dashboard:
            auth:
              strategy: anonymous #openid
              # openid:
              #   issuer_uri: {{ $provider | getOrNil "issuer" | default (printf "https://keycloak.%s/realms/%s" $v.cluster.domain $realm) }}
              #   client_id: {{ $v.oidc.clientID }}
            jaegerURL: https://{{ $appsDomain }}/tracing/
            grafanaURL: https://{{ $appsDomain }}/grafana-istio/
        gateways:
          istio-ingressgateway:
            sds:
              enabled: {{ $ig | get "sds.enabled" false }}
             {{- with ($iga | getOrNil "istio-ingressgateway.resources") }}
            resources: {{- $iga | get "istio-ingressgateway.resources" | toYaml | nindent 14 }}
            {{- end }}
          # istio-egressgateway:
          #   {{/*- with ($iga | getOrNil "istio-egressgateway.resources") */}}
          #   resources: {{/*- $iga | get "istio-egressgateway.resources" | toYaml | nindent 14 */}}
          #   {{/*- end */}}
        global:
          sds:
            enabled: {{ $ig | get "sds.enabled" false }}
          mtls:
            auto: {{ $ig | get "mtls.enabled" false }}
          # controlPlaneSecurityEnabled: true
          logging:
            level: {{ $ig | get "logging.level" "default:info" }}
          proxy:
            {{- with ($ig | getOrNil "proxy.resources") }}
            resources: {{- $ig.proxy.resources | toYaml | nindent 14 }}
            {{- end }}
            autoInject: enabled
          useMCP: false
        grafana:
          env:
            GF_SERVER_ROOT_URL: /grafana-istio/
          contextPath: '/grafana-istio'
          grafana.ini:
            "auth.anonymous":
              enabled: false
              # enabled: true
              org_role: Admin
              org_name: Main Org.
            "auth.generic_oauth":
              # enabled: false
              enabled: true
              name: OAuth
              org_role: Admin
              allow_sign_up: true
              # allow_sign_up: false
              oauth_auto_login: true # false = so we can login with admin / bladibla
              client_id: {{ $v.oidc.clientID }}
              client_secret: {{ $v.oidc.clientSecret }}
              scopes: openid
              # auth_url: {{ $v.oidc.authUrl }}
              auth_url: https://keycloak.{{ $v.cluster.domain }}/realms/{{ $realm }}/protocol/openid-connect/auth
              # token_url: {{ $v.oidc.tokenUrl }}
              token_url: https://keycloak.{{ $v.cluster.domain }}/realms/{{ $realm }}/protocol/openid-connect/token
              api_url: https://keycloak.{{ $v.cluster.domain }}/realms/{{ $realm }}/protocol/openid-connect/userinfo
              role_attribute_path: contains(groups[*], 'admin') && 'Admin' || contains(groups[*], 'team-admin') && 'Admin' || 'Editor'
        meshConfig:
          enableAutoMtls: true
          accessLogFile: "/dev/stdout"
        prometheus:
          contextPath: '/prometheus-istio'
        sidecarInjectorWebhook:
          enableNamespacesByDefault: false
        tracing:
          contextPath: '/tracing'
