{{- $v := .Environment.Values }}
{{- $i := $v.charts | get "istio" dict }}
{{- $cm := $v.charts | get "cert-manager" dict }}
{{- $k := $v.charts | get "keycloak" dict }}
{{- $ia := $i | get "addonComponents" dict }}
{{- $ig := $i | get "global" dict }}
{{- $iga := $i | get "gateways" dict }}
{{- $stage := $v.charts | get "cert-manager.stage" }}
{{- $hasKeycloak := $k | get "enabled" true }}
{{- $realm := $k | get "realm" "master" }}
{{- $keycloakBase := printf "https://keycloak.%s/realms/%s" $v.dns.domain $realm }}
{{- $o := $v.oidc }}
{{- $appsDomain := printf "apps.%s" $v.dns.domain }}
{{- $grafanaIni := tpl (readFile "../../helmfile.d/snippets/grafana.gotmpl") (dict "keycloakBase" $keycloakBase "hasKeycloak" $hasKeycloak "oidc" $v.oidc "stage"  $stage "keycloak" ($k | get "idp")) | toString }}
{{- $addIgnorePolicyAnnotation := readFile "../../helmfile.d/utils/addIgnorePolicyAnnotation.gotmpl" }}
{{- $excludedNamespaces := list }}{{ range $ns := $v.k8s.namespaces }}{{ if $ns | get "disableIstioInjection" nil }}{{ $excludedNamespaces = append $excludedNamespaces $ns.name }}{{ end }}{{ end }}

resources:
  - apiVersion: install.istio.io/v1alpha1
    kind: IstioOperator
    metadata:
      namespace: istio-system
      name: istiocontrolplane
    spec:
      profile: default
      components:
        cni:
          enabled: false
        pilot:
          k8s:
            podAnnotations: {{- tpl $addIgnorePolicyAnnotation (dict "policies" (list "psp-allowed-users")) | nindent 16 }}
            priorityClassName: "otomi-critical"
            hpaSpec:
              minReplicas: {{ $i | get "autoscaling.pilot.minReplicas" 1 }}
              maxReplicas: {{ $i | get "autoscaling.pilot.maxReplicas" 6 }}
            resources:
              {{- with $i | get "resources.pilot" nil }}
                {{- toYaml . | nindent 14 }}
              {{- else }}
              limits:
                cpu: '2'
                memory: 2Gi
              requests:
                cpu: 100m
                memory: 128Mi
              {{- end }}
        ingressGateways:
          - name: istio-ingressgateway
            enabled: true
            k8s:
              podAnnotations: {{- tpl $addIgnorePolicyAnnotation (dict "policies" (list "psp-allowed-users")) | nindent 16 }}
              priorityClassName: "otomi-critical"
              resources:
              {{- with $i | get "resources.ingressgateway" nil }}
                {{- toYaml . | nindent 16 }}
              {{- else }}
                limits:
                  cpu: '1'
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              {{- end }}
              hpaSpec:
                minReplicas: {{ $i | get "autoscaling.ingressgateway.minReplicas" 2 }}
                maxReplicas: {{ $i | get "autoscaling.ingressgateway.maxReplicas" 6 }}
              service:
                type: ClusterIP
                ports:
                - port: 15020
                  name: status-port
                - port: 80
                  name: http2
                - port: 443
                  name: https
            {{- if eq $v.cluster.provider "azure" }}
              readinessProbe:
                failureThreshold: 20
            {{- end }}
          - name: istio-ingressgateway-auth
            enabled: true
            label:
              istio: ingressgateway-auth
              app: ingressgateway-auth
            k8s:
              podAnnotations: {{- tpl $addIgnorePolicyAnnotation (dict "policies" (list "psp-allowed-users")) | nindent 16 }}
              hpaSpec:
                minReplicas: {{ $i | get "autoscaling.ingressgateway-auth.minReplicas" 2 }}
                maxReplicas: {{ $i | get "autoscaling.ingressgateway-auth.maxReplicas" 6 }}
              priorityClassName: "otomi-critical"
              resources:
                {{- with $i | get "resources.ingressgateway-auth" nil }}
                  {{- toYaml . | nindent 16 }}
                {{- else }}
                limits:
                  cpu: '1'
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
                {{- end }}
              service:
                type: ClusterIP
                ports:
                - port: 15020
                  name: status-port
                - port: 80
                  name: http2
                - port: 443
                  name: https
            {{- if eq $v.cluster.provider "azure" }}
              readinessProbe:
                failureThreshold: 20
            {{- end }}
          - name: cluster-local-gateway
            enabled: true
            label:
              istio: cluster-local-gateway
              app: cluster-local-gateway
            k8s:
              podAnnotations: {{- tpl $addIgnorePolicyAnnotation (dict "policies" (list "psp-allowed-users")) | nindent 16 }}
              hpaSpec:
                minReplicas: {{ $i | get "autoscaling.gateway-local.minReplicas" 2 }}
                maxReplicas: {{ $i | get "autoscaling.gateway-local.maxReplicas" 6 }}
              priorityClassName: "otomi-critical"
              resources:
                {{- with $i | get "resources.gateway-local" nil }}
                  {{- toYaml . | nindent 16 }}
                {{- else }}
                limits:
                  cpu: '1'
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
                {{- end }}
              service:
                type: ClusterIP
                ports:
                - port: 15020
                  name: status-port
                - port: 80
                  name: http2
                - port: 443
                  name: https
        {{ if $i | get "egressGateway.enabled" false }}
        egressGateways:
          - name: istio-egressgateway
            enabled: true
            k8s:
              podAnnotations: {{- tpl $addIgnorePolicyAnnotation (dict "policies" (list "psp-allowed-users")) | nindent 16 }}
              priorityClassName: "otomi-critical"
              resources:
              {{- with $i | get "resources.egressgateway" nil }}
                {{- toYaml . | nindent 16 }}
              {{- else }}
                limits:
                  cpu: '1'
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              {{- end }}
              hpaSpec:
                minReplicas: {{ $i | get "autoscaling.egressgateway.minReplicas" 2 }}
                maxReplicas: {{ $i | get "autoscaling.egressgateway.maxReplicas" 6 }}
              service:
                type: ClusterIP
                ports:
                - port: 15020
                  name: status-port
                - port: 80
                  name: http2
                - port: 443
                  name: https
            {{- if eq $v.cluster.provider "azure" }}
              readinessProbe:
                failureThreshold: 20
            {{- end }}
        {{- end }}  
      addonComponents:
        grafana:
          enabled: {{ $ia | get "grafana.enabled" true }}
          namespace: istio-apps
          k8s:
            podAnnotations:
              sidecar.istio.io/inject: "true"
              {{- tpl $addIgnorePolicyAnnotation (dict "policies" (list "psp-allowed-users")) | nindent 14 }}
            priorityClassName: "otomi-critical"
            resources:
              {{- with $i | get "resources.grafana" nil }}
                {{- toYaml . | nindent 14 }}
              {{- else }}
              limits:
                cpu: 500m
                memory: 2Gi
              requests:
                cpu: 100m
                memory: 512Mi
              {{- end }}
        prometheus:
          enabled: {{ $ia | get "prometheus.enabled" true }}
          namespace: istio-apps
          k8s:
            podAnnotations: {{- tpl $addIgnorePolicyAnnotation (dict "policies" (list "psp-allowed-users")) | nindent 14 }}
            priorityClassName: "otomi-critical"
            resources:
              {{- with $i | get "resources.prometheus" nil }}
                {{- toYaml . | nindent 14 }}
              {{- else }}
              limits:
                cpu: 500m
                memory: 2Gi
              requests:
                cpu: 250m
                memory: 512Mi
              {{- end }}
        tracing:
          enabled: {{ $ia | get "tracing.enabled" true }}
          namespace: istio-apps
          k8s:
            podAnnotations: {{- tpl $addIgnorePolicyAnnotation (dict "policies" (list "psp-allowed-users")) | nindent 14 }}
            priorityClassName: "otomi-critical"
            resources:
              {{- with $i | get "resources.tracing" nil }}
                {{- toYaml . | nindent 14 }}
              {{- else }}
              limits:
                cpu: 500m
                memory: 500Mi
              requests:
                cpu: 50m
                memory: 50Mi
              {{- end }}
        kiali:
          enabled: {{ $ia | get "kiali.enabled" true }}
          namespace: istio-apps
          k8s:
            podAnnotations: {{- tpl $addIgnorePolicyAnnotation (dict "policies" (list "psp-allowed-users")) | nindent 14 }}
            priorityClassName: "otomi-critical"
            resources:
              {{- with $i | get "resources.kiali" nil }}
                {{- toYaml . | nindent 14 }}
              {{- else }}
              limits:
                cpu: 500m
                memory: 1Gi
              requests:
                cpu: 100m
                memory: 512Mi
              {{- end }}
      values:
        cni:
          excludeNamespaces: {{- $excludedNamespaces | toYaml | nindent 12 }}
        kiali:
          contextPath: '/kiali'
          dashboard:
            auth:
              strategy: anonymous #openid
              # openid:
              #   issuer_uri: {{ $keycloakBase }}
              #   client_id: {{ $v.oidc.clientID }}
            jaegerURL: https://{{ $appsDomain }}/tracing/
            grafanaURL: https://{{ $appsDomain }}/grafana-istio/
        gateways:
          istio-ingressgateway:
            sds:
              enabled: {{ $ig | get "sds.enabled" false }}
        global:
          imagePullPolicy: IfNotPresent
          sds:
            enabled: {{ $ig | get "sds.enabled" false }}
          mtls:
            auto: {{ $ig | get "mtls.enabled" false }}
          # controlPlaneSecurityEnabled: true
          logging:
            level: {{ $ig | get "logging.level" "default:info" }}
          proxy:
            resources:
            {{- with $i | get "resources.proxy" nil }}
              {{- toYaml . | nindent 14 }}
            {{- else }}
              limits:
                  cpu: '1'
                  memory: 1Gi
              requests:
                  cpu: 20m
                  memory: 80Mi
            {{- end }}
            autoInject: enabled
          useMCP: false
        grafana:
          contextPath: '/grafana-istio'
          env:
            GF_SERVER_ROOT_URL: /grafana-istio/
          grafana.ini: {{- $grafanaIni | nindent 12 }}
          image: 
            tag: 7.4.2
        meshConfig:
          accessLogFile: "/dev/stdout"
          defaultConfig:
          {{ with $i | get "meshConfig.defaultConfig" nil }}
            {{- . | toYaml | nindent 14 }}
          {{- else }}
            tracing:
              sampling: 0.1
          {{- end }}
          enableAutoMtls: true
        pilot:
          {{- if eq $cm.stage "staging" }}
          jwksResolverExtraRootCA: |
            -----BEGIN CERTIFICATE-----
            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
            -----END CERTIFICATE-----
          {{- end }}
        prometheus:
          contextPath: '/prometheus-istio'
        sidecarInjectorWebhook:
          enableNamespacesByDefault: false
          injectedAnnotations: 
            {{- tpl $addIgnorePolicyAnnotation (dict "type" "sidecar" "policies" (list "psp-allowed-users" "psp-capabilities")) | nindent 12 }}
        tracing:
          contextPath: '/tracing'
