{{- $v := .Values }}
{{- $i := $v.charts | get "istio" dict }}
{{- $cm := $v.charts | get "cert-manager" dict }}
{{- $k := $v.charts | get "keycloak" dict }}
{{- $ig := $i | get "global" dict }}
{{- $iga := $i | get "gateways" dict }}
{{- $stage := $v.charts | get "cert-manager.stage" }}
{{- $hasKeycloak := $k | get "enabled" true }}
{{- $realm := $k | get "realm" "master" }}
{{- $keycloakBase := printf "https://keycloak.%s/realms/%s" $v.cluster.domainSuffix $realm }}
{{- $o := $v.oidc }}
{{- $appsDomain := printf "apps.%s" $v.cluster.domainSuffix }}
{{- $grafanaIni := tpl (readFile "../../helmfile.d/snippets/grafana.gotmpl") (dict "keycloakBase" $keycloakBase "hasKeycloak" $hasKeycloak "oidc" $v.oidc "stage"  $stage "keycloak" ($k | get "idp")) | toString }}
{{- $excludedNamespaces := list }}{{ range $ns := $v.k8s.namespaces }}{{ if $ns | get "disableIstioInjection" nil }}{{ $excludedNamespaces = append $excludedNamespaces $ns.name }}{{ end }}{{ end }}

resources:
  - apiVersion: install.istio.io/v1alpha1
    kind: IstioOperator
    metadata:
      namespace: istio-system
      name: istiocontrolplane
    spec:
      profile: default
      addonComponents:
        grafana:
          enabled: false
        kiali:
          enabled: false
        prometheus:
          enabled: false
        tracing:
          enabled: false
      components:
        cni:
          enabled: false
        pilot:
          k8s:
            podAnnotations:
              policy.otomi.io/ignore: psp-allowed-users
              sidecar.istio.io/inject: "true"
            priorityClassName: "otomi-critical"
            hpaSpec:
              minReplicas: {{ $i | get "autoscaling.pilot.minReplicas" 1 }}
              maxReplicas: {{ $i | get "autoscaling.pilot.maxReplicas" 10 }}
            resources:
              {{- with $i | get "resources.pilot" nil }}
                {{- toYaml . | nindent 14 }}
              {{- else }}
              limits:
                cpu: '2'
                memory: 2Gi
              requests:
                cpu: 100m
                memory: 128Mi
              {{- end }}
        ingressGateways:
          - name: istio-ingressgateway
            enabled: false
          - name: istio-ingressgateway-public
            enabled: true
            label:
              istio: ingressgateway-public
              app: ingressgateway
            k8s:
              podAnnotations:
                policy.otomi.io/ignore: psp-allowed-users
              priorityClassName: "otomi-critical"
              resources:
              {{- with $i | get "resources.ingressgateway" nil }}
                {{- toYaml . | nindent 16 }}
              {{- else }}
                limits:
                  cpu: '1'
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              {{- end }}
              hpaSpec:
                minReplicas: {{ $i | get "autoscaling.ingressgateway.minReplicas" 2 }}
                maxReplicas: {{ $i | get "autoscaling.ingressgateway.maxReplicas" 10 }}
              service:
                type: ClusterIP
                ports:
                  - port: 15021
                    name: status-port
                  - port: 80
                    targetPort: 8080
                    name: http2
                  - port: 443
                    targetPort: 8443
                    name: https
                  - port: 15443
                    name: tls
            {{- if eq $v.cluster.provider "azure" }}
              readinessProbe:
                failureThreshold: 20
            {{- end }}
          - name: istio-ingressgateway-private
            enabled: true
            label:
              istio: ingressgateway-private
              app: ingressgateway
            k8s:
              podAnnotations:
                policy.otomi.io/ignore: psp-allowed-users
              hpaSpec:
                minReplicas: {{ $i | get "autoscaling.ingressgateway-auth.minReplicas" 2 }}
                maxReplicas: {{ $i | get "autoscaling.ingressgateway-auth.maxReplicas" 10 }}
              priorityClassName: "otomi-critical"
              resources:
                {{- with $i | get "resources.ingressgateway-auth" nil }}
                  {{- toYaml . | nindent 16 }}
                {{- else }}
                limits:
                  cpu: '1'
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
                {{- end }}
              service:
                type: ClusterIP
                ports:
                  - port: 15021
                    name: status-port
                  - port: 80
                    targetPort: 8080
                    name: http2
                  - port: 443
                    targetPort: 8443
                    name: https
                  - port: 15443
                    name: tls
            {{- if eq $v.cluster.provider "azure" }}
              readinessProbe:
                failureThreshold: 20
            {{- end }}
        {{ if $i | get "egressGateway.enabled" false }}
        egressGateways:
          - name: istio-egressgateway
            enabled: true
            k8s:
              podAnnotations:
                policy.otomi.io/ignore: psp-allowed-users
              priorityClassName: "otomi-critical"
              resources:
              {{- with $i | get "resources.egressgateway" nil }}
                {{- toYaml . | nindent 16 }}
              {{- else }}
                limits:
                  cpu: '1'
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              {{- end }}
              hpaSpec:
                minReplicas: {{ $i | get "autoscaling.egressgateway.minReplicas" 2 }}
                maxReplicas: {{ $i | get "autoscaling.egressgateway.maxReplicas" 10 }}
              service:
                type: ClusterIP
                ports:
                  - port: 15021
                    name: status-port
                  - port: 80
                    targetPort: 8080
                    name: http2
                  - port: 443
                    targetPort: 8443
                    name: https
            {{- if eq $v.cluster.provider "azure" }}
              readinessProbe:
                failureThreshold: 20
            {{- end }}
        {{- end }}  
      values:
        cni:
          excludeNamespaces: {{- $excludedNamespaces | toYaml | nindent 12 }}
        global:
          imagePullPolicy: IfNotPresent
          {{- if $v.otomi | get "globalPullSecret" nil }}
          imagePullSecrets:
            - otomi-pullsecret-global
          {{- end }}
          logging:
            level: {{ $ig | get "logging.level" "default:info" }}
          proxy:
            resources:
            {{- with $i | get "resources.proxy" nil }}
              {{- toYaml . | nindent 14 }}
            {{- else }}
              limits:
                  cpu: '1'
                  memory: 1Gi
              requests:
                  cpu: 20m
                  memory: 80Mi
            {{- end }}
            autoInject: enabled
          tracer:
            zipkin:
              address: jaeger-operator-jaeger-collector.jaeger:9411 
          useMCP: false
        meshConfig:
          accessLogFile: "/dev/stdout"
          defaultConfig:
          {{ with $i | get "meshConfig.defaultConfig" nil }}
            {{- . | toYaml | nindent 14 }}
          {{- else }}
            tracing:
              sampling: 0.1
          {{- end }}
          enableAutoMtls: true
        pilot:
          {{- if eq $cm.stage "staging" }}
          jwksResolverExtraRootCA: |
            {{- $v | get "customIntermediateCa" $v.letsencryptCA | nindent 12 }}
          {{- end }}
        sidecarInjectorWebhook:
          enableNamespacesByDefault: false
          injectedAnnotations: 
            policy.otomi.io/ignore-sidecar: psp-allowed-users,psp-capabilities
