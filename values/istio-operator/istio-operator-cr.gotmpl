{{- $v := .Values }}
{{- $cm := $v.apps | get "cert-manager" }}
{{- $i := $v.apps.istio }}
{{- $ig := $i | get "global" dict }}
{{- $excludedNamespaces := list "kube-system" }}{{ range $ns := $v.k8s.namespaces }}{{ if $ns | get "disableIstioInjection" nil }}{{ $excludedNamespaces = append $excludedNamespaces $ns.name }}{{ end }}{{ end }}

apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
metadata:
  namespace: istio-system
  name: istiocontrolplane
spec:
  profile: default
  components:
    cni:
      enabled: false
    pilot:
      k8s:
        podAnnotations:
          policy.otomi.io/ignore: psp-allowed-users
          sidecar.istio.io/inject: "true"
        priorityClassName: otomi-critical
        hpaSpec:
          minReplicas: {{ $i.autoscaling.pilot.minReplicas }}
          maxReplicas: {{ $i.autoscaling.pilot.maxReplicas }}
        resources: {{- $i.resources.pilot | toYaml | nindent 14 }}
    ingressGateways:
      - name: istio-ingressgateway
        enabled: false
      - name: istio-ingressgateway-public
        enabled: true
        label:
          istio: ingressgateway-public
          app: ingressgateway
        k8s:
          podAnnotations:
            policy.otomi.io/ignore: psp-allowed-users
          priorityClassName: otomi-critical
          resources: {{- $i.resources.ingressgateway | toYaml | nindent 16 }}
          hpaSpec:
            minReplicas: {{ $i | get "autoscaling.ingressgateway.minReplicas" }}
            maxReplicas: {{ $i | get "autoscaling.ingressgateway.maxReplicas" }}
          service:
            type: ClusterIP
            ports:
              - port: 15021
                name: status-port
              - port: 80
                targetPort: 8080
                name: http2
              - port: 443
                targetPort: 8443
                name: https
              - port: 15443
                name: tls
        {{- if eq $v.cluster.provider "azure" }}
          readinessProbe:
            failureThreshold: 20
        {{- end }}
    {{ if $i.egressGateway.enabled }}
    egressGateways:
      - name: istio-egressgateway
        enabled: true
        k8s:
          podAnnotations:
            policy.otomi.io/ignore: psp-allowed-users
          priorityClassName: otomi-critical
          resources: {{- $i.resources.egressgateway | toYaml | nindent 16 }}
          hpaSpec:
            minReplicas: {{ $i | get "autoscaling.egressgateway.minReplicas" }}
            maxReplicas: {{ $i | get "autoscaling.egressgateway.maxReplicas" }}
          service:
            type: ClusterIP
            ports:
              - port: 15021
                name: status-port
              - port: 80
                targetPort: 8080
                name: http2
              - port: 443
                targetPort: 8443
                name: https
        {{- if eq $v.cluster.provider "azure" }}
          readinessProbe:
            failureThreshold: 20
        {{- end }}
    {{- end }}  
  values:
    cni:
      excludeNamespaces: {{- $excludedNamespaces | toYaml | nindent 12 }}
    global:
      imagePullPolicy: IfNotPresent
      {{- if $v.otomi | get "globalPullSecret" nil }}
      imagePullSecrets:
        - otomi-pullsecret-global
      {{- end }}
      logging:
        level: {{ $ig.logging.level }}
      proxy:
        resources: {{- $i.resources.proxy | toYaml | nindent 14 }}
        autoInject: enabled
      tracer:
        zipkin:
          address: jaeger-operator-jaeger-collector.jaeger:9411 
      useMCP: false
    meshConfig:
      accessLogFile: "/dev/stdout"
      defaultConfig: {{-  $i.meshConfig.defaultConfig | toYaml | nindent 14 }}
      enableAutoMtls: true
    {{- if $v._derived.untrustedCA }}
    pilot:
      jwksResolverExtraRootCA: |
        {{- $v._derived.caCertRoot | nindent 12 }}
    {{- end }}
    sidecarInjectorWebhook:
      enableNamespacesByDefault: false
      injectedAnnotations: 
        policy.otomi.io/ignore.istio-init: psp-allowed-users,psp-capabilities
