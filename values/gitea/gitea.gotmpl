{{- $v := .Values }}
{{- $o := $v.oidc }}
{{- $g := $v.charts | get "gitea" dict }}
{{- $k := $v.charts | get "keycloak" dict }}
{{- $hasKeycloak := $k | get "enabled" true }}
{{- $realm := $k | get "realm" "master" }}
{{- $keycloakIssuer := printf "https://keycloak.%s/realms/%s" $v.cluster.domainSuffix $realm }}
{{- $giteaDomain := printf "gitea.%s" $v.cluster.domainSuffix }}
{{- $stage := $v.charts | get "cert-manager.stage" "production" }}
{{- $hasStagingCerts := eq $stage "staging" }}

nameOverride: gitea
fullnameOverride: gitea
# clusterDomain: {{ $v.cluster.domainSuffix }}

resources:
  limits:
    cpu: 1
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 128Mi

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  privileged: false
  readOnlyRootFilesystem: true
  runAsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

image:
  {{- with .Values.otomi | get "globalPullSecret" nil }}
  imagePullSecrets:
    - name: otomi-pullsecret-global
  {{- end }}
  tag: 1.14.2
  pullPolicy: IfNotPresent
  rootless: true

gitea:
  admin:
    username: otomi-admin
    password: {{ $g | get "adminPassword" $v.otomi.adminPassword }}
  config:
    log:
      LEVEL: trace
    openid:
      ENABLE_OPENID_SIGNIN: true
    repository:
      DEFAULT_BRANCH: main
    {{- with $g | get "config" nil }}
      {{- toYaml . | nindent 4}}
    {{- end }}
    server:
      DOMAIN: {{ $giteaDomain }}
      ROOT_URL: "https://{{ $giteaDomain }}/"
      DISABLE_SSH: true
  {{- if $hasStagingCerts }}
      SKIP_TLS_VERIFY: true
    webhook:
      SKIP_TLS_VERIFY: true
  {{- end }}
    
    
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      prometheusSelector: system
  oauth:
    enabled: true
    name: {{ $hasKeycloak | ternary $k.idp.alias "otomi" }}
    provider: openidConnect
    key: {{ $hasKeycloak | ternary $k.idp.clientID $o.clientID }}
    secret: {{ $hasKeycloak | ternary $k.idp.clientSecret $o.clientSecret }}
    autoDiscoverUrl: '{{ $hasKeycloak | ternary $keycloakIssuer $o.issuer }}/.well-known/openid-configuration'

init:
  resources:
    limits:
      cpu: 250m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

memcached:
  resources:
    limits:
      cpu: 250m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

persistence:
  size: 1Gi

postgresql:
  persistence:
    size: 1Gi
  global:
    postgresql:
      postgresqlPassword: {{ $g | get "postgresqlPassword" }}
      postgresqlPostgresPassword: {{ $g | get "postgresqlPassword" }}
  resources:
    limits:
      memory: 512Mi
      cpu: 500m
    requests:
      memory: 256Mi
      cpu: 250m

{{- if $hasStagingCerts }}
extraRootCA: |
  {{- $v.letsencryptRootCA | nindent 2 }}
  {{- $v.letsencryptCA | nindent 2 }}
{{- end }}

securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000

initPreScript: |
  echo "Waiting until keycloak service is accessible"
  while ! nc -w2 -zv {{ printf "keycloak.%s" $v.cluster.domainSuffix }} 443; do
    printf '.'
    sleep 5
  done
  echo READY!

{{- with .Values.otomi | get "globalPullSecret" nil }}
global:
  imagePullSecrets:
    - otomi-pullsecret-global
{{- end }}
