{{- $v := .Values }}
{{- $o := $v | get "oidc" dict }}
{{- $g := $v.apps.gitea }}
{{- $k := $v.apps.keycloak }}
{{- $giteaDomain := printf "gitea.%s" $v.cluster.domainSuffix }}
{{- $cm := $v.apps | get "cert-manager" }}
{{- $gdb := $v.databases.gitea }}
{{- $obj := $v.obj.provider }}
{{- $giteaBucketName := "" }}
{{- if eq $obj.type "minioLocal" }}
{{- $giteaBucketName = "gitea" }}
{{- else if eq $obj.type "linode" }}
{{- $giteaBucketName = $obj.linode.buckets | get "gitea" nil }}
{{- end }}

nameOverride: gitea
fullnameOverride: gitea

podDns:
  # dnsPolicy: "None"
  dnsConfig:
    options:
      - name: ndots
        value: "1"
    nameservers:
      - "8.8.4.4"
      - "8.8.8.8"

resources: {{- $g.resources.gitea | toYaml | nindent 2 }}

image:
  {{- if $v.otomi.linodeLkeImageRepository }}
  registry:    "{{ $v.otomi.linodeLkeImageRepository }}/docker"
  repository:  "gitea/gitea"
  {{- end }}
  {{- with $v.otomi | get "globalPullSecret" nil }}
  imagePullSecrets:
    - name: otomi-pullsecret-global
  {{- end }}
  {{- with $g | get "image.gitea.tag" "1.23.8" }}
  tag: {{ . }}
  {{- end }}
  pullPolicy: {{ $g | get "image.gitea.pullPolicy" "IfNotPresent" }}
  rootless: true
strategy:
  # Default will block on volume reassignment, and Recreate
  # cannot be set as rollingUpdate is set in default chart values
  rollingUpdate:
    maxUnavailable: 1

gitea:
  admin:
    existingSecret: gitea-admin-secret
  config:
    database:
      DB_TYPE: postgres
      HOST: gitea-db-rw.gitea.svc.cluster.local:5432
      NAME: gitea
      SCHEMA: public
      # Database connection pool settings aligned with max_connections: 50 on database side
      # Max open connections: 40 (leaving 10 for maintenance and background processes)
      MAX_OPEN_CONNS: 40
      MAX_IDLE_CONNS: 8
    admin:
      DISABLE_REGULAR_ORG_CREATION: false
    {{ with $v | get "smtp" nil }}
    mailer:
      enabled: true
      HELO_HOSTNAME: {{ .hello }}
      FROM: {{ .from }}
      USER: {{ .auth_username }}
      PASSWD: {{ .auth_password | quote }}
      MAILER_TYPE: smtp
      IS_TLS_ENABLED: true
      SUBJECT_PREFIX: 'Otomi[Gitea]: '
    {{- end }}
    openid:
      ENABLE_OPENID_SIGNIN: false
      ENABLE_OPENID_SIGNUP: false
    oauth2_client:
      ENABLE_AUTO_REGISTRATION: true
      {{/*Disabled so that when an user with the same username is created in gitea, it will not be linked to another account*/}}
      ACCOUNT_LINKING: disabled
      OPENID_CONNECT_SCOPES: openid email profile
      USERNAME: email
    repository:
      DEFAULT_BRANCH: main
    service:
      ALLOW_ONLY_EXTERNAL_REGISTRATION: true
      DEFAULT_ALLOW_CREATE_ORGANIZATION: false
      DEFAULT_ORG_MEMBER_VISIBLE: {{ not $v.otomi.isMultitenant }}
      DEFAULT_USER_IS_RESTRICTED: {{ $v.otomi.isMultitenant }}
      # basic auth can't be turned off because it nukes otomi commit
      # TODO: create token on initial deploy and store in values
      # ENABLE_BASIC_AUTHENTICATION: false
      SHOW_REGISTRATION_BUTTON: false
      REQUIRE_SIGNIN_VIEW: false
    service.explore:
      REQUIRE_SIGNIN_VIEW: true
    session:
      COOKIE_SECURE: true
      DOMAIN: {{ $giteaDomain }}
      PROVIDER: memory
      GC_INTERVAL_TIME: 3600
      SESSION_LIFE_TIME: 600
    webhook:
      ALLOWED_HOST_LIST: "*"
    server:
      DOMAIN: {{ $giteaDomain }}
      ROOT_URL: "https://{{ $giteaDomain }}/"
      DISABLE_SSH: true
      HTTP_PORT: 3000
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      relabelings:
        - sourceLabels: [__name__]
          targetLabel: prometheus
          replacement: system
  additionalConfigFromEnvs:
    # Configuration through app.ini, not directly supported through Helm chart.
    # See https://gitea.com/gitea/helm-gitea#user-defined-environment-variables-in-appini
    - name: GITEA__DATABASE__USER
      valueFrom:
        secretKeyRef:
          name: gitea-db-secret
          key: username
    - name: GITEA__DATABASE__PASSWD
      valueFrom:
        secretKeyRef:
          name: gitea-db-secret
          key: password

init:
  resources: {{- $g.resources.init | toYaml | nindent 4 }}

deployment:
  env:
    - name: RCLONE_CONFIG_GITEA_TYPE
      value: s3
    {{- if eq $obj.type "minioLocal" }}
    - name: RCLONE_CONFIG_GITEA_PROVIDER
      value: Minio
    - name: RCLONE_CONFIG_GITEA_ENDPOINT
      value: http://minio.minio.svc.cluster.local:9000
    - name: RCLONE_CONFIG_GITEA_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: minio-creds
          key: MINIO_ACCESS_KEY
    - name: RCLONE_CONFIG_GITEA_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: minio-creds
          key: MINIO_SECRET_KEY
    {{- else if eq $obj.type "linode" }}
    - name: RCLONE_CONFIG_GITEA_PROVIDER
      value: Linode
    - name: RCLONE_CONFIG_GITEA_ENDPOINT
      value: {{ $obj.linode.region }}.linodeobjects.com
    - name: RCLONE_CONFIG_GITEA_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: linode-creds
          key: S3_STORAGE_ACCOUNT
    - name: RCLONE_CONFIG_GITEA_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: linode-creds
          key: S3_STORAGE_KEY
    {{- end }}
    - name: BUCKET_NAME
      value: {{ $giteaBucketName | quote }}

persistence:
  size: 1Gi
  claimName: data-gitea-0
  labels:
    app.kubernetes.io/name: gitea
    app.kubernetes.io/instance: gitea

postgresql:
  enabled: false
postgresql-ha:
  enabled: false
redis-cluster:
  enabled: false
redis:
  enabled: true

extraContainerVolumeMounts:
  - name: backup
    mountPath: /backup
{{- if $v._derived.untrustedCA }}
  - name: custom-ca
    mountPath: /etc/ssl/certs/ca-certificates.crt
    subPath: ca-certificates.crt
{{- end }}
extraVolumes:
  - name: backup
{{- if ne $v.cluster.provider "custom" }}
    persistentVolumeClaim:
      claimName: gitea-backup
{{- else }}
    emptyDir: {}
{{- end }}
{{- if $v._derived.untrustedCA }}
  - name: custom-ca
    secret:
      secretName: custom-ca
{{- end }}

podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

containerSecurityContext:
  capabilities:
    drop:
      - ALL
  allowPrivilegeEscalation: false
  privileged: false
  readOnlyRootFilesystem: true

global:
  storageClass: ""
  hostAliases: []
{{- with $v.otomi | get "globalPullSecret" nil }}
  imagePullSecrets:
    - otomi-pullsecret-global
{{- end }}

{{- if $v.otomi.linodeLkeImageRepository }}
  imageRegistry: "{{ $v.otomi.linodeLkeImageRepository }}/docker"
  security:
    allowInsecureImages: true
{{- end }}