{{- $v := .Values }}
{{- $o := $v | get "oidc" dict }}
{{- $g := $v.apps.gitea }}
{{- $k := $v.apps.keycloak }}
{{- $giteaDomain := printf "gitea.%s" $v.cluster.domainSuffix }}
{{- $cm := $v.apps | get "cert-manager" }}

nameOverride: gitea
fullnameOverride: gitea

resources:
  {{ with $g | get "resources.gitea" nil }}
    {{- toYaml . | nindent 2 }}
  {{- else }}
  limits:
    cpu: 1
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 128Mi
  {{- end }}

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  privileged: false
  readOnlyRootFilesystem: true
  runAsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

image:
  {{- with $v.otomi | get "globalPullSecret" nil }}
  imagePullSecrets:
    - name: otomi-pullsecret-global
  {{- end }}
  tag: {{ $g | get "image.gitea.tag" "1.15.8" }}
  pullPolicy: {{ $g | get "image.gitea.pullPolicy" "IfNotPresent" }}
  rootless: true

gitea:
  podAnnotations:
    policy.otomi.io/ignore.init: psp-allowed-users
    policy.otomi.io/ignore.init-ca-finish: psp-allowed-users
  admin:
    username: {{ $g.adminUsername }}
    password: {{ $g.adminPassword }}
  config:
    log:
      LEVEL: trace
    openid:
      ENABLE_OPENID_SIGNIN: true
      ENABLE_OPENID_SIGNUP: true
    repository:
      DEFAULT_BRANCH: main
    service:
      ALLOW_ONLY_EXTERNAL_REGISTRATION: true
    server:
      DOMAIN: {{ $giteaDomain }}
      ROOT_URL: "https://{{ $giteaDomain }}/"
      DISABLE_SSH: true
    
    
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels:
        prometheus: system
  oauth:
    - name: {{ $k.idp.alias }}
      provider: openidConnect
      key: {{ $k.idp.clientID  }}
      secret: {{ $k.idp.clientSecret }}
      autoDiscoverUrl: {{ $v._derived.oidcWellKnownUrl }}
      # autoDiscoverUrlBackchannel: {{ $v._derived.oidcWellKnownUrlBackchannel }}
      autoDiscoverUrlBackchannel: {{ $v._derived.oidcWellKnownUrl }}

init:
  resources:
    limits:
      cpu: 400m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

memcached:
  # @TODO:
  image:
    tag: {{ $g | get "image.memcached.tag" "1.6.12" }}
    pullPolicy:  {{ $g | get "image.memcached.pullPolicy" "IfNotPresent" }}
  resources:
    {{ with $g | get "resources.memcached" nil }}
      {{- toYaml . | nindent 4 }}
    {{- else }}
    limits:
      cpu: 250m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
    {{- end }}

persistence:
  size: 1Gi

postgresql:
  # @TODO:
  image:
    tag: {{ $g | get "image.postgresql.tag" "13.5.0" }}
    pullPolicy:  {{ $g | get "image.postgresql.pullPolicy" "IfNotPresent" }}
  metrics:
    image:
      tag: 0.10.0
  persistence:
    size: 1Gi
  global:
    postgresql:
      postgresqlPassword: {{ $g | get "postgresqlPassword" }}
      postgresqlPostgresPassword: {{ $g | get "postgresqlPassword" }}
  resources:
    {{ with $g | get "resources.postgresql" nil }}
      {{- toYaml . | nindent 4 }}
    {{- else }}
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
    {{- end }}

{{- if $v._derived.untrustedCA }}
extraVolumeMounts:
  - name: custom-ca
    mountPath: /etc/ssl/certs/ca-certificates.crt
    subPath: ca-certificates.crt
extraVolumes:
  - name: custom-ca
    secret:
      secretName: custom-ca
{{- end }}

podSecurityContext:
  fsGroup: 1000

containerSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000

{{- with .Values.otomi | get "globalPullSecret" nil }}
global:
  imagePullSecrets:
    - otomi-pullsecret-global
{{- end }}
