{{- $v := .Values }}
{{- $o := $v | get "oidc" dict }}
{{- $g := $v.charts.gitea }}
{{- $k := $v.charts.keycloak }}
{{- $hasKeycloak := $k.enabled }}
{{- $keycloakUrl := printf "https://keycloak.%s" $v.cluster.domainSuffix }}
{{- $keycloakIssuer := printf "%s/realms/otomi" $keycloakUrl }}
{{- $giteaDomain := printf "gitea.%s" $v.cluster.domainSuffix }}
{{- $stage := $v.charts | get "cert-manager.stage" }}
{{- $hasStagingCerts := eq $stage "staging" }}

nameOverride: gitea
fullnameOverride: gitea
waitForUrl: {{ $keycloakUrl }}
otomiVersion: {{ $v.otomi.version }}

resources:
  limits:
    cpu: 1
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 128Mi

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  privileged: false
  readOnlyRootFilesystem: true
  runAsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

image:
  {{- with .Values.otomi | get "globalPullSecret" nil }}
  imagePullSecrets:
    - name: otomi-pullsecret-global
  {{- end }}
  tag: 1.14.2
  pullPolicy: IfNotPresent
  rootless: true

gitea:
  admin:
    username: otomi-admin
    password: {{ $g | get "adminPassword" $v.otomi.adminPassword }}
  config:
    log:
      LEVEL: trace
    openid:
      ENABLE_OPENID_SIGNIN: true
      ENABLE_OPENID_SIGNUP: true
    repository:
      DEFAULT_BRANCH: main
    {{- with $g | get "config" nil }}
      {{- toYaml . | nindent 4}}
    {{- end }}
    service:
      ALLOW_ONLY_EXTERNAL_REGISTRATION: true
    server:
      DOMAIN: {{ $giteaDomain }}
      ROOT_URL: "https://{{ $giteaDomain }}/"
      DISABLE_SSH: true
  {{- if $hasStagingCerts }}
      SKIP_TLS_VERIFY: true
    webhook:
      SKIP_TLS_VERIFY: true
  {{- end }}
    
    
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels:
        prometheus: system
  oauth:
    enabled: true
    name: {{ $hasKeycloak | ternary ($k | get "idp.alias" "otomi-idp") "otomi" }}
    provider: openidConnect
    key: {{ $hasKeycloak | ternary $k.idp.clientID ($o | get "clientID" nil) }}
    secret: {{ $hasKeycloak | ternary $k.idp.clientSecret ($o | get "clientSecret" nil) }}
    autoDiscoverUrl: '{{ $hasKeycloak | ternary $keycloakIssuer ($o | get "issuer" nil) }}/.well-known/openid-configuration'

init:
  resources:
    limits:
      cpu: 400m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

memcached:
  resources:
    limits:
      cpu: 250m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

persistence:
  size: 1Gi

postgresql:
  persistence:
    size: 1Gi
  global:
    postgresql:
      postgresqlPassword: {{ $g | get "postgresqlPassword" }}
      postgresqlPostgresPassword: {{ $g | get "postgresqlPassword" }}
  resources:
    limits:
      memory: 512Mi
      cpu: 500m
    requests:
      memory: 256Mi
      cpu: 250m

{{- if $hasStagingCerts }}
extraRootCA: |
  {{- $v.cluster | get "customRootCa" $v.letsencryptRootCA | nindent 2 }}
  {{- $v.cluster | get "customIntermediateCa" $v.letsencryptCA | nindent 2 }}
{{- end }}

securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000

{{- with .Values.otomi | get "globalPullSecret" nil }}
global:
  imagePullSecrets:
    - otomi-pullsecret-global
{{- end }}
