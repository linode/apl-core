{{- $v := .Values }}
{{- $vl:= $v.apps.thanos }}
{{- $obj := $vl.objstore }}
{{- $sp := $obj.storageProvider }}

## @section Thanos Query parameters
query:
  enabled: true
  replicaCount: {{ $vl.query.replicaCount }}
  service:
    additionalHeadless: true
  dnsDiscovery:
    enabled: false
  stores:
    - "thanos-storegateway:10901"
    - "dnssrv+_grpc._tcp.thanos-storegateway.monitoring.svc"
    - "dnssrv+_grpc._tcp.thanos-receive-headless.monitoring.svc"
  resources: {{- $vl.resources.query | toYaml | nindent 4 }}
  extraFlags:
    - "--query.auto-downsampling"

## @section Thanos Query Frontend parameters
queryFrontend:
  enabled: true
  resources: {{- $vl.resources.queryFrontend | toYaml | nindent 4 }}

## @section Thanos Bucket Web parameters
bucketweb:
  enabled: true
  resources: {{- $vl.resources.bucketweb | toYaml | nindent 4 }}

## @section Thanos Compactor parameters
compactor:
  enabled: true
  ## By default, there is NO retention set for object storage data. This means that data is stored forever, 
  ## which is a valid and recommended way of running Thanos.
  retentionResolutionRaw: {{ $vl.compactor.retentionResolutionRaw }}
  retentionResolution5m: {{ $vl.compactor.retentionResolution5m }}
  retentionResolution1h: {{ $vl.compactor.retentionResolution1h }}
  persistence:
    size: {{ $vl.persistence.compactor.size }}
  resources: {{- $vl.resources.compactor | toYaml | nindent 4 }}

## @section Thanos Store Gateway parameters
storegateway:
  enabled: true
  persistence:
    size: {{ $vl.persistence.storegateway.size }}
  resources: {{- $vl.resources.storegateway | toYaml | nindent 4 }}

## @section Thanos Receive parameters
receive:
  enabled: true
  mode: {{ $vl.receiver.mode }}
  replicaCount: {{ $vl.receiver.replicaCount }}
  persistence:
    enabled: true
    size: {{ $vl.persistence.receiver.size }}
  resources: {{- $vl.resources.receiver | toYaml | nindent 4 }}
  tsdbRetention: {{ $vl.receiver.tsdbRetention }}
  replicationFactor: {{ $vl.receiver.replicationFactor }}
  service:
    additionalHeadless: true

## @section Thanos Ruler parameters
receiveDistributor:
  enabled: {{ $vl.receiverDistributor.enabled }}
  resources: {{- $vl.resources.receiverDistributor | toYaml | nindent 4 }}

## @section Thanos Ruler parameters
ruler:
  enabled: {{ $vl.ruler.enabled }}
  persistence:
    size: {{ $vl.persistence.ruler.size }}
  resources: {{- $vl.resources.ruler | toYaml | nindent 4 }}
  alertmanagers:
    - "dnssrv+http://_http-web._tcp.alertmanager-operated.monitoring.svc"
  service:
    additionalHeadless: true
  queries:
    - dnssrv+_http._tcp.thanos-query-headless.monitoring.svc
  clusterName: {{ $v.cluster.domainSuffix }}
  existingConfigmap: thanos-ruler-thanos-ruler-rulefiles-0
  extraFlags:
    - --rule-file=/conf/rules/*.yaml
  sidecars:
    - name: config-reloader
      image: quay.io/prometheus-operator/prometheus-config-reloader:v0.50.0
      imagePullPolicy: IfNotPresent
      command:
      - /bin/prometheus-config-reloader
      args:
      - --reload-url=http://127.0.0.1:10902/-/reload
      - --watched-dir=/etc/thanos/rules/thanos-ruler-thanos-ruler-rulefiles-0
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      resources:
        limits:
          cpu: 100m
          memory: 50Mi
        requests:
          cpu: 100m
          memory: 50Mi
      securityContext:
        runAsNonRoot: true
        runAsGroup: 65534
        runAsUser: 65534
      volumeMounts:
      - mountPath: /etc/thanos/rules/thanos-ruler-thanos-ruler-rulefiles-0
        name: ruler-config

## @param objstoreConfig The [objstore configuration](https://thanos.io/tip/thanos/storage.md/)
## Specify content for objstore.yml
{{- if eq $sp.type "minioLocal" }}
objstoreConfig: |-
  type: s3
  config:
    bucket: thanos
    endpoint: minio.minio.svc.cluster.local:9000
    access_key: otomi-admin
    secret_key: {{ $v.otomi.adminPassword }}
    insecure: true
{{- end }}
{{- if eq $sp.type "s3" }}
objstoreConfig: |-
  type: s3
  config:
    bucket: {{ $sp.s3.bucket }}
    endpoint: {{ $sp.s3.s3Url }}
    access_key: {{ $sp.s3.accessKeyId }}
    secret_key: {{ $sp.s3.secretAccessKey }}
    insecure: true
{{- end }}

metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
    labels:
      prometheus: system