{{- $v := .Values }}
{{- $domain := printf "auth.%s" $v.dns.domain }}
{{- $cm := $v.charts | get "cert-manager" dict }}
{{- $k := $v.charts | get "keycloak" dict }}
{{- $hasKeycloak := $k | get "enabled" true }}
{{- $name := $domain | replace "." "-" }}
resources:
  - apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      annotations:
        {{- if not $v.otomi.hasCloudLB }}
        externaldns: "true"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        {{- end }}
        {{- if eq $v.cluster.provider "onprem" }}
        external-dns.alpha.kubernetes.io/target: {{ $v.cluster.entrypoint }}
        {{- end }}
        kubernetes.io/ingress.class: nginx
        ingress.kubernetes.io/ssl-redirect: {{ if $v.otomi.hasCloudLB }}"false"{{ else }}"true"{{ end }}
        {{- if $hasKeycloak }}
        nginx.ingress.kubernetes.io/auth-response-headers: Authorization
        {{- end }}
        nginx.ingress.kubernetes.io/configuration-snippet: |
          # rewrite auth redirects to original hosts
          rewrite ^/oauth2/redirect/(.*) https://$1 redirect;
      name: oauth2-proxy
    spec:
      rules:
      - host: '{{ $domain }}'
        http:
          paths:
          - backend:
              serviceName: oauth2-proxy
              servicePort: 80
            path: /oauth2
      {{- if not $v.otomi.hasCloudLB }}
      tls: 
        - secretName: {{ $domain | replace "." "-" }}
          hosts:
            - '{{ $domain }}'
      {{- end }}
