{{- $v := .Values }}
{{- $k := $v.apps.keycloak }}
{{- $cm := $v.apps | get "cert-manager" }}
{{- $oauth2 := $v.apps | get "oauth2-proxy" }}
{{- $r := $v.apps | get "oauth2-proxy-redis" }}
{{- $o := $v | get "oidc" dict }}

# get all public domains that don't have the cluster domain as root
{{ $domains := list }}
{{- range $teamId, $team := $v.teamConfig }}
  {{- if hasKey $team "services" }}
    {{- range $s := $team.services }}
      {{- if (hasKey $s "domain")}}
        {{- if and (not (has $s.domain $domains)) (not (contains $v.cluster.domainSuffix $s.domain)) }}
          {{- $domains = append $domains $s.domain }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
{{- $domains = append $domains (print "." $v.cluster.domainSuffix) }}

config:
  clientID: {{ $k.idp.clientID | quote }}
  clientSecret: {{ $k.idp.clientSecret | quote }}
  cookieSecret: {{ $oauth2 | get "config.cookieSecret" (randAlpha 16) }}
  configFile: |-
    # Defaults
    email_domains = [ "*" ]
    upstreams = [ "file:///dev/null" ]
    # Custom
    ssl_insecure_skip_verify = {{ $v._derived.untrustedCA }}
    provider = "keycloak-oidc"
    whitelist_domains = {{ $domains | toJson }}
    scope = {{ $o | get "scope" "openid email profile" | quote }}
    redirect_url = "https://auth.{{ $v.cluster.domainSuffix }}/oauth2/callback"
    oidc_issuer_url = {{ $v._derived.oidcBaseUrl | quote }}
    code_challenge_method = "S256"
    insecure_oidc_allow_unverified_email = true
    cookie_domains = {{ $domains | toJson }}
    cookie_samesite = "none"
    # set to the same as keycloak realm's accessCodeLifespan
    cookie_refresh = "1m"
    # set to the same as keycloak client idle timeout
    cookie_expire = "30m"
    reverse_proxy = true
    set_authorization_header = true
    pass_authorization_header = true
    skip_auth_routes = "/manifest.json"
    silence_ping_logging = true
    custom_templates_dir = "/etc/oauth2-proxy"

replicaCount: 2
priorityClassName: otomi-critical
resources: {{- $oauth2.resources | toYaml | nindent 2 }}

podAnnotations:
  sidecar.istio.io/inject: "false"

extraVolumes:
  - name: custom-templates
    configMap:
      name: oauth2-proxy-custom-templates
      items:
        - key: redirect.html
          path: sign_in.html
        - key: redirect.html
          path: error.html
        - key: robots.txt
          path: robots.txt

extraVolumeMounts:
  - name: custom-templates
    mountPath: /etc/oauth2-proxy
    readOnly: true

extraInitContainers:
  - name: wait-for-keycloak
    {{- if $v.otomi.linodeLkeImageRepository }}
    image: "{{- $v.otomi.linodeLkeImageRepository }}/docker/curlimages/curl:latest"
    {{- else }}
    image: curlimages/curl:latest
    {{- end }}
    command: ["/bin/sh","-c"]
    args: ["while [ $(curl -sw '%{http_code}' {{ $v._derived.oidcBaseUrl }} -o /dev/null) -ne 200 ]; do sleep 2; echo 'Waiting for Keycloak OIDC Issuer URL'; done"]

{{- if $v.otomi.linodeLkeImageRepository }}
initContainers:
  waitForRedis:
    image:
      repository: "{{- $v.otomi.linodeLkeImageRepository }}/docker/alpine"
{{- end }}

{{- with .Values.otomi | get "globalPullSecret" nil }}
imagePullSecrets:
  - name: otomi-pullsecret-global
{{- end }}

enableServiceLinks: false

sessionStorage:
  # Can be one of the supported session storage cookie|redis
  type: redis
  redis:
    clientType: {{ $r | get "architecture" }}
    password: {{ $r | get "password" | quote }}

{{- if $v.otomi.linodeLkeImageRepository }}
global:
  security:
    # Required for Redis
    allowInsecureImages: true
{{- end }}

redis:
  {{- if $v.otomi.linodeLkeImageRepository }}
  global:
    imageRegistry: "{{- $v.otomi.linodeLkeImageRepository }}/docker"
  {{- end }}
  enabled: true
  architecture: {{ $r | get "architecture" }}
  auth:
    password: {{ $r | get "password" | quote }}

  sentinel:
    persistence:
      size: {{ $r.persistence.sentinel.size }}
    podAnnotations:
      sidecar.istio.io/inject: "false"
    resources: {{- $r.resources.sentinel | toYaml | nindent 6 }}

  master:
    persistence:
      size: {{ $r.persistence.master.size }}
    podAnnotations:
      sidecar.istio.io/inject: "false"
    priorityClassName: otomi-critical
    resources: {{- $r.resources.master | toYaml | nindent 6 }}

  replica:
    persistence:
      size: {{ $r.persistence.replica.size }}
    podAnnotations:
      sidecar.istio.io/inject: "false"
    priorityClassName: otomi-critical
    resources: {{- $r.resources.replica | toYaml | nindent 6 }}

  metrics:
    podAnnotations:
      sidecar.istio.io/inject: "false"
    priorityClassName: otomi-critical
    resources: {{- $r.resources.metrics | toYaml | nindent 6 }}

  {{- with .Values.otomi | get "globalPullSecret" nil }}
  imagePullSecrets:
    - name: otomi-pullsecret-global
  {{- end }}

{{- if $v.otomi.linodeLkeImageRepository }}
image:
  repository: "{{- $v.otomi.linodeLkeImageRepository }}/quay/oauth2-proxy/oauth2-proxy"
{{- end }}
