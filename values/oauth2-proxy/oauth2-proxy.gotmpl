{{- $v := .Environment.Values }}
{{- $o := $v.oidc }}
{{- $k := $v | get "charts.keycloak" dict }}
{{- $realm := $k | get "realm" "master" }}
{{- $provider := index $o $o.provider }}
{{- $joinTpl := readFile "../../helmfile.d/utils/joinListWithComma.gotmpl" }}
image:
  tag: "v6.0.0"
  repository: quay.io/oauth2-proxy/oauth2-proxy
  # tag: latest
  # pullPolicy: Always

config:
  # clientID: oidc-auth-client
  # clientSecret: bladibladi
  # cookieSecret: QkVwdy9MSkU0N3VYS2haZkVqZTdyUzExeFZheTM3YXk=
  clientID: {{ $o.clientID }}
  clientSecret: {{ $o.clientSecret }}
  cookieSecret: {{ $v | getOrNil "charts.oauth2-proxy.config.cookieSecret" | default "blajajaaa" }}

# get all public domains that don't have the cluster domain as root
{{ $domains := list }}
{{- $tc := $v.teamConfig }}
{{- range $teamId, $team := $tc.teams }}
{{- if hasKey $team "services" }}
{{- range $s := $team.services }}
{{- if and (hasKey $s "domain") (not (hasKey $s "isPublic")) }}
{{- if and (not (has $s.domain $domains)) (not (contains $v.cluster.domain $s.domain)) }}
{{- $domains = append $domains $s.domain }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- $domainList := tpl $joinTpl (append $domains (printf ".%s" $v.cluster.domain)) }}

extraArgs:
  # oidc, google, azure, github
  provider: oidc
  # provider: {{ $o.provider }}
  whitelist-domain: {{ $domainList }}
  scope: {{ $o.scope }}
  session-store-type: redis
  redis-connection-url: redis://redis-master
  redirect-url: https://auth.{{ $v.cluster.domain }}/oauth2/callback
  email-domain: "*"
  cookie-domain: {{ $domainList }}
  cookie-samesite: none
  cookie-secure: true
  # cookie-httponly: true
  reverse-proxy: true
  cookie-refresh: 0h60m0s
  pass-authorization-header: true
  # pass-basic-auth: true
  skip-auth-regex: /healthz,/metrics,/api/datasources,/api/dashboards,/api/topology,/api/authenticate,/hook
  silence-ping-logging: true
  # exclude-logging-paths: /ping
  set-authorization-header: true
  # set-xauthrequest: true
  ###
  # Provider specifics:
  ###
  {{- if eq $o.provider "oidc" }}
  oidc-issuer-url: {{ $provider | getOrNil "issuer" | default (printf "https://keycloak.%s/realms/%s" $v.cluster.domain $realm) }}
  insecure-oidc-allow-unverified-email: true
  {{- else if eq $o.provider "azure" }}
  azure-tenant: {{ $o.azure.tenantID }}
  {{- else if eq $o.provider "keycloak" }}
  login-url: https://keycloak.{{ $v.cluster.domain }}/realms/{{ $realm }}/protocol/openid-connect/auth
  redeem-url: https://keycloak.{{ $v.cluster.domain }}/realms/{{ $realm }}/protocol/openid-connect/token
  # redeem-url: http://keycloak-http.keycloak/realms/{{ $realm }}/protocol/openid-connect/token
  validate-url: https://keycloak.{{ $v.cluster.domain }}/realms/{{ $realm }}/protocol/openid-connect/userinfo
  # validate-url: http://keycloak-http.keycloak/realms/{{ $realm }}/protocol/openid-connect/userinfo
  {{- else if eq $o.provider "github" }}
  github-org: {{ $o | getOrNil "github.org" }}
  {{- end }}

