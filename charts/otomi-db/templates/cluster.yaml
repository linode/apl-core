apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: {{ .Values.name }}
  labels:
  {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  instances: {{ .Values.instances }}
  {{- with .Values.imageName }}
  imageName: {{ . }}
  {{- end }}
  storage:
    {{- with .Values.storage.storageClass }}
    storageClass: {{ . }}
    {{- end }}
    size: {{ .Values.storage.size }}
  walStorage:
    {{- with .Values.walStorage.storageClass }}
    storageClass: {{ . }}
    {{- end }}
    size: {{ .Values.walStorage.size }}
  {{- with .Values.monitoring }}
  monitoring:
    enablePodMonitor: {{ . }}
  {{- end }}
  resources:
    {{- with .Values.resources }}
    {{- toYaml . | nindent 4 }}
    {{- else }}
    limits:
      cpu: 100m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 256Mi
    {{- end }}
  {{- with .Values.clusterAffinity }}
  {{- toYaml . | nindent 2 }}
  {{- end }}
{{- if .Values.backup.enabled }}
  {{- if eq .Values.backup.type "minioLocal" }}
  backup:
    retentionPolicy: {{ .Values.backup.retentionPolicy }}
    barmanObjectStore:
      destinationPath: s3://database
      endpointURL: "http://minio.minio.svc.cluster.local:9000"
      s3Credentials:
        accessKeyId:
          name: minio-creds
          key: MINIO_ACCESS_KEY
        secretAccessKey:
          name: minio-creds
          key: MINIO_SECRET_KEY
  {{- end }}
  {{- if eq .Values.backup.type "azure" }}
  backup:
    retentionPolicy: {{ .Values.backup.retentionPolicy }}
    barmanObjectStore:
      destinationPath: "https://{{ .Values.backup.azure.accountName }}.blob.core.windows.net/{{ .Values.backup.azure.containerName }}"
      azureCredentials:
        storageAccount:
          name: azure-creds
          key: AZURE_STORAGE_ACCOUNT
        storageKey:
          name: azure-creds
          key: AZURE_STORAGE_KEY
  {{- end }}
  {{- if eq .Values.backup.type "s3" }}
  backup:
  retentionPolicy: {{ .Values.backup.retentionPolicy }}
    barmanObjectStore:
      destinationPath: s3://{{ .Values.backup.s3.bucket }}
      endpointURL: {{ .Values.backup.endpointURL }}
      s3Credentials:
        accessKeyId:
          name: s3-creds
          key: S3_STORAGE_ACCOUNT
        secretAccessKey:
          name: s3-creds
          key: S3_STORAGE_KEY
  {{- end }}
  {{- if eq .Values.backup.type "gcs" }}
  backup:
    retentionPolicy: {{ .Values.backup.retentionPolicy }}
    barmanObjectStore:
      destinationPath: "gs://{{ .Values.backup.gcs.bucket }}"
      googleCredentials:
        applicationCredentials:
          name: gcs-creds
          key: gcsCredentials
  {{- end }}
{{- end }}
  {{- with .Values.clusterSpec }}
  {{- toYaml . | nindent 2 }}
  {{- end }}
