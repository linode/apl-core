{{- if eq (include "drone.providerOK" .) "true" }}
{{- $image := (printf "%s:%s" .Values.images.server.repository .Values.images.server.tag) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "drone.fullname" . }}-server
  namespace: {{ template "drone.namespace" . }}
  labels:
    app: {{ template "drone.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: server
spec:
  selector:
    matchLabels:
      app: {{ template "drone.name" . }}
      release: "{{ .Release.Name }}"
      component: server
  strategy:
    type: {{ .Values.server.strategyType }}
  replicas: 1
  template:
    metadata:
      annotations:
        checksum/secrets: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if .Values.metrics.prometheus.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        {{- end }}
        {{- if .Values.server.annotations }}
        {{ toYaml .Values.server.annotations | nindent 8 }}
        {{- end }}
      labels:
        app: {{ template "drone.name" . }}
        release: "{{ .Release.Name }}"
        component: server
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.server.securityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.server.schedulerName }}
      schedulerName: "{{ . }}"
      {{- end }}
      {{- with .Values.server.affinity }}
      affinity: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.server.nodeSelector }}
      nodeSelector: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.server.tolerations }}
      tolerations: {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: server
          image: "{{ .Values.images.server.repository }}:{{ .Values.images.server.tag }}"
          imagePullPolicy: {{ .Values.images.server.pullPolicy }}
          env:
            - name: DRONE_AGENTS_ENABLED
              value: "true"
            - name: DRONE_GIT_ALWAYS_AUTH
              value: {{ .Values.server.alwaysAuth | quote }}
            - name: DRONE_SERVER_HOST
            {{- with .Values.server.host }}
              value: "{{ . }}"
            {{- else }}
              value: "{{ template "drone.fullname" . }}"
            {{- end }}
            - name: DRONE_RPC_PROTO
              value: "{{ .Values.server.rpcProtocol }}"
            - name: DRONE_RPC_HOST
              value: "{{ template "drone.fullname" . }}.{{ template "drone.namespace" . }}:{{ .Values.service.httpPort }}"
            - name: DRONE_SERVER_PROTO
              value: {{ .Values.server.protocol }}
            - name: DRONE_RPC_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "drone.fullname" . }}
                  key: secret
            {{- range $secret, $keys := .Values.server.envSecrets }}
            {{- range $keys }}
            - name: {{ . }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret }}
                  key: {{ . | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.server.adminUser }}
            - name: DRONE_USER_CREATE
              valueFrom:
                secretKeyRef:
                  name: {{ template "drone.fullname" . }}-envfile
                  key: DRONE_USER_CREATE
            {{- end }}
            {{- range $key, $value := .Values.server.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- include "drone.providerEnvs" . | nindent 12 }}
          ports:
          - name: http
            containerPort: 80
            protocol: TCP
          - name: https
            containerPort: 443
            protocol: TCP
          - name: grpc
            containerPort: 9000
            protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          resources: {{- toYaml .Values.server.resources | nindent 12 }}
          volumeMounts:
            {{- if eq .Values.sourceControl.provider "bitbucketServer" }}
            - name: bitbucket-private-key
              mountPath: /etc/bitbucket
              readOnly: true
            {{- end }}
            - name: data
              mountPath: /var/lib/drone
            {{- if .Values.customCa }}
            - name: custom-ca
              mountPath: /etc/ssl/certs/ca-certificates.crt
              subPath: ca-certificates.crt
            {{- end }}
      volumes:
        {{- if eq .Values.sourceControl.provider "bitbucketServer" }}
        - name: bitbucket-private-key
          secret:
            secretName: {{ template "drone.sourceControlSecret" . }}
            items:
              - key: {{ .Values.sourceControl.bitbucketServer.privateKey }}
                path: key.pem
        {{- end }}
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "drone.fullname" .) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if .Values.customCa }}
        - name: custom-ca
          secret:
            secretName: {{ template "drone.fullname" . }}-ca
        {{- end }}
        {{- with .Values.server.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
{{ end }}
