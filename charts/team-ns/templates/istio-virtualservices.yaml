{{- $v := .Values }}
{{- $k := $v.apps.keycloak | default dict }}
{{- $kkMaster := printf "https://keycloak.%s/realms/otomi" $v.cluster.domainSuffix }}
{{- $ := . }}
{{- range $s := $v.services }}
  {{- $type := $s.type | default "public" }}
  {{- $hasAuth := $s.auth | default false }}
  {{- $hasTlsPass := $s.tlsPass | default false }}
  {{- $ns := index $s "namespace" | default $.Release.Namespace }}
  {{- if and (not (eq $type "cluster")) (not (and $s.ksvc (not $v.apps.knative.enabled))) }}
    {{- $name := $s.svc | default $s.name }}
    {{- $svc := (hasKey $s "hasPrefix" | ternary (printf "%s-%s" $v.teamId $name) $name) }}
    {{- $domain := include "service.domain" (dict "s" $s "dot" $ "vs" true) }}
    {{- $knativeServiceDomain := printf "%s.%s" $s.name $v.domain }}
    {{- if not (and $s.ksvc (eq $knativeServiceDomain $domain)) }}
      {{- $vsName := include "flatten-name" (printf "%s%s" $domain (hasKey $s "paths" | ternary (printf "-%s" (include "helm-toolkit.utils.joinListWithSep" (dict "list" $s.paths "sep" "|"))) "")) }}
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: {{ $vsName }}
  labels: {{- include "team-ns.chart-labels" $ | nindent 4 }}
      {{- if $hasAuth }}
    auth: "true"
      {{- end }}
spec:
  gateways:
      {{- if hasKey $s "ksvc" }}
    - knative-serving/knative-ingress-gateway
      {{- else }}
    - {{ $.Release.Namespace }}/team-{{ $v.teamId }}-{{ $type }}-tls{{ if $hasTlsPass }}pass{{ else }}term{{ end }}
      {{- end }}
  hosts:
    - {{ $domain }}
      {{- if $hasTlsPass }}
  tls:
    - match:
        - port: 443
          sniHosts:
            - {{ $domain }}
      route:
        - destination:
            host: {{ $svc }}.{{ $ns }}.svc.cluster.local
            port:
              number: {{ $s.port | default 443 }}
      {{- else }}
  http:
    - match:
        - uri:
            prefix: /logout-otomi
      redirect:
        authority: auth.{{ $v.cluster.domainSuffix }}
        uri: /oauth2/sign_out?rd={{ $kkMaster }}/protocol/openid-connect/logout?redirect_uri=https://{{ printf "otomi.%s" $v.cluster.domainSuffix }}
    -
        {{- with $s.paths | default (list "/") }}
      match:
          {{- range $path := . }}
        - uri:
            prefix: '{{ $path }}'        
          {{- end }}
        {{- end }}
        {{- if or (hasKey $s "ksvc") (not (hasKey $s "forwardPath")) }}
      rewrite:
          {{- if hasKey $s "ksvc" }}
        authority: {{ $s.name }}.{{ $v.domain }}
          {{- end }}
          {{- if not (hasKey $s "forwardPath") }}
        uri: /
          {{- end }}
        {{- end }}
        {{- if hasKey $s "ksvc" }}
      route:
        - destination:
            host: istio-ingressgateway-{{ $type }}.istio-system.svc.cluster.local
        {{- else }}
      route:
        - destination:
            host: {{ $svc }}.{{ $ns }}.svc.cluster.local
        {{- end }}
            port:
              number: {{ $s.port | default 80 }}
          headers:
            request:
              set:
                # fix for istio (=envoy) incorrectly setting proto to http
                # (@see https://github.com/istio/istio/issues/7964):
                X-Forwarded-Proto: https
            {{- with (dig "headers" "response" "set" nil $s) }}
            response:
              set:
              {{- range . }}
                {{ .name }}: {{ .value | quote }}
              {{- end }}
            {{- end }}

        {{- if hasKey $s "removeRequestHeaders" }}
              remove: {{- $s.removeRequestHeaders | toYaml | nindent 16 }}
        {{- end }}
      {{- end }}
---
      {{- if and ($hasAuth) (hasKey $s "authz") }}
        {{- $workload := ($s.authz.workload | toYaml | replace "__TEAM" $v.teamId) }}
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: {{ $vsName }}
  namespace: {{ $ns }}
spec:
  selector:
    matchLabels: {{ $workload | nindent 6 }}
  jwtRules:
    - issuer: {{ $kkMaster }}
      jwksUri: {{ $kkMaster }}/protocol/openid-connect/certs
      audiences:
        - {{ $k.idp.clientID }}
      forwardOriginalToken: {{ $s.authz.forwardOriginalToken | default false }}
---    
      {{- $principal := printf "https://keycloak.%s/realms/otomi/*" $v.cluster.domainSuffix }}
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: {{ $vsName }}
  namespace: {{ $ns }}
spec:
  selector:
    matchLabels: {{ $workload | nindent 6 }}
  action: ALLOW
  rules:
    - from: 
        - source:
            requestPrincipals: [{{ $principal }}]
        {{- if not $s.isShared }}
      when:
        - key: request.auth.claims[groups]
          values: [{{ if not (eq $v.teamId "admin") }}team-{{ $v.teamId }},{{ end }}team-admin,admin]
        {{- end }}
      to:
        - operation:
        {{- with $s.authz.paths }}
            paths:
            {{- range $path := . }}
              - {{ $path }}
            {{- end }}
        {{- end }}
            hosts: [{{ $domain }}]
        {{- if $s.authz.excludePaths }}
            notPaths: [{{ include "helm-toolkit.utils.joinListWithSep" (dict "list" $s.authz.excludePaths "sep" ",") }}]
        {{- end }}
    - from:
        - source:
            notRequestPrincipals: [{{ $principal }}]
---
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
