{{- $v := .Values }}
{{- $k := $v.charts.keycloak | default dict }}
{{- $hasKeycloak := $k.enabled | default true }}
{{- $kkMaster := printf "https://keycloak.%s/realms/master" $v.cluster.domainSuffix }}
{{- if or (eq $v.teamId "admin") ($v.otomi.isMultitenant) }}
  {{- $ := . }}
  {{- range $s := $v.services }}
    {{- $type := $s.type | default "public" }}
    {{- $hasAuth := $s.auth | default false }}
    {{- $hasTlsPass := $s.tlsPass | default false }}
    {{- $ns := index $s "namespace" | default $.Release.Namespace }}
    {{- if not (or (eq $type "cluster") (hasKey $s "host")) }}
      {{- $svc := (hasKey $s "hasPrefix" | ternary (printf "%s-%s" $v.teamId ($s.svc | default $s.name)) ($s.svc | default $s.name)) }}
      {{- $domain := include "service.domain" (dict "s" $s "dot" $ "vs" true) }}
      {{- $knativeServiceDomain := printf "%s.%s" $s.name $v.cluster.domainSuffix }}
      {{- if not (and $s.ksvc (eq $knativeServiceDomain $domain)) }}
        {{- $vsName := include "flatten-name" (printf "%s%s" $domain (hasKey $s "paths" | ternary (printf "-%s" (include "helm-toolkit.utils.joinListWithSep" (dict "list" $s.paths "sep" "|"))) "")) }}
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: {{ $vsName }}
  labels: {{- include "chart-labels" $ | nindent 4 }}
        {{- if $hasAuth }}
    auth: "true"
        {{- end }}
spec:
  gateways:
        {{- if hasKey $s "ksvc" }}
    - knative-serving/knative-ingress-gateway
        {{- else }}
    - {{ $.Release.Namespace }}/team-{{ $v.teamId }}-{{ $type }}-tls{{ if $hasTlsPass }}pass{{ else }}term{{ end }}
        {{- end }}
  hosts:
    - {{ $domain }}
        {{- if $hasTlsPass }}
  tls:
    - match:
        - port: 443
          sniHosts:
            - {{ $domain }}
      route:
        - destination:
            host: {{ $svc }}.{{ $ns }}.svc.cluster.local
            port:
              number: 443      
        {{- else }}
  http:
    - match:
        - uri:
            prefix: /logout-otomi
      redirect:
        authority: auth.{{ $v.cluster.domainSuffix }}
        uri: /oauth2/sign_out?rd={{ $kkMaster }}/protocol/openid-connect/logout?redirect_uri=https://{{ printf "otomi.%s" $v.cluster.domainSuffix }}
    -
          {{- with $s.paths | default (list "/") }}
      match:
            {{- range $path := . }}
        - uri:
            prefix: '{{ $path }}'        
            {{- end }}
          {{- end }}
          {{- if or (hasKey $s "ksvc") (not (hasKey $s "forwardPath")) }}
      rewrite:
            {{- if hasKey $s "ksvc" }}
        authority: {{ $s.name }}.{{ $v.domain }}
            {{- end }}
            {{- if not (hasKey $s "forwardPath") }}
        uri: /
            {{- end }}
          {{- end }}
          {{- if hasKey $s "ksvc" }}
      route:
        - destination:
            host: istio-ingressgateway.istio-system.svc.cluster.local
          {{- else }}
      route:
        - destination:
            host: {{ $svc }}.{{ $ns }}.svc.cluster.local
          {{- end }}
            port:
              number: {{ $s.port | default 80 }}
      # fix for istio (=envoy) incorrectly setting proto to http
      # (@see https://github.com/istio/istio/issues/7964):
          headers:
            request:
              set:
                X-Forwarded-Proto: https
        {{- end }}
---
        {{- if and ($hasAuth) (hasKey $s "authz") }}
          {{- $workload := ($s.authz.workload | toYaml | replace "__TEAM" $v.teamId) }}
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: {{ $vsName }}
  namespace: {{ $ns }}
spec:
  selector:
    matchLabels: {{ $workload | nindent 6 }}
  jwtRules:
          {{- if $hasKeycloak }}
    - issuer: {{ $kkMaster }}
      jwksUri: {{ $kkMaster }}/protocol/openid-connect/certs
      audiences:
        - {{ $k.idp.clientID }}
          {{- else }}
    - issuer: {{ $v.oidc.issuer }}
            {{- if hasKey $v.oidc "jwks" }}
      jwks: {{ $v.oidc.jwks }}
            {{- else if hasKey $v.oidc "jwksUri" }}
      jwksUri: {{ $v.oidc.jwksUri }}
            {{- end }}
          {{- end }}
      forwardOriginalToken: {{ $s.authz.forwardOriginalToken | default false }}
---    
        {{- if $hasKeycloak }}
          {{- $realm := $k.realm | default "master" }}
          {{- $principal := printf "https://keycloak.%s/realms/%s/*" $v.cluster.domainSuffix $realm }}
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: {{ $vsName }}
  namespace: {{ $ns }}
spec:
  selector:
    matchLabels: {{ $workload | nindent 6 }}
  action: ALLOW
  rules:
    - from: 
        - source:
            requestPrincipals: [{{ $principal }}]
            {{- if not $s.isShared }}
      when:
        - key: request.auth.claims[groups]
          values: [{{ if not (eq $v.teamId "admin") }}team-{{ $v.teamId }},{{ end }}team-admin,admin]
            {{- end }}
      to:
        - operation:
            {{- with $s.authz.paths }}
            paths:
              {{- range $path := . }}
              - {{ $path }}
              {{- end }}
            {{- end }}
            hosts: [{{ $domain }}]
            {{- if $s.authz.excludePaths }}
            notPaths: [{{ include "helm-toolkit.utils.joinListWithSep" (dict "list" $s.authz.excludePaths "sep" ",") }}]
            {{- end }}
    - from:
        - source:
            notRequestPrincipals: [{{ $principal }}]
---
          {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
