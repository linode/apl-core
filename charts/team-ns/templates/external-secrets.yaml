{{- $v := .Values }}
{{- $ := . }}
{{- if get (index $v.apps "external-secrets") "enabled" }}
{{- range $s := $v.secrets }}
{{- $pathPrefix := printf "secret/data/teams/team-%s" $v.teamId }}
{{- $vaultPath := printf "%s/%s" $pathPrefix $s.name | quote }}
{{- $teamNamespacesCollection := print "team-" (include "helm-toolkit.utils.joinListWithSep" (dict "list" $v.teamIds "sep" ",team-")) }}
{{- $teamNamespacesSelection := print "team-" (include "helm-toolkit.utils.joinListWithSep" (dict "list" ($s.teams | default list) "sep" ",team-")) }}
{{- $namespacesSelection := (include "helm-toolkit.utils.joinListWithSep" (dict "list" ($s.namespaces | default list) "sep" ",")) }}

apiVersion: external-secrets.io/v1beta1
{{- if and (eq $v.teamId "admin") (or ($s.clusterWide | default false) ($s.teamsWide | default false)) }}
kind: ClusterExternalSecret
{{- else }}
kind: ExternalSecret
{{- end }}
metadata:
  {{- if $s.clusterWide | default false }}
  name: otomi-cw-{{ $s.name }}
  {{- else if $s.teamsWide | default false }}
  name: otomi-tw-{{ $s.name }}
  {{- else if (gt (len ($s.teams | default list)) 0) }}
  name: otomi-team-{{ $v.teamId }}-{{ $s.name }}
  {{- else }}
  name: {{ $s.name }}
  {{- end }}
  labels: {{- include "team-ns.chart-labels" $ | nindent 4 }}
    {{- with $s.labels }}
    {{- . | toYaml | nindent 4 }}
    {{- end }}
spec:
  {{- if or (and (eq $v.teamId "admin") (or ($s.clusterWide | default false)) ($s.teamsWide | default false)) (and (eq $v.teamId "admin") (gt (len ($s.namespaces | default list)) 0)) (gt (len ($s.teams | default list)) 0) }}
  namespaceSelector:
    {{- if $s.clusterWide | default false }}
    matchLabels: 
      {}
    {{- else if ($s.teamsWide | default false) }}
    matchExpressions:
      - {key: name, operator: In, values: [{{ $teamNamespacesCollection }}]}
    {{- else if (gt (len ($s.namespaces | default list)) 0) }}
    matchExpressions:
      - {key: name, operator: In, values: [{{ $namespacesSelection }}]}
    {{- else if (gt (len ($s.teams | default list)) 0)}}
    matchExpressions:
      - {key: name, operator: In, values: [{{ $teamNamespacesSelection }}]}
    {{- end }}
  externalSecretSpec:
  {{- end }}
    secretStoreRef:
      name: vault-backend
      kind: ClusterSecretStore
    target:
      template:
  {{- if eq $s.type "tls" }}
        type: kubernetes.io/tls
    data:
      - remoteRef:
          key: {{ $vaultPath }}
          property: {{ $s.crt | default "tls.crt" }}
        secretKey: tls.crt
      - remoteRef:
          key: {{ $vaultPath }}
          property: {{ $s.key | default "tls.key" }}
        secretKey: tls.key
    {{- if hasKey $s "ca" }}
      - remoteRef:
          key: {{ $vaultPath }}
          property: {{ $s.ca | default "ca.crt" }}
        secretKey: ca.crt
        {{- end }}
  {{- else if eq $s.type "generic" }}
        type: Opaque
    data:
    {{- range .entries }}
      - remoteRef:
          key: {{ $vaultPath }}
          property: {{ . }}
        secretKey: {{ . }}
    {{- end }}
  {{- else if eq $s.type "docker-registry" }}
        type: kubernetes.io/dockerconfigjson
    data:
      - remoteRef:
          key: {{ $vaultPath }}
        secretKey: ".dockerconfigjson"
  {{- end }}
---      
{{- end }}
{{- end }}
