{{- $v := .Values}}
{{- $t := $v.teamApps.tekton }}
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: git-clone
  annotations:
    # Use ArgoCD sync wave annotation to ensure tasks are created first
    argocd.argoproj.io/sync-wave: "-5"
    tekton.dev/pipelines.minVersion: "0.38.0"
    tekton.dev/categories: Git
    tekton.dev/tags: git
    tekton.dev/displayName: "git clone"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
  labels:
    app.kubernetes.io/version: "0.9"
spec:
  stepTemplate:
    computeResources:
    {{- $t.resources.gitCloneTask | toYaml | nindent 6 }}
  description: >-
    These Tasks are Git tasks to work with repositories used by other tasks
    in your Pipeline.

    The git-clone Task will clone a repo from the provided url into the
    output Workspace. By default the repo will be cloned into the root of
    your Workspace. You can clone into a subdirectory by setting this Task's
    subdirectory param. This Task also supports sparse checkouts. To perform
    a sparse checkout, pass a list of comma separated directory patterns to
    this Task's sparseCheckoutDirectories param.
  workspaces:
    - name: output
      description: The git repo will be cloned onto the volume backing this Workspace.
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
    - name: basic-auth
      optional: true
      description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
    - name: ssl-ca-directory
      optional: true
      description: |
        A workspace containing CA certificates, this will be used by Git to
        verify the peer with when fetching or pushing over HTTPS.
  params:
    - name: url
      description: Repository URL to clone from.
      type: string
    - name: revision
      description: Revision to checkout. (branch, tag, sha, ref, etc...)
      type: string
      default: ""
    - name: refspec
      description: Refspec to fetch before checking out revision.
      type: string
      default: ""
    - name: submodules
      description: Initialize and fetch git submodules.
      type: string
      default: "true"
    - name: depth
      description: Perform a shallow clone, fetching only the most recent N commits.
      type: string
      default: "1"
    - name: sslVerify
      description: Set the `http.sslVerify` global git config. Setting this to `false` is not advised unless you are sure that you trust your git remote.
      type: string
      default: "true"
    - name: crtFileName
      description: file name of mounted crt using ssl-ca-directory workspace. default value is ca-bundle.crt.
      type: string
      default: "ca-bundle.crt"
    - name: subdirectory
      description: Subdirectory inside the `output` Workspace to clone the repo into.
      type: string
      default: ""
    - name: sparseCheckoutDirectories
      description: Define the directory patterns to match or exclude when performing a sparse checkout.
      type: string
      default: ""
    - name: deleteExisting
      description: Clean out the contents of the destination directory if it already exists before cloning.
      type: string
      default: "true"
    - name: httpProxy
      description: HTTP proxy server for non-SSL requests.
      type: string
      default: ""
    - name: httpsProxy
      description: HTTPS proxy server for SSL requests.
      type: string
      default: ""
    - name: noProxy
      description: Opt out of proxying HTTP/HTTPS requests.
      type: string
      default: ""
    - name: verbose
      description: Log the commands that are executed during `git-clone`'s operation.
      type: string
      default: "true"
    - name: gitInitImage
      description: The image providing the git-init binary that this Task runs.
      type: string
      {{- if $v.linodeLkeImageRepository }}
      default: "{{- $v.linodeLkeImageRepository }}/ghcr/tektoncd/github.com/tektoncd/pipeline/cmd/git-init:v0.40.2"
      {{- else }}
      default: "ghcr.io/tektoncd/github.com/tektoncd/pipeline/cmd/git-init:v0.40.2"
      {{- end }}
    - name: userHome
      description: |
        Absolute path to the user's home directory.
      type: string
      default: "/home/git"
  results:
    - name: commit
      description: The precise commit SHA that was fetched by this Task.
      type: string
    - name: url
      description: The precise URL that was fetched by this Task.
      type: string
    - name: committer-date
      description: The epoch timestamp of the commit that was fetched by this Task.
      type: string
  steps:
    - name: clone
      computeResources: {}
      image: "$(params.gitInitImage)"
      env:
      - name: HOME
        value: "$(params.userHome)"
      - name: PARAM_URL
        value: $(params.url)
      - name: PARAM_REVISION
        value: $(params.revision)
      - name: PARAM_REFSPEC
        value: $(params.refspec)
      - name: PARAM_SUBMODULES
        value: $(params.submodules)
      - name: PARAM_DEPTH
        value: $(params.depth)
      - name: PARAM_SSL_VERIFY
        value: $(params.sslVerify)
      - name: PARAM_CRT_FILENAME
        value: $(params.crtFileName)
      - name: PARAM_SUBDIRECTORY
        value: $(params.subdirectory)
      - name: PARAM_DELETE_EXISTING
        value: $(params.deleteExisting)
      - name: PARAM_HTTP_PROXY
        value: $(params.httpProxy)
      - name: PARAM_HTTPS_PROXY
        value: $(params.httpsProxy)
      - name: PARAM_NO_PROXY
        value: $(params.noProxy)
      - name: PARAM_VERBOSE
        value: $(params.verbose)
      - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
        value: $(params.sparseCheckoutDirectories)
      - name: PARAM_USER_HOME
        value: $(params.userHome)
      - name: WORKSPACE_OUTPUT_PATH
        value: $(workspaces.output.path)
      - name: WORKSPACE_SSH_DIRECTORY_BOUND
        value: $(workspaces.ssh-directory.bound)
      - name: WORKSPACE_SSH_DIRECTORY_PATH
        value: $(workspaces.ssh-directory.path)
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
        value: $(workspaces.basic-auth.bound)
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
        value: $(workspaces.basic-auth.path)
      - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
        value: $(workspaces.ssl-ca-directory.bound)
      - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
        value: $(workspaces.ssl-ca-directory.path)
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - "ALL"
        runAsUser: 65532
        runAsGroup: 65532
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      script: |
        #!/usr/bin/env sh
        set -eu

        extract_hostname() {
          url="$1"
          if echo "$url" | grep -q "^https\?://"; then
            echo "$url" | sed -E 's|^https?://([^/]+).*|\1|'
          elif echo "$url" | grep -q "^git@"; then
            echo "$url" | sed -E 's|^git@([^:]+):.*|\1|'
          else
            echo "$url" | sed -E 's|^[^@]*@?([^:/]+).*|\1|'
          fi
        }

        convert_https_to_ssh() {
          url="$1"
          if echo "$url" | grep -q "^https\?://"; then
            host=$(echo "$url" | sed -E 's|^https?://([^/]+)/(.*)|\1|')
            path=$(echo "$url" | sed -E 's|^https?://[^/]+/(.*)|\1|')
            echo "git@${host}:${path}"
          else
            echo "$url"
          fi
        }

        convert_ssh_to_https() {
          url="$1"
          if echo "$url" | grep -q "^git@"; then
            host=$(echo "$url" | sed -E 's|^git@([^:]+):.*|\1|')
            path=$(echo "$url" | sed -E 's|^git@[^:]+:(.*)|\1|')
            echo "https://${host}/${path}"
          else
            echo "$url"
          fi
        }

        # Detect available credentials
        HAS_SSH_KEY=false
        HAS_BASIC_AUTH=false

        # Check ssh-directory workspace for credentials
        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ]; then
          if [ -f "${WORKSPACE_SSH_DIRECTORY_PATH}/ssh-privatekey" ]; then
            HAS_SSH_KEY=true
          elif [ -f "${WORKSPACE_SSH_DIRECTORY_PATH}/username" ] && [ -f "${WORKSPACE_SSH_DIRECTORY_PATH}/password" ]; then
            HAS_BASIC_AUTH=true
          elif [ -f "${WORKSPACE_SSH_DIRECTORY_PATH}/.git-credentials" ]; then
            HAS_BASIC_AUTH=true
          fi
        fi

        # Smart URL conversion based on credentials
        ORIGINAL_URL="${PARAM_URL}"

        if [ "$HAS_SSH_KEY" = "true" ] && echo "${PARAM_URL}" | grep -q "^https\?://"; then
          # SSH key provided but URL is HTTPS - convert to SSH
          PARAM_URL=$(convert_https_to_ssh "${PARAM_URL}")
          echo "INFO: Converted HTTPS URL to SSH format for SSH key authentication"
          echo "  ${ORIGINAL_URL} -> ${PARAM_URL}"
        elif [ "$HAS_BASIC_AUTH" = "true" ] && [ "$HAS_SSH_KEY" = "false" ] && echo "${PARAM_URL}" | grep -q "^git@"; then
          # Basic auth provided (and no SSH key) but URL is SSH - convert to HTTPS
          PARAM_URL=$(convert_ssh_to_https "${PARAM_URL}")
          echo "INFO: Converted SSH URL to HTTPS format for basic authentication"
          echo "  ${ORIGINAL_URL} -> ${PARAM_URL}"
        fi

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          (
            set +x  # Disable verbose mode for credential operations
            if [ -f "${WORKSPACE_SSH_DIRECTORY_PATH}/ssh-privatekey" ]; then
              mkdir -p "${PARAM_USER_HOME}"/.ssh 2>/dev/null
              chmod 700 "${PARAM_USER_HOME}"/.ssh 2>/dev/null

              cp "${WORKSPACE_SSH_DIRECTORY_PATH}/ssh-privatekey" "${PARAM_USER_HOME}/.ssh/id_rsa" 2>/dev/null
              chmod 600 "${PARAM_USER_HOME}/.ssh/id_rsa" 2>/dev/null

              # Reformat SSH key to fix line break issues from sealed secrets
              if grep -q "BEGIN.*PRIVATE KEY" "${PARAM_USER_HOME}/.ssh/id_rsa" 2>/dev/null; then
                sed -n "/BEGIN.*PRIVATE KEY/,/END.*PRIVATE KEY/p" "${PARAM_USER_HOME}/.ssh/id_rsa" 2>/dev/null | \
                  awk 'NR==1 {header=$0; next} /END.*PRIVATE KEY/ {footer=$0; next} {body=body$0} END {
                    print header
                    gsub(/[[:space:]]/, "", body)
                    while (length(body) > 70) {
                      print substr(body, 1, 70)
                      body = substr(body, 71)
                    }
                    if (length(body) > 0) print body
                    print footer
                  }' > "${PARAM_USER_HOME}/.ssh/id_rsa.reformatted" 2>/dev/null

                mv "${PARAM_USER_HOME}/.ssh/id_rsa.reformatted" "${PARAM_USER_HOME}/.ssh/id_rsa" 2>/dev/null
                chmod 600 "${PARAM_USER_HOME}/.ssh/id_rsa" 2>/dev/null
              fi

              # Try to convert key format if validation fails
              if ! ssh-keygen -l -f "${PARAM_USER_HOME}/.ssh/id_rsa" > /dev/null 2>&1; then
                ssh-keygen -p -m OpenSSH -f "${PARAM_USER_HOME}/.ssh/id_rsa" -N "" -P "" > /dev/null 2>&1 || true
              fi

              if [ -f "${WORKSPACE_SSH_DIRECTORY_PATH}/known_hosts" ]; then
                cp "${WORKSPACE_SSH_DIRECTORY_PATH}/known_hosts" "${PARAM_USER_HOME}/.ssh/known_hosts" 2>/dev/null
                chmod 600 "${PARAM_USER_HOME}/.ssh/known_hosts" 2>/dev/null
              else
                if echo "${PARAM_URL}" | grep -q "github.com" 2>/dev/null; then
                  ssh-keyscan github.com >> "${PARAM_USER_HOME}/.ssh/known_hosts" 2>/dev/null || true
                elif echo "${PARAM_URL}" | grep -q "gitlab.com" 2>/dev/null; then
                  ssh-keyscan gitlab.com >> "${PARAM_USER_HOME}/.ssh/known_hosts" 2>/dev/null || true
                fi

                if [ ! -s "${PARAM_USER_HOME}/.ssh/known_hosts" ]; then
                  printf "Host *\n  StrictHostKeyChecking no\n  UserKnownHostsFile=/dev/null\n" > "${PARAM_USER_HOME}/.ssh/config" 2>/dev/null
                  chmod 600 "${PARAM_USER_HOME}/.ssh/config" 2>/dev/null
                else
                  chmod 600 "${PARAM_USER_HOME}/.ssh/known_hosts" 2>/dev/null
                fi
              fi

              export GIT_SSH_COMMAND="ssh -i ${PARAM_USER_HOME}/.ssh/id_rsa -o IdentitiesOnly=yes -o BatchMode=yes"
            elif [ -f "${WORKSPACE_SSH_DIRECTORY_PATH}/username" ] && [ -f "${WORKSPACE_SSH_DIRECTORY_PATH}/password" ]; then
              # Handle basic-auth credentials from ssh-directory workspace
              USERNAME=$(cat "${WORKSPACE_SSH_DIRECTORY_PATH}/username" 2>/dev/null)
              PASSWORD=$(cat "${WORKSPACE_SSH_DIRECTORY_PATH}/password" 2>/dev/null)
              HOSTNAME=$(extract_hostname "${PARAM_URL}")

              echo "https://${USERNAME}:${PASSWORD}@${HOSTNAME}" > "${PARAM_USER_HOME}/.git-credentials" 2>/dev/null
              printf "[credential]\n  helper = store\n" > "${PARAM_USER_HOME}/.gitconfig" 2>/dev/null
              chmod 400 "${PARAM_USER_HOME}/.git-credentials" 2>/dev/null
              chmod 400 "${PARAM_USER_HOME}/.gitconfig" 2>/dev/null
            elif [ -f "${WORKSPACE_SSH_DIRECTORY_PATH}/.git-credentials" ]; then
              # Handle .git-credentials file from ssh-directory workspace
              cp "${WORKSPACE_SSH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials" 2>/dev/null
              chmod 400 "${PARAM_USER_HOME}/.git-credentials" 2>/dev/null
              if [ -f "${WORKSPACE_SSH_DIRECTORY_PATH}/.gitconfig" ]; then
                cp "${WORKSPACE_SSH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig" 2>/dev/null
                chmod 400 "${PARAM_USER_HOME}/.gitconfig" 2>/dev/null
              fi
            fi
          ) 2>/dev/null
        fi

        if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
           export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
           if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
              export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
           fi
        fi

        # Enable verbose mode only after credentials are set up
        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi

        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }

        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir || true
        fi

        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
        test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

        git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"
        /ko-app/git-init \
          -url="${PARAM_URL}" \
          -revision="${PARAM_REVISION}" \
          -refspec="${PARAM_REFSPEC}" \
          -path="${CHECKOUT_DIR}" \
          -sslVerify="${PARAM_SSL_VERIFY}" \
          -submodules="${PARAM_SUBMODULES}" \
          -depth="${PARAM_DEPTH}" \
          -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
        cd "${CHECKOUT_DIR}"
        RESULT_SHA="$(git rev-parse HEAD)"
        EXIT_CODE="$?"
        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi
        RESULT_COMMITTER_DATE="$(git log -1 --pretty=%ct)"
        printf "%s" "${RESULT_COMMITTER_DATE}" > "$(results.committer-date.path)"
        printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
        printf "%s" "${PARAM_URL}" > "$(results.url.path)"
