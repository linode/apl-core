{{- $v := .Values }}
# collect unique domain names
{{- $domains := list }}
{{- range $s := $v.services }}
{{- $shared := (and $s.isCore (eq $v.teamId "admin") (hasKey $s "isShared")) | default false }}
{{- if and (not (hasKey $s "internal")) (or (and (not $s.isCore) (not (hasKey $s "domain"))) (and $s.isCore (hasKey $s "ownHost")) $shared) (not (hasKey $s "hasCert")) (not (hasKey $s "host")) }}
{{- $domain := printf "%s.%s" $s.name ($shared | ternary $v.cluster.domain $v.domain) }}
{{- if not (has $domain $domains) }}
  {{- $domains = (append $domains $domain) }}
{{- end }}
{{- end }}
{{- end }}

{{- if eq $v.teamId "admin" -}}
  {{- $proxyDomain := printf "proxy.%s" $v.domain }}
  {{- $domains = (append $domains $proxyDomain) }}
{{- end }}
{{- $appsDomain := printf "apps.%s" $v.domain }}
{{- $domains = (append $domains $appsDomain) }}

{{- if and (not $v.cluster.useCloudCA) (or (eq $v.teamId "admin") ($v.cluster.isMultitenant)) }}

{{- range $domain := $domains }}
{{ $name := $domain | replace "." "-" }}
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: {{ $name }}
  namespace: {{ if $v.cluster.hasCloudLB }}ingress{{ else }}istio-system{{ end }}
  labels: {{- include "chart-labels" $ | nindent 4 }}
spec:
  secretName: {{ $name }}
  commonName: "{{ $domain }}"
  dnsNames:
  - '{{ $domain }}'
  issuerRef:
    kind: ClusterIssuer
    name: letsencrypt-{{ $v.certStage }}
  usages:
    - digital signature
    - key encipherment
    - ocsp signing
---
{{- end }}

{{- else if and $v.cluster.useCloudCA (or (eq $v.teamId "admin") ($v.cluster.isMultitenant)) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: certs-post-job-1-team-{{ $v.teamId }}
  labels: {{- include "chart-labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-5"
spec:
  template:
    metadata:
      name: certs-post-job-1-team-{{ $v.teamId }}
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: Never
      containers:
      - name: certs-job
        image: "otomi/tools:{{ $v.toolsVersion }}"
        command:
          - sh
          - -c
        args:
          - |
            sleep 5 # needed otherwise we get connection refused on the k8s api
            set -e
  {{- if eq $v.cluster.provider "aws" }}
            certArns=""
            {{- range $s := $v.services }}
            {{- if and (not (hasKey $s "certArn")) $s.domain }}
            certArn=$(aws acm request-certificate \
              --region {{ $v.cluster.region }} \
              --domain-name {{ $s.domain }} \
              --validation-method DNS \
              --idempotency-token '{{ $s.domain | replace "." "" | replace "-" "" }}' \
              --options CertificateTransparencyLoggingPreference=DISABLED | jq -r '.CertificateArn')
            certArns="$certArns$([ \"$certArns\" != \"\" ] && echo ',')$certArn"
            {{- else if $s.certArn }}
            certArns="$certArns$([ \"$certArns\" != \"\" ] && echo ','){{ $s.certArn }}"
            {{- end }}
            {{- end }}
            kubectl create cm cert-arns-team-{{ $v.teamId }} --from-literal=certArns=$certArns --dry-run=true -o yaml | kubectl apply -f -
  {{- else if eq $v.cluster.provider "google" }}
              # TODO: request cert
  {{- else if eq $v.cluster.provider "azure" }}
              # TODO: request cert
  {{- end }}
  {{- if eq $v.cluster.provider "aws" }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: certs-post-job-2-team-{{ $v.teamId }}
  labels: {{- include "chart-labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "-4"
spec:
  template:
    metadata:
      name: certs-post-job-2-team-{{ $v.teamId }}
      labels:
        app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
        app.kubernetes.io/instance: {{ .Release.Name | quote }}
        helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: Never
      containers:
      - name: certs-job
        image: "otomi/tools:{{ $v.toolsVersion }}"
        command:
          - sh
          - -c
        args:
          - |
            # get the certArns that were generated
            sleep 2 # needed otherwise we get connection refused on the k8s api
            oldCertArns="{{ include "helm-toolkit.utils.joinListWithComma" $v.ingress.certArns }}"
            oldCertArns="$(kubectl -n ingress get ing aws-team-{{ $v.teamId }}-external -o json | jq -r ".metadata.annotations[\"alb.ingress.kubernetes.io/certificate-arn\"])"
            certArns=$(kubectl get cm cert-arns-team-{{ $v.teamId }} -o json | jq -r '.data.certArns')
            certArns="$oldCertArns$([ \"$oldCertArns\" != \"\" ] && echo ',')$certArns"
            # patch the aws ingress
            kubectl -n ingress get ing aws-team-{{ $v.teamId }}-external -o json | jq ".metadata.annotations[\"alb.ingress.kubernetes.io/certificate-arn\"] = \"$certArns\"" | kubectl -n ingress apply -f -
  {{- end }}
{{- end }}

