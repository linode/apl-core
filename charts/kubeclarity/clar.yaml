---
# Source: kubeclarity/charts/kubeclarity-postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: kubeclarity-postgresql
    helm.sh/chart: kubeclarity-postgresql-10.12.2
    app.kubernetes.io/instance: kubeclarity
    app.kubernetes.io/managed-by: Helm
  name: kubeclarity-postgresql
  namespace: kubeclarity
---
# Source: kubeclarity/templates/grype_server/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeclarity-grype-server
  namespace: 'kubeclarity'
  labels:
    app.kubernetes.io/name: kubeclarity-grype-server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: kubeclarity
    helm.sh/chart: kubeclarity-2.3.0
---
# Source: kubeclarity/templates/sbom_db/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeclarity-sbom-db
  namespace: 'kubeclarity'
  labels:
    app.kubernetes.io/name: kubeclarity-sbom-db
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: kubeclarity
    helm.sh/chart: kubeclarity-2.3.0
---
# Source: kubeclarity/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeclarity
  namespace: 'kubeclarity'
  labels:
    app.kubernetes.io/name: kubeclarity
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: kubeclarity
    helm.sh/chart: kubeclarity-2.3.0
---
# Source: kubeclarity/templates/scanner-template-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubeclarity-scanner-template
  namespace: 'kubeclarity'
  labels:
    app.kubernetes.io/name: kubeclarity
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: kubeclarity
    helm.sh/chart: kubeclarity-2.3.0
data:
  config: |-
    apiVersion: batch/v1
    kind: Job
    metadata:
      labels:
        app: scanner
        sidecar.istio.io/inject: "false"
    spec:
      backoffLimit: 0
      ttlSecondsAfterFinished: 300
      template:
        metadata:
          labels:
            app: scanner
            sidecar.istio.io/inject: "false"
        spec:
          restartPolicy: Never
          volumes:
          - name: tmp-volume
            emptyDir: {}
          securityContext:
            fsGroup: 1001         
          containers:
          - name: vulnerability-scanner
            image: 'ghcr.io/openclarity/kubeclarity-runtime-k8s-scanner:v2.3.0'
            imagePullPolicy: Always
            volumeMounts:
              - mountPath: /tmp
                name: tmp-volume
            args:
            - scan
            - --log-level
            - warning
            env:
            - name: RESULT_SERVICE_ADDR
              value: kubeclarity.kubeclarity:8888
            - name: SBOM_DB_ADDR
              value: kubeclarity-sbom-db.kubeclarity:8080
            - name: ANALYZER_LIST
              value: syft gomod
            - name: ANALYZER_SCOPE
              value: squashed
            - name: SCANNERS_LIST
              value: grype
            - name: SCANNER_GRYPE_MODE
              value: REMOTE
            - name: REGISTRY_SKIP_VERIFY_TLS
              value: false
            - name: REGISTRY_USE_HTTP
              value: false
            - name: SCANNER_REMOTE_GRYPE_SERVER_ADDRESS
              value: kubeclarity-grype-server.kubeclarity:9991
            - name: SCANNER_REMOTE_GRYPE_SERVER_TIMEOUT
              value: 2m
            securityContext:
              capabilities:
                drop:
                - all
              runAsNonRoot: true
              runAsGroup: 1001
              runAsUser: 1001
              privileged: false
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
            resources:
              limits:
                cpu: 1000m
                memory: 1000Mi
              requests:
                cpu: 50m
                memory: 50Mi
          - name: cis-docker-benchmark-scanner
            image: 'ghcr.io/openclarity/kubeclarity-cis-docker-benchmark-scanner:v2.3.0'
            imagePullPolicy: Always
            args:
            - scan
            - --log-level
            - warning
            env:
            - name: RESULT_SERVICE_ADDR
              value: kubeclarity.kubeclarity:8888
            - name: TIMEOUT
              value: 2m
            - name: REGISTRY_SKIP_VERIFY_TLS
              value: false
            - name: REGISTRY_USE_HTTP
              value: false
            securityContext:
              capabilities:
                drop:
                  - all
              runAsNonRoot: true
              runAsGroup: 1001
              runAsUser: 1001
              privileged: false
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
            resources:
              limits:
                cpu: 1000m
                memory: 1000Mi
              requests:
                cpu: 50m
                memory: 50Mi
---
# Source: kubeclarity/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeclarity
  labels:
    app.kubernetes.io/name: kubeclarity
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: kubeclarity
    helm.sh/chart: kubeclarity-2.3.0
rules:
  # Runtime scan permissions
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["list"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["create","delete"]
---
# Source: kubeclarity/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubeclarity
  labels:
    app.kubernetes.io/name: kubeclarity
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: kubeclarity
    helm.sh/chart: kubeclarity-2.3.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubeclarity
subjects:
  - kind: ServiceAccount
    name: kubeclarity
    namespace: 'kubeclarity'
---
# Source: kubeclarity/charts/kubeclarity-postgresql/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeclarity-postgresql-metrics
  labels:
    app.kubernetes.io/name: kubeclarity-postgresql
    helm.sh/chart: kubeclarity-postgresql-10.12.2
    app.kubernetes.io/instance: kubeclarity
    app.kubernetes.io/managed-by: Helm
  annotations:
    prometheus.io/port: "9187"
    prometheus.io/scrape: "true"
  namespace: kubeclarity
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 9187
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: kubeclarity-postgresql
    app.kubernetes.io/instance: kubeclarity
    role: primary
---
# Source: kubeclarity/charts/kubeclarity-postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeclarity-postgresql-headless
  labels:
    app.kubernetes.io/name: kubeclarity-postgresql
    helm.sh/chart: kubeclarity-postgresql-10.12.2
    app.kubernetes.io/instance: kubeclarity
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: kubeclarity
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: kubeclarity-postgresql
    app.kubernetes.io/instance: kubeclarity
---
# Source: kubeclarity/charts/kubeclarity-postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeclarity-postgresql
  labels:
    app.kubernetes.io/name: kubeclarity-postgresql
    helm.sh/chart: kubeclarity-postgresql-10.12.2
    app.kubernetes.io/instance: kubeclarity
    app.kubernetes.io/managed-by: Helm
  annotations:
  namespace: kubeclarity
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: kubeclarity-postgresql
    app.kubernetes.io/instance: kubeclarity
    role: primary
---
# Source: kubeclarity/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeclarity
  namespace: 'kubeclarity'
  labels:
    app.kubernetes.io/name: kubeclarity
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: kubeclarity
    helm.sh/chart: kubeclarity-2.3.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubeclarity
  template:
    metadata:
      labels:
        app: kubeclarity
      annotations:
        policy.otomi.io/ignore: banned-image-tags

    spec:
      serviceAccountName: kubeclarity
      initContainers:
        - name: 'kubeclarity-wait-for-pg-db'
          image: docker.io/bitnami/postgresql:11.13.0-debian-10-r33
          command: ['sh', '-c', 'until pg_isready -h kubeclarity-postgresql -p 5432 -U "postgres" -d "dbname=kubeclarity";
            do echo waiting for database; sleep 2; done;']
          securityContext:
            runAsUser: 1001
          resources:
            requests:
              memory: "20Mi"
              cpu: "10m"
            limits:
              memory: "100Mi"
              cpu: "100m"
        - name: 'kubeclarity-wait-for-sbom-db'
          image: yauritux/busybox-curl
          args:
            - /bin/sh
            - -c
            - >
              set -x;
              while [ $(curl -sw '%{http_code}' "http://kubeclarity-sbom-db:8081/healthz/ready" -o /dev/null) -ne 200 ]; do
                echo waiting for sbom database; sleep 2;
              done;
          resources:
            requests:
              memory: "20Mi"
              cpu: "10m"
            limits:
              memory: "100Mi"
              cpu: "100m"
          securityContext:
            runAsUser: 1001
        - name: 'kubeclarity-wait-for-grype-server'
          image: yauritux/busybox-curl
          args:
            - /bin/sh
            - -c
            - >
              set -x;
              while [ $(curl -sw '%{http_code}' "http://kubeclarity-grype-server:8080/healthz/ready" -o /dev/null) -ne 200 ]; do
                echo waiting for grype-server to be ready; sleep 2;
              done;
          securityContext:
            runAsUser: 1001
          resources:
            requests:
              memory: "20Mi"
              cpu: "10m"
            limits:
              memory: "100Mi"
              cpu: "100m"
      containers:
        - name: kubeclarity
          image: 'ghcr.io/openclarity/kubeclarity:v2.3.0'
          imagePullPolicy: Always
          args:
            - run
            - --log-level
            - warning
          env:
            - name: ENABLE_DB_INFO_LOGS
              value: "false"
            # DB envs
            - name: DB_NAME
              value: kubeclarity
            - name: DB_HOST
              value: "kubeclarity-postgresql"
            - name: DB_PORT_NUMBER
              value: "5432"
            - name: DB_USER
              value: "postgres"
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: kubeclarity-postgresql-secret
                  key: postgresql-password
            # runtime-scan envs
            - name: SCANNER_JOB_RESULT_LISTEN_PORT
              value: "8888"
            - name: SCANNER_JOB_TEMPLATE_CONFIG_MAP_NAME
              value: "kubeclarity-scanner-template"
            - name: SCANNER_JOB_TEMPLATE_CONFIG_MAP_NAMESPACE
              value: "kubeclarity"
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8081
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz/live
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 10
          securityContext:
            capabilities:
              drop:
                - all
            runAsNonRoot: true
            runAsGroup: 1000
            runAsUser: 1000
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          resources:
            limits:
              cpu: 1000m
              memory: 1000Mi
            requests:
              cpu: 100m
              memory: 200Mi
---
# Source: kubeclarity/templates/grype_server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeclarity-grype-server
  namespace: 'kubeclarity'
  labels:
    app.kubernetes.io/name: kubeclarity-grype-server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: kubeclarity
    helm.sh/chart: kubeclarity-2.3.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubeclarity-grype-server
  template:
    metadata:
      labels:
        app: kubeclarity-grype-server
    spec:
      serviceAccountName: kubeclarity-grype-server
      volumes:
        - name: tmp-volume
          emptyDir: {}
      securityContext:
        fsGroup: 1000
      containers:
        - name: grype-server
          image: 'gcr.io/eticloud/k8sec/grype-server:v0.1.2'
          imagePullPolicy: Always
          args:
            - run
            - --log-level
            - warning
          env:
            - name: DB_ROOT_DIR
              value: /tmp/
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8080
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz/live
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 10
          securityContext:
            capabilities:
              drop:
                - all
            runAsNonRoot: true
            runAsGroup: 1000
            runAsUser: 1000
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          resources:
            limits:
              cpu: 1000m
              memory: 1G
            requests:
              cpu: 200m
              memory: 200Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
---
# Source: kubeclarity/templates/sbom_db/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeclarity-sbom-db
  namespace: 'kubeclarity'
  labels:
    app.kubernetes.io/name: kubeclarity-sbom-db
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: kubeclarity
    helm.sh/chart: kubeclarity-2.3.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubeclarity-sbom-db
  template:
    metadata:
      labels:
        app: kubeclarity-sbom-db
    spec:
      serviceAccountName: kubeclarity-sbom-db
      volumes:
        - name: tmp-volume
          emptyDir: {}
      securityContext:
        fsGroup: 1000
      containers:
        - name: sbom-db
          image: 'ghcr.io/openclarity/kubeclarity-sbom-db:v2.3.0'
          imagePullPolicy: Always
          args:
            - run
            - --log-level
            - warning
          env:
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 8081
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz/live
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 30
            failureThreshold: 5
            timeoutSeconds: 10
          securityContext:
            capabilities:
              drop:
                - all
            runAsNonRoot: true
            runAsGroup: 1000
            runAsUser: 1000
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          resources:
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 10m
              memory: 20Mi
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
---
# Source: kubeclarity/charts/kubeclarity-postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kubeclarity-postgresql
  labels:
    app.kubernetes.io/name: kubeclarity-postgresql
    helm.sh/chart: kubeclarity-postgresql-10.12.2
    app.kubernetes.io/instance: kubeclarity
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
  annotations:
  namespace: kubeclarity
spec:
  serviceName: kubeclarity-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kubeclarity-postgresql
      app.kubernetes.io/instance: kubeclarity
      role: primary
  template:
    metadata:
      name: kubeclarity-postgresql
      labels:
        app.kubernetes.io/name: kubeclarity-postgresql
        helm.sh/chart: kubeclarity-postgresql-10.12.2
        app.kubernetes.io/instance: kubeclarity
        app.kubernetes.io/managed-by: Helm
        role: primary
        app.kubernetes.io/component: primary
    spec:      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: kubeclarity-postgresql
                    app.kubernetes.io/instance: kubeclarity
                    app.kubernetes.io/component: primary
                namespaces:
                  - "kubeclarity"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      serviceAccountName: kubeclarity-postgresql
      containers:
        - name: kubeclarity-postgresql
          image: docker.io/bitnami/postgresql:11.13.0-debian-10-r40
          imagePullPolicy: "IfNotPresent"
          resources:
            limits:
              cpu: 1000m
              memory: 500Mi
            requests:
              cpu: 250m
              memory: 250Mi
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kubeclarity-postgresql-secret
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "kubeclarity"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=kubeclarity" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=kubeclarity" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
        - name: metrics
          image: docker.io/bitnami/postgres-exporter:0.10.0-debian-10-r68
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: DATA_SOURCE_URI
              value: 127.0.0.1:5432/kubeclarity?sslmode=disable
            - name: DATA_SOURCE_PASS
              valueFrom:
                secretKeyRef:
                  name: kubeclarity-postgresql-secret
                  key: postgresql-password
            - name: DATA_SOURCE_USER
              value: postgres
          livenessProbe:
            httpGet:
              path: /
              port: http-metrics
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              port: http-metrics
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
          ports:
            - name: http-metrics
              containerPort: 9187
          resources:
            limits:
              cpu: 200m
              memory: 128M
            requests:
              cpu: 50m
              memory: 64M
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: kubeclarity/charts/kubeclarity-postgresql/templates/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: kubeclarity-postgresql
  labels:
    app.kubernetes.io/name: kubeclarity-postgresql
    helm.sh/chart: kubeclarity-postgresql-10.12.2
    app.kubernetes.io/instance: kubeclarity
    app.kubernetes.io/managed-by: Helm
    prometheus: system

spec:
  endpoints:
    - port: http-metrics
  namespaceSelector:
    matchNames:
      - kubeclarity
  selector:
    matchLabels:
      app.kubernetes.io/name: kubeclarity-postgresql
      app.kubernetes.io/instance: kubeclarity
---
# Source: kubeclarity/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kubeclarity-postgresql-secret
  namespace: 'kubeclarity'
  labels:
    app.kubernetes.io/name: kubeclarity
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: kubeclarity
    helm.sh/chart: kubeclarity-2.3.0
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-weight: "1"
data:
  postgresql-password: MTIzamVma2Vqb3Fs
---
# Source: kubeclarity/templates/grype_server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeclarity-grype-server
  namespace: 'kubeclarity'
  labels:
    app.kubernetes.io/name: kubeclarity-grype-server
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: kubeclarity
    helm.sh/chart: kubeclarity-2.3.0
  annotations:
    helm.sh/hook: pre-install
spec:
  ports:
    - name: healthz
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: grype-server
      port: 9991
      protocol: TCP
      targetPort: 9991
  selector:
    app: kubeclarity-grype-server
---
# Source: kubeclarity/templates/sbom_db/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeclarity-sbom-db
  namespace: 'kubeclarity'
  labels:
    app.kubernetes.io/name: kubeclarity-sbom-db
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: kubeclarity
    helm.sh/chart: kubeclarity-2.3.0
  annotations:
    helm.sh/hook: pre-install
spec:
  ports:
    - name: healthz
      port: 8081
      protocol: TCP
      targetPort: 8081
    - name: backend
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: kubeclarity-sbom-db
---
# Source: kubeclarity/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kubeclarity
  namespace: 'kubeclarity'
  labels:
    app.kubernetes.io/name: kubeclarity
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: kubeclarity
    helm.sh/chart: kubeclarity-2.3.0
  annotations:
    helm.sh/hook: pre-install
spec:
  type: ClusterIP
  ports:
    - name: backend
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: runtime-scan-results
      port: 8888
      protocol: TCP
      targetPort: 8888
  selector:
    app: kubeclarity
