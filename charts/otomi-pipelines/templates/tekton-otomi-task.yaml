{{- $kms := .Values.kms | default dict }}

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: otomi-task
  namespace: otomi-pipelines
spec:
  params:
    - name: OTOMI_VERSION
    - name: CI
    - name: repoUrl
    - name: giteaCredentialsSecretName
  workspaces:
    - name: source
      mountPath: /home/app/stack/env
  stepTemplate:
    resources: {{- toYaml .Values.tektonTask.resources | nindent 6 }}    
    env:
    - name: GITEA_USERNAME
      valueFrom:
        secretKeyRef:
          name: '$(params.giteaCredentialsSecretName)'
          key: username
    - name: GITEA_PASSWORD
      valueFrom:
        secretKeyRef:
          name: '$(params.giteaCredentialsSecretName)'
          key: password
{{- if hasKey $kms "sops" }}
{{- $v := $kms.sops }}
{{- with $v.azure }}
    - name: AZURE_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: otomi-sops-secrets
          key: AZURE_CLIENT_ID
    - name: AZURE_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: otomi-sops-secrets
          key: AZURE_CLIENT_SECRET
  {{- if hasKey . "tenantId" }}
    - name: AZURE_TENANT_ID
      valueFrom:
        secretKeyRef:
          name: otomi-sops-secrets
          key: AZURE_TENANT_ID
  {{- end }}     
  {{- if hasKey . "environment" }}
    - name: AZURE_ENVIRONMENT
      valueFrom:
        secretKeyRef:
          name: otomi-sops-secrets
          key: AZURE_ENVIRONMENT
  {{- end }}
{{- end }}
{{- with $v.aws }}
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: otomi-sops-secrets
          key: AWS_ACCESS_KEY_ID
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: otomi-sops-secrets
          key: AWS_SECRET_ACCESS_KEY
  {{- if hasKey . "region" }}
    - name: AWS_REGION
      valueFrom:
        secretKeyRef:
          name: otomi-sops-secrets
          key: AWS_REGION
  {{- end }}
{{- end }}
{{- with $v.google }}
    - name: GCLOUD_SERVICE_KEY
      valueFrom:
        secretKeyRef:
          name: otomi-sops-secrets
          key: GCLOUD_SERVICE_KEY
  {{- if hasKey . "project" }}
    - name: GOOGLE_PROJECT
      valueFrom:
        secretKeyRef:
          name: otomi-sops-secrets
          key: GOOGLE_PROJECT
  {{- end }}
  {{- if hasKey . "region" }}
    - name: GOOGLE_REGION
      valueFrom:
        secretKeyRef:
          name: otomi-sops-secrets
          key: GOOGLE_REGION
  {{- end }}
{{- end }}
{{- if hasKey $v "vault" }}
    - name: VAULT_TOKEN
      valueFrom:
        secretKeyRef:
          name: otomi-sops-secrets
          key: VAULT_TOKEN
{{- end }}
{{- end }}
    - name: CI
      value: $(params["CI"])
    - name: IN_DOCKER
      value: '1'
  steps:
    - name: git-clone
      image: otomi/core:$(params["OTOMI_VERSION"])
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e

        # Cleaning up the workdir. If any folder is there (like lost+found) it will cause the git clone to fail
        rm -rf *

        # Parsing the repo url
        export fullRepoUrl=$(params["repoUrl"])
        export url=$(echo $fullRepoUrl|sed 's/https\:\/\///')

        # Cloning the values
        {{- if .Values.cloneUnsecure }}
          git clone -c http.sslVerify=false --depth 1 https://$GITEA_USERNAME:$GITEA_PASSWORD@$url
        {{- else}}
          git clone --depth 1 https://$GITEA_USERNAME:$GITEA_PASSWORD@$url
        {{- end }}

    - name: bootstrap
      image: otomi/core:$(params["OTOMI_VERSION"])
      workingDir: $(workspaces.source.path)
      command:
        - '/bin/bash'
      args:
        - '-c'
        - 'export ENV_DIR=$PWD/values && ../binzx/otomi bootstrap'
    - name: test
      image: otomi/core:$(params["OTOMI_VERSION"])
      workingDir: $(workspaces.source.path)
      command:
        - '/bin/bash'
      args:
        - '-c'
        - 'export ENV_DIR=$PWD/values && ../binzx/otomi validate-values'
    - name: apply
      image: otomi/core:$(params["OTOMI_VERSION"])
      workingDir: $(workspaces.source.path)
      command:
        - '/bin/bash'
      args:
        - '-c'
        - 'export ENV_DIR=$PWD/values && ../binzx/otomi apply'
