{{- $kms := .Values.kms | default dict }}

apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: otomi-task
  namespace: otomi-pipelines
spec:
  params:
    - name: OTOMI_VERSION
    - name: CI
    - name: repoUrl
    - name: giteaCredentialsSecretName
  workspaces:
    - name: source
      mountPath: /home/app/stack/env
    - name: gitea-credentials
      mountPath: /etc/gitea-credentials
  stepTemplate:
    computeResources: {{- toYaml .Values.tektonTask.resources | nindent 6 }}
    imagePullPolicy: Always
    image: otomi/core:$(params["OTOMI_VERSION"])
    workingDir: $(workspaces.source.path)
{{- if hasKey $kms "sops" }}
    envFrom:
    - secretRef:
        name: otomi-sops-secrets
{{- end }}
    env:
    - name: CI
      value: $(params["CI"])
    - name: IN_DOCKER
      value: '1'
  steps:
    - name: git-clone
      script: |
        #!/bin/bash
        set -e

        # Cleaning up the workdir. If any folder is there (like lost+found) it will cause the git clone to fail
        rm -rf *

        # Reading gitea credentials
        GITEA_USERNAME=$(cat /etc/gitea-credentials/username)
        GITEA_PASSWORD=$(cat /etc/gitea-credentials/password)

        # Parsing the repo url
        export fullRepoUrl=$(params["repoUrl"])
        export url=$(echo $fullRepoUrl|sed 's/https\:\/\///')

        # Cloning the values
        {{- if .Values.cloneUnsecure }}
        git clone -c http.sslVerify=false --depth 1 https://$GITEA_USERNAME:$GITEA_PASSWORD@$url
        {{- else}}
        git clone --depth 1 https://$GITEA_USERNAME:$GITEA_PASSWORD@$url
        {{- end }}
    - name: bootstrap
      command:
        - '/bin/bash'
      args:
        - '-c'
        - 'export ENV_DIR=$PWD/values && ../binzx/otomi bootstrap'
    - name: test
      command:
        - '/bin/bash'
      args:
        - '-c'
        - 'export ENV_DIR=$PWD/values && ../binzx/otomi validate-values'
    - name: apply
      command:
        - '/bin/bash'
      args:
        - '-c'
        - 'export ENV_DIR=$PWD/values && ../binzx/otomi apply'
