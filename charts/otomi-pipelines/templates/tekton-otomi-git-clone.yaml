apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: otomi-git-clone
  namespace: otomi-pipelines
spec:
  params:
    - name: repoUrl
    - name: commitMessage
    - name: giteaCredentialsSecretName
  results:
    - name: CI
      description: Determine if pipeline should run based on the commit message
    - name: OTOMI_VERSION
      description: Otomi version as in values/env/settings.yaml
    - name: TRIGGER_TEAMS_PIPELINE
      description: Determine if the otomi-task-teams is about to run
    - name: TRIGGER_PLATFORM_PIPELINE
      description: Determine if the otomi-task is about to run
  workspaces:
    - name: source
      mountPath: /home/app/stack/env/
    - name: gitea-credentials
      mountPath: /etc/gitea-credentials
  stepTemplate:
    computeResources: {{- toYaml .Values.tektonTask.resources | nindent 6 }}
    workingDir: $(workspaces.source.path)
    image: otomi/core:v1.0.0
  steps:
    - name: git-clone
      script: |
        #!/bin/bash
        set -e

        # Cleaning up the workdir(if lost+found is present)
        rm -rf *

        # Reading the commit message
        COMMIT_MESSAGE=$1

        # Reading gitea credentials
        GITEA_USERNAME=$(cat /etc/gitea-credentials/username)
        GITEA_PASSWORD=$(cat /etc/gitea-credentials/password)

        # Getting the full repository url
        export fullRepoUrl=$(params["repoUrl"])
        echo $fullRepoUrl

        # Removing the proto part ('https://')
        export url=$(echo $fullRepoUrl|sed 's/https\:\/\///')

        # Cloning the values
        {{- if .Values.cloneUnsecure }}
        git clone -c http.sslVerify=false --depth 2 https://$GITEA_USERNAME:$GITEA_PASSWORD@$url
        {{- else }}
        git clone --depth 2 https://$GITEA_USERNAME:$GITEA_PASSWORD@$url
        {{- end }}

        # Checking if the next steps should run or skipped 
        if [[ ! $COMMIT_MESSAGE == *ci\ skip* ]]; then
            echo -n "1" > $(results.CI.path) && export CI="1" && echo "Running next task"
          else
            echo -n "0" > $(results.CI.path) && export CI="0" && echo "Finished"
        fi
        
        echo -n "$(yq r values/env/settings.yaml otomi.version)" > $(results.OTOMI_VERSION.path)
        cd values
        # Check if team files has been changed
        if git diff --name-only  HEAD~1 | grep  -e "env/.*.teams" -e "env/teams"; then
          echo -n "1" > $(results.TRIGGER_TEAMS_PIPELINE.path) 
        fi

        # Check if there is any other change than in teams/ dir
        if git diff --name-only HEAD~1 | grep -v "env/teams/"; then
          echo -n "1" > $(results.TRIGGER_PLATFORM_PIPELINE.path)
        fi
      args:
        - '$(params["commitMessage"])'
